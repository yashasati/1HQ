{"version":3,"mappings":"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","names":["module","exports","a","b","constructor","length","i","keys","Array","isArray","equal","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","g","v","type","label","description","defaultValue","operator","value","options","f","component","O","componentData","modelType","x","t","dt","$","W","lt","vt","bt","U","j","this","datatable","data$","ngOnInit","paginator","dontUpdateQueryParams","title","uri","e","staticParams","with","titleId","id","init","openCrupdateReviewModal","openCrupdateResourceModal","P","review","mediaId","mediaType","model_type","subscribe","maybeDeleteSelectedReviews","confirmResourceDeletion","reviews","delete","selectedRows$","toast","open","d","reset","V","selectors","C","decls","Q","A","B","pt","mt","Ct","Pt","maybeDeleteSelectedVideos","videos","openCrupdateVideoModal","video","toggleApprovedState","modifying$","next","approved","disapprove","approve","pipe","s","n","c","Z","w","G","ht","_t","fb","group","name","original_title","is_series","language","tagline","poster","backdrop","budget","revenue","runtime","country","popularity","certification","release_date","allow_update","certificationOptions","settings","getJson","store","dispatch","select","form","patchValue","split","poster$","get","valueChanges","uploadImage","types","Y","then","uploadQueue","start","httpParams","diskPrefix","fileEntry","url","submit","selectSnapshot","titles","update","create","F","router","navigate","includes","replace","J","T","character","department","job","data","credit","pivot","valueLists","availableJobs","tmdbJobs","forEach","jobs","map","filteredJobs","filter","toLowerCase","slice","confirm","getPayload","mediaItem","close","message","dialogRef","setCredit","jobSelected","find","option","D","Mt","ngOnChanges","currentValue","getCast","credits","getCrew","ngOnDestroy","destroy","openCrupdateCreditModal","dialog","detachCredit","z","body","ok","afterClosed","changeCreditsOrder","previousIndex","currentIndex","l","episode_number","episode","bindToStoreEpisode","episodeForm","episode$","setTimeout","loadEpisodeCredits","season","episode_count","updateEpisode","createEpisode","errors$","episodes","errors","uploadPoster","seasons","number","season_number","toPromise","Zt","Yt","ngAfterViewInit","route","snapshot","params","episodeNumber","openCrupdateEpisodeModal","deleteEpisode","panelClass","activeSeason$","seasonNumber","el","nativeElement","querySelector","scrollIntoView","behavior","block","inline","addSeason","maybeDeleteSeason","modal","bodyBold","trackByFn","xt","placeholder","activeContainer","element","dropContainer","At","Jt","Ut","parentElement","children","Nt","sourceIndex","style","width","clientWidth","height","clientHeight","removeChild","targetIndex","target","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","modelId","images","image","deleteImage","dragMoved","getPointerPositionOnPage","event","listGroup","_items","top","bottom","left","right","getBoundingClientRect","Kt","y","dropListDropped","appendChild","startsWith","touches","changedTouches","viewportRuler","getViewportScrollPosition","pageX","pageY","indexOf","Tt","ue","tagService","index","perPage","tagType","existingTags$","pagination","formControl","oe","searchTags","St","suggestedTags$","writeValue","selectTags","skipPropagate","override","registerOnChange","propagateChange","registerOnTouched","trim","selectedTags$","deselectTag","splice","selectTagsFromString","ee","query","It","provide","useExisting","multi","ge","pluralName","selectedTagsControl","noTagsSelected","fe","getTagObservable","openTagManagerModal","beforeClosed","detachTag","api","queryParams","activePanel$","active","openPanel","titleCreated","yt","Ue","path","resolve","fullCredits","keywords","countries","skipUpdating","allVideos","fallbackUri","Ft","Ee","factory","permissions","Se","Le","we","De","Fe","Je","Ne","ke","Qe","Re","$e","H","tt","it","N","st","h","rt","qe","http","BASE_URI","post","put","haveUrl","user","oxw","filterSelected","q","anyFocused","document","activeElement","classList","contains","focusItemAt","r","items","focus","getFocusedFilter","dataset","filterKey","filters","getFocusedIndex","parseInt","p","value$","onClick","openSelectModelDialog","u","E","has","doesntHave","ct","transform","breakpoints","isMobile$","pure","resizeSelect","selectedIndex","S","_","ot","resizeInput","focusValueInput","valueInput","nodeName","add","K","defaultOperator","ft","controls","addControl","emitEvent","cd","detectChanges","last","removeByKey","removeControl","markForCheck","removeCurrentlyFocused","controlKey","focusLast","focusPrevious","getByIndex","lastIsFocused","bindings","push","keybind","parseKeybindString","keybindString","callback","addWithPreventDefault","preventDefault","listenOn","fireIfInputFocused","executeBindings","bindingMatches","toUpperCase","keyCode","ctrlKey","ctrl","metaKey","shiftKey","shift","Ot","keyedFilters","haveFiltersOrQuery$","searchControl","watchForSizeChanges","setFiltersFromQuery","setupKeybinds","subscribeToCloseActions","bindToFormValueChange","activeFilters","searchInput","closeActionsStream$","unsubscribe","clearSearch","toggleFilterDropdown","filterDropdownVisible$","addFilterFromDropdownClick","searchInputIsFocused","cursorAtStartOfSearchInput","selectionStart","cursorAtEndOfSearchInput","filterChange","emit","ResizeObserver","filterBarHeight","contentRect","observe","box","routerState","root","setValue","keybinds","suggestions","values","encodeURIComponent","btoa","JSON","stringify","parse","atob","decodeURIComponent","onFilterChange","datable","filters$","eq","required","order","Select","inputType","operators","ne","gt","gte","lte","Date","toISOString","L","modelName","searchFormControl","searchModel","results$","loading$","results","I","changeRef","response$","totalRecords","total","to","Math","min","per_page","current_page","from","max","havePrevious","canLoadPrevPage","haveNext","canLoadNextPage","perPageControl","changePerPage","previousPage","nextPage","originX","originY","overlayX","overlayY","offsetX","overlayPanelRef","changeDetection","super","nt","filterPanelRef","numberOfRowsSelected","subscriptions","openFiltersPanel","offsetY","overlayPanel","origin","filterButton","position","mobilePosition","filterPanelTemplate","maxWidth","remove","isModel","M","m","paginatedOnce$","params$","paginate","subscription","currentQueryParams","page","cursor","next_cursor","prev_cursor","perPageCacheKey","localStorage","set","updateQueryParams","join","replaceUrl","currentPage","last_page","Number","reduce","originalData$","ignoreNextParamChange","config","staticParams$","connectToPaginator","initialData","searchTerm$","sort$","orderBy","orderDir","searchControlSub","mainSub","assign","entries","applyLocalTransforms","paginatorSub","infiniteScroll","sort","R","addFilter","removeFilter","replacements","resource","getCurrentParams","isRowSelected","toggleRow","anyRowsSelected","allRowsSelected","toggleAllRows","disableSort","columnName","textContent","sortSub","onMouseLeave","focusMonitor","monitor","stopMonitoring","changeSort","getDirection","arrowVisible","arrowDirection","onMouseEnter","handleClick","handleKeydown"],"sources":["./node_modules/fast-deep-equal/index.js","./src/app/admin/reviews-index/review-index-filters.ts","./src/app/admin/reviews-index/reviews-index.component.html","./src/app/admin/reviews-index/reviews-index.component.ts","./src/app/admin/video-index/video-index-filters.ts","./src/app/admin/video-index/video-index.component.html","./src/app/admin/video-index/video-index.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.ts","./src/common/tags/tags-manager/tags-manager.component.html","./src/common/tags/tags-manager/tags-manager.component.ts","./src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.ts","./src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.html","./src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.ts","./src/app/site/titles/crupdate-title/crupdate-title-routing.module.ts","./src/app/site/titles/crupdate-title/crupdate-title/crupdate-title-resolver.service.ts","./src/app/site/titles/crupdate-title/crupdate-title.module.ts","./src/common/core/services/tags.service.ts","./src/common/core/types/models/User.ts","./src/common/core/ui/select-user-input/select-user-input.module.ts","./src/common/core/utils/remove-null-from-object.ts","./src/common/datatable/columns/user-column/user-column.component.html","./src/common/datatable/columns/user-column/user-column.component.ts","./src/common/datatable/datatable-filters/search-input-with-filters/filter-suggestions/filter-suggestions.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/filter-suggestions/filter-suggestions.component.ts","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/select-model-control/select-model-control.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/select-model-control/select-model-control.component.ts","./src/common/datatable/datatable-filters/filter-operator-names.ts","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/operator-select/operator-display-name.pipe.ts","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/operator-select/operator-select.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/operator-select/operator-select.component.ts","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/active-filter/active-filter.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/active-filter/active-filter.component.ts","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/active-filters.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/active-filters/active-filters.component.ts","./src/common/core/keybinds/keycodes.enum.ts","./src/common/core/keybinds/keybinds.service.ts","./src/common/datatable/datatable-filters/search-input-with-filters/search-input-with-filters.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/search-input-with-filters.component.ts","./src/common/datatable/datatable-filters/datatable-filters.component.ts","./src/common/datatable/datatable-filters/datatable-filters.component.html","./src/common/datatable/datatable-filters/search-input-with-filters/filter-config/datatable-filter.ts","./src/common/datatable/datatable-filters/search-input-with-filters/filter-config/timestamp-filter.ts","./src/common/datatable/datatable-filters/select-model-dialog/select-model-dialog.component.html","./src/common/datatable/datatable-filters/select-model-dialog/select-model-dialog.component.ts","./src/common/datatable/datatable-footer/datatable-footer.component.html","./src/common/datatable/datatable-footer/datatable-footer.component.ts","./src/common/core/ui/overlay-panel/positions/left-position.ts","./src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.html","./src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.ts","./src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.html","./src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.ts","./src/common/core/ui/format-pipes/title-case.pipe.ts","./src/common/datatable/datatable-header/datatable-header.component.html","./src/common/datatable/datatable-header/datatable-header.component.ts","./src/common/datatable/datatable-filters/search-input-with-filters/search-input-with-filters.module.ts","./src/common/datatable/datatable.module.ts","./src/common/shared/paginator.service.ts","./src/common/datatable/delete-resource-message.ts","./src/common/datatable/utils/sort-datatable-data.ts","./src/common/datatable/utils/filter-datatable-data.ts","./src/common/datatable/datatable.service.ts","./src/common/datatable/selection/table-body-checkbox.component.ts","./src/common/datatable/selection/table-header-checkbox.component.ts","./src/common/datatable/table-sort-header/table-sort-header.component.ts","./src/common/datatable/table-sort-header/table-sort-header.component.html"],"sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import {\n    DatatableFilter,\n    FilterControlType,\n    FilterOperator,\n} from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/datatable-filter';\nimport {\n    CreatedAtFilter,\n    UpdatedAtFilter,\n} from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/timestamp-filter';\nimport {SelectModelDialogComponent} from '@common/datatable/datatable-filters/select-model-dialog/select-model-dialog.component';\nimport {MEDIA_TYPE} from '../../site/media-type';\nimport {USER_MODEL} from '@common/core/types/models/User';\n\nexport const REVIEW_INDEX_FILTERS: DatatableFilter[] = [\n    new DatatableFilter({\n        type: FilterControlType.Select,\n        key: 'body',\n        label: 'Type',\n        description: 'Type of the review',\n        defaultValue: {operator: FilterOperator.ne, value: null},\n        options: [\n            {key: 'Review', value: {operator: FilterOperator.ne, value: null}},\n            {key: 'Rating', value: {operator: FilterOperator.eq, value: null}},\n        ],\n    }),\n    new UpdatedAtFilter({\n        description: 'Date video was last updated',\n    }),\n    new CreatedAtFilter({\n        description: 'Date video was created',\n    }),\n    new DatatableFilter({\n        type: FilterControlType.SelectModel,\n        key: 'user_id',\n        label: 'User',\n        description: 'User review was created by',\n        component: SelectModelDialogComponent,\n        componentData: {modelType: USER_MODEL},\n    }),\n    new DatatableFilter({\n        type: FilterControlType.SelectModel,\n        key: 'reviewable_id',\n        label: 'Title',\n        description: 'Title review is for',\n        component: SelectModelDialogComponent,\n        componentData: {modelType: MEDIA_TYPE.TITLE},\n    }),\n];\n","<div class=\"datatable-page-header\">\n  <h1 trans>Reviews</h1>\n\n  <div class=\"header\">\n    <datatable-filters pluralName=\"reviews\" [filters]=\"filters\"></datatable-filters>\n    <div class=\"action-buttons\">\n      <button\n        *ngIf=\"currentUser.hasPermission('reviews.create')\"\n        mat-raised-button\n        color=\"accent\"\n        (click)=\"openCrupdateReviewModal()\"\n        class=\"button-with-icon\"\n      >\n        <mat-icon svgIcon=\"add\"></mat-icon>\n        <span trans>Add New Review</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<div class=\"datatable responsive-table\">\n  <mat-progress-bar\n    class=\"loading-bar\"\n    mode=\"indeterminate\"\n    color=\"accent\"\n    *ngIf=\"datatable.paginator && datatable.paginator.loading$ | async\"\n  ></mat-progress-bar>\n  <table class=\"material-table\">\n    <thead>\n      <tr>\n        <th table-header-checkbox></th>\n        <th table-sort-header trans>Score</th>\n        <th table-sort-header=\"user_id\" trans>Owner</th>\n        <th table-sort-header=\"media_item_id\" trans>Reviewable</th>\n        <th table-sort-header=\"body\" trans>Type</th>\n        <th table-sort-header=\"updated_at\" trans>Last Updated</th>\n        <th></th>\n      </tr>\n      <tr *ngIf=\"datatable.selectedRows$.value.length as selectedCount\">\n        <th colspan=\"7\">\n          <div\n            class=\"bulk-actions-title\"\n            [transValues]=\"{count: selectedCount, resource: 'review(s)'}\"\n            trans\n          >\n            :count :resource selected:\n          </div>\n          <div class=\"bulk-actions\">\n            <button\n              mat-raised-button\n              color=\"warn\"\n              (click)=\"maybeDeleteSelectedReviews()\"\n              *ngIf=\"currentUser.hasPermission('reviews.delete')\"\n              trans\n            >\n              Delete\n            </button>\n          </div>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let review of reviews$ | async\">\n        <td [table-body-checkbox]=\"review.id\"></td>\n        <td data-label=\"Score\">\n          <mat-icon svgIcon=\"star-border\" class=\"star-icon\"></mat-icon>\n          <span>{{ review.score }}/10</span>\n        </td>\n        <td data-label=\"User\">\n          <user-column [user]=\"review.user\"></user-column>\n        </td>\n        <td data-label=\"Reviewable\">\n          <div class=\"column-with-image\">\n            <a\n              class=\"link\"\n              target=\"_blank\"\n              [routerLink]=\"url.generate(review.reviewable)\"\n              *ngIf=\"review.reviewable\"\n            >\n              <img [src]=\"review.reviewable.poster\" alt=\"reviewable image\" />\n              <span>{{ review.reviewable.name }}</span>\n            </a>\n          </div>\n        </td>\n        <td data-label=\"Type\">{{ review.body ? 'Review' : 'Rating' }}</td>\n        <td data-label=\"Last Updated\">{{ review.updated_at | formattedDate }}</td>\n        <td class=\"edit-column\">\n          <button\n            mat-icon-button\n            (click)=\"openCrupdateReviewModal(review)\"\n            *ngIf=\"currentUser.hasPermission('reviews.update')\"\n            [matTooltip]=\"'Edit review' | trans\"\n          >\n            <mat-icon svgIcon=\"edit\"></mat-icon>\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <no-results-message svgImage=\"like-dislike.svg\" *ngIf=\"datatable.paginator.noResults$ | async\">\n    <span primary-text trans>No reviews have been created yet</span>\n  </no-results-message>\n  <datatable-footer></datatable-footer>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Review} from '../../models/review';\nimport {ReviewService} from '../../site/shared/review.service';\nimport {CrupdateReviewModalComponent} from '../../site/reviews/crupdate-review-modal/crupdate-review-modal.component';\nimport {Observable} from 'rxjs';\nimport {\n    DatatableService,\n    DatatableStaticParams,\n} from '@common/datatable/datatable.service';\nimport {MESSAGES} from '../../toast-messages';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {Title} from '../../models/title';\nimport {REVIEW_INDEX_FILTERS} from './review-index-filters';\nimport {UrlGeneratorService} from '@common/core/services/url-generator.service';\n\n@Component({\n    selector: 'reviews-index',\n    templateUrl: './reviews-index.component.html',\n    styleUrls: ['./reviews-index.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService],\n})\nexport class ReviewsIndexComponent implements OnInit {\n    @Input() title: Title;\n    filters = REVIEW_INDEX_FILTERS;\n    reviews$ = this.datatable.data$ as Observable<Review[]>;\n\n    constructor(\n        public datatable: DatatableService<Review>,\n        private reviews: ReviewService,\n        private modal: Modal,\n        public currentUser: CurrentUser,\n        public settings: Settings,\n        private toast: Toast,\n        public url: UrlGeneratorService\n    ) {}\n\n    ngOnInit() {\n        // will be paginating inside parent component, so should not update query\n        this.datatable.paginator.dontUpdateQueryParams = !!this.title;\n\n        // make sure table filter \"titleId\" is not overwritten with null from staticParams\n        const config = {\n            uri: ReviewService.BASE_URI,\n            staticParams: {\n                with: ['user', 'reviewable'],\n            } as DatatableStaticParams,\n        };\n        if (this.title) {\n            config.staticParams = {titleId: this.title.id};\n        }\n        this.datatable.init(config);\n    }\n\n    public openCrupdateReviewModal(review?: Review) {\n        this.datatable\n            .openCrupdateResourceModal(CrupdateReviewModalComponent, {\n                review,\n                mediaId: this.title?.id,\n                mediaType: this.title?.model_type,\n            })\n            .subscribe();\n    }\n\n    public maybeDeleteSelectedReviews() {\n        this.datatable.confirmResourceDeletion('reviews').subscribe(() => {\n            this.reviews\n                .delete(this.datatable.selectedRows$.value)\n                .subscribe(() => {\n                    this.toast.open(MESSAGES.REVIEW_DELETE_SUCCESS);\n                    this.datatable.reset();\n                });\n        });\n    }\n}\n","import {\n    DatatableFilter,\n    FilterControlType, FilterOperator,\n} from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/datatable-filter';\nimport {\n    CreatedAtFilter,\n    UpdatedAtFilter,\n} from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/timestamp-filter';\nimport {SelectModelDialogComponent} from '@common/datatable/datatable-filters/select-model-dialog/select-model-dialog.component';\nimport {MEDIA_TYPE} from '../../site/media-type';\nimport {USER_MODEL} from '@common/core/types/models/User';\n\nexport const VIDEO_INDEX_FILTERS: DatatableFilter[] = [\n    new DatatableFilter({\n        type: FilterControlType.Select,\n        key: 'type',\n        label: 'Type',\n        description: 'Type of the video',\n        defaultValue: 'embed',\n        options: [\n            {key: 'All', value: {value: null, operator: FilterOperator.ne}},\n            {key: 'Embed', value: 'embed'},\n            {key: 'Direct Video', value: 'video'},\n            {key: 'Frame', value: 'frame'},\n            {key: 'Remote Link', value: 'remote'},\n        ]\n    }),\n    new DatatableFilter({\n        type: FilterControlType.Select,\n        key: 'approved',\n        label: 'Status',\n        description: 'Whether video is approved or not',\n        defaultValue: false,\n        options: [\n            {key: 'Approved', value: true},\n            {key: 'Not Approved', value: false},\n        ]\n    }),\n    new DatatableFilter({\n        type: FilterControlType.Select,\n        key: 'source',\n        label: 'Source',\n        description: 'Whether video source is local or external',\n        defaultValue: 'local',\n        options: [\n            {key: 'All', value: {value: null, operator: FilterOperator.ne}},\n            {key: 'Local', value: 'local'},\n            {key: 'External', value: 'external'},\n        ]\n    }),\n    new DatatableFilter({\n        type: FilterControlType.Select,\n        key: 'category',\n        label: 'Category',\n        description: 'Category video is attched to',\n        defaultValue: 'trailer',\n        options: [\n            {key: 'All', value: {value: null, operator: FilterOperator.ne}},\n            {key: 'Trailer', value: 'trailer'},\n            {key: 'Full Movie or episode', value: 'full'},\n            {key: 'Clip', value: 'clip'},\n            {key: 'Teaser', value: 'teaser'},\n            {key: 'Featurette', value: 'featurette'},\n        ]\n    }),\n    new DatatableFilter({\n        type: FilterControlType.Select,\n        key: 'quality',\n        description: 'Quality of the video',\n        defaultValue: 'hd',\n        options: [\n            {key: 'SD', value: 'sd'},\n            {key: 'HD', value: 'hd'},\n            {key: '4k', value: '4k'},\n            {key: 'HDR', value: 'hdr'},\n        ]\n    }),\n\n    new UpdatedAtFilter({\n        description: 'Date video was last updated',\n    }),\n    new CreatedAtFilter({\n        description: 'Date video was created',\n    }),\n    new DatatableFilter({\n        type: FilterControlType.SelectModel,\n        key: 'user_id',\n        label: 'User',\n        description: 'User video was created by',\n        component: SelectModelDialogComponent,\n        componentData: {modelType: USER_MODEL},\n    }),\n    new DatatableFilter({\n        type: FilterControlType.SelectModel,\n        key: 'title_id',\n        label: 'Title',\n        description: 'Title video is attached to',\n        component: SelectModelDialogComponent,\n        componentData: {modelType: MEDIA_TYPE.TITLE},\n    }),\n];\n","<div class=\"datatable-page-header\">\n  <h1 trans>Videos</h1>\n\n  <div class=\"header\">\n    <datatable-filters pluralName=\"videos\" [filters]=\"filters\"></datatable-filters>\n    <div class=\"action-buttons\">\n      <button\n        *ngIf=\"currentUser.hasPermission('videos.create')\"\n        mat-raised-button\n        color=\"accent\"\n        (click)=\"openCrupdateVideoModal()\"\n        class=\"button-with-icon\"\n      >\n        <mat-icon svgIcon=\"add\"></mat-icon>\n        <span trans>Add New Video</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<div class=\"datatable responsive-table\">\n  <mat-progress-bar\n    class=\"loading-bar\"\n    mode=\"indeterminate\"\n    color=\"accent\"\n    *ngIf=\"datatable.paginator && datatable.paginator.loading$ | async\"\n  ></mat-progress-bar>\n  <table class=\"material-table\">\n    <thead>\n      <tr>\n        <th table-header-checkbox></th>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header=\"title_id\" *ngIf=\"!title\" trans>Title</th>\n        <th table-sort-header trans>Type</th>\n        <th table-sort-header trans>Category</th>\n        <th table-sort-header trans>Approved</th>\n        <th table-sort-header=\"plays_count\" trans>Plays</th>\n        <th table-sort-header trans>Quality</th>\n        <th table-sort-header trans>Score</th>\n        <th table-sort-header=\"reports_count\" trans>Reports</th>\n        <th table-sort-header=\"season_num\" trans>Season</th>\n        <th table-sort-header=\"episode_num\" trans>Episode</th>\n        <th></th>\n      </tr>\n      <tr *ngIf=\"datatable.selectedRows$.value.length as selectedCount\">\n        <th colspan=\"12\">\n          <div\n            class=\"bulk-actions-title\"\n            [transValues]=\"{count: selectedCount, resource: 'video(s)'}\"\n            trans\n          >\n            :count :resource selected:\n          </div>\n          <div class=\"bulk-actions\">\n            <button\n              mat-raised-button\n              color=\"warn\"\n              (click)=\"maybeDeleteSelectedVideos()\"\n              *ngIf=\"currentUser.hasPermission('videos.delete')\"\n              trans\n            >\n              Delete\n            </button>\n          </div>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let video of videos$ | async\">\n        <td [table-body-checkbox]=\"video.id\"></td>\n        <td>\n          <div class=\"column-with-image\">\n            <img [src]=\"video.thumbnail || video.title?.backdrop\" alt=\"\" [title]=\"video.name\" />\n            <a class=\"video-name link\" [href]=\"video.url\" target=\"_blank\">{{ video.name }}</a>\n          </div>\n        </td>\n        <td data-label=\"Title\" *ngIf=\"!title\">\n          <a\n            [routerLink]=\"['/admin/titles', video.title.id, 'edit']\"\n            class=\"title-name link\"\n            [queryParams]=\"{active: 'videos'}\"\n            *ngIf=\"video.title\"\n            >{{ video.title.name }}</a\n          >\n        </td>\n        <td data-label=\"Type\" class=\"capitalize\">{{ video.type }}</td>\n        <td data-label=\"Category\" class=\"capitalize\">{{ video.category }}</td>\n        <td data-label=\"Approved\">\n          <button\n            mat-icon-button\n            (click)=\"toggleApprovedState(video)\"\n            class=\"approve-button\"\n            [class.disapproved]=\"!video.approved\"\n            [class.approved]=\"video.approved\"\n            [disabled]=\"modifying$ | async\"\n          >\n            <mat-icon svgIcon=\"check\" class=\"success-icon\"></mat-icon>\n            <mat-icon svgIcon=\"close\" class=\"warn-icon\"></mat-icon>\n          </button>\n        </td>\n        <td data-label=\"Plays\">{{ video.plays_count }}</td>\n        <td data-label=\"Quality\">\n          <div [ngSwitch]=\"video.quality\">\n            <mat-icon class=\"icon-quality\" svgIcon=\"hd\" *ngSwitchCase=\"'hd'\"></mat-icon>\n            <mat-icon class=\"icon-quality\" svgIcon=\"4k\" *ngSwitchCase=\"'4k'\"></mat-icon>\n            <div *ngSwitchCase=\"'regular'\">-</div>\n            <div class=\"text-quality\" *ngSwitchDefault>{{ video.quality }}</div>\n          </div>\n        </td>\n        <td data-label=\"Score\">{{ video.score ? video.score + '%' : '-' }}</td>\n        <td data-label=\"Reports\">{{ video.reports_count ? video.reports_count : '-' }}</td>\n        <td data-label=\"Season\">{{ video.season_num || '-' }}</td>\n        <td data-label=\"Episode\">{{ video.episode_num || '-' }}</td>\n        <td class=\"edit-column\">\n          <button\n            mat-icon-button\n            (click)=\"openCrupdateVideoModal(video)\"\n            *ngIf=\"currentUser.hasPermission('videos.update')\"\n            [matTooltip]=\"'Edit video' | trans\"\n          >\n            <mat-icon svgIcon=\"edit\"></mat-icon>\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <no-results-message svgImage=\"video-files.svg\" *ngIf=\"datatable.paginator.noResults$ | async\">\n    <span primary-text trans>No videos have been created yet</span>\n  </no-results-message>\n  <datatable-footer></datatable-footer>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {VideoService} from '../../site/videos/video.service';\nimport {Video} from '../../models/video';\nimport {CrupdateVideoModalComponent} from '../../site/videos/crupdate-video-modal/crupdate-video-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {Settings} from '@common/core/config/settings.service';\nimport {finalize} from 'rxjs/operators';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {HttpErrors} from '@common/core/http/errors/http-errors.enum';\nimport {Title} from '../../models/title';\nimport {DatatableService} from '@common/datatable/datatable.service';\nimport {VIDEO_INDEX_FILTERS} from './video-index-filters';\n\n@Component({\n    selector: 'video-index',\n    templateUrl: './video-index.component.html',\n    styleUrls: ['./video-index.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService],\n})\nexport class VideoIndexComponent implements OnInit {\n    @Input() title: Title;\n    filters = VIDEO_INDEX_FILTERS;\n    videos$ = this.datatable.data$ as Observable<Video[]>;\n    modifying$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        public datatable: DatatableService<Video>,\n        private videos: VideoService,\n        private modal: Modal,\n        public currentUser: CurrentUser,\n        public settings: Settings,\n        private toast: Toast\n    ) {}\n\n    ngOnInit() {\n        // will be paginating inside parent component, so should not update query\n        this.datatable.paginator.dontUpdateQueryParams = !!this.title;\n\n        // make sure table filter \"titleId\" is not overwritten with null from staticParams\n        const config = {uri: VideoService.BASE_URI, staticParams: {}};\n        if (this.title) {\n            config.staticParams = {titleId: this.title.id};\n        }\n        this.datatable = this.datatable.init(config);\n    }\n\n    public maybeDeleteSelectedVideos() {\n        this.datatable.confirmResourceDeletion('videos').subscribe(() => {\n            this.videos\n                .delete(this.datatable.selectedRows$.value)\n                .subscribe(() => {\n                    this.datatable.reset();\n                });\n        });\n    }\n\n    public openCrupdateVideoModal(video?: Video) {\n        this.datatable\n            .openCrupdateResourceModal(CrupdateVideoModalComponent, {\n                video,\n                title: video ? video.title : this.title,\n            })\n            .subscribe();\n    }\n\n    public toggleApprovedState(video: Video) {\n        this.modifying$.next(true);\n        const request = video.approved\n            ? this.videos.disapprove(video.id)\n            : this.videos.approve(video.id);\n        video.approved = !video.approved;\n        request.pipe(finalize(() => this.modifying$.next(false))).subscribe(\n            () => {},\n            () => {\n                this.toast.open(HttpErrors.Default);\n                video.approved = !video.approved;\n            }\n        );\n    }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <div class=\"poster-container\">\n    <media-image [src]=\"poster$ | async\"></media-image>\n    <div class=\"many-inputs\">\n      <div class=\"inline-container\">\n        <div class=\"input-container\">\n          <label for=\"name\" trans>Title</label>\n          <input\n            type=\"text\"\n            formControlName=\"name\"\n            id=\"name\"\n            minlength=\"1\"\n            maxlength=\"250\"\n            required\n          />\n        </div>\n        <div class=\"input-container\">\n          <label for=\"original-title\" trans>Original Title</label>\n          <input\n            type=\"text\"\n            formControlName=\"original_title\"\n            id=\"original-title\"\n            minlength=\"1\"\n            maxlength=\"250\"\n            required\n          />\n        </div>\n      </div>\n\n      <div class=\"inline-container\">\n        <div class=\"input-container\">\n          <label for=\"type\" trans>Type</label>\n          <select formControlName=\"is_series\" id=\"type\" required>\n            <option [ngValue]=\"false\" trans>Movie</option>\n            <option [ngValue]=\"true\" trans>TV Series</option>\n          </select>\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"allow_update\" trans>Allow Auto Update</label>\n          <select formControlName=\"allow_update\" id=\"allow_update\" required>\n            <option [ngValue]=\"true\" trans>Yes</option>\n            <option [ngValue]=\"false\" trans>No</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"input-container\">\n        <label for=\"poster\" trans>Poster</label>\n        <div class=\"input-with-action action-left\">\n          <button\n            type=\"button\"\n            mat-flat-button\n            color=\"accent\"\n            (click)=\"uploadImage('poster')\"\n            [matTooltip]=\"'Upload poster' | trans\"\n          >\n            <mat-icon svgIcon=\"file-upload\"></mat-icon>\n          </button>\n          <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\" />\n        </div>\n      </div>\n\n      <div class=\"input-container\">\n        <label for=\"backdrop\" trans>Backdrop</label>\n        <div class=\"input-with-action action-left\">\n          <button\n            type=\"button\"\n            mat-flat-button\n            color=\"accent\"\n            (click)=\"uploadImage('backdrop')\"\n            [matTooltip]=\"'Upload backdrop' | trans\"\n          >\n            <mat-icon svgIcon=\"file-upload\"></mat-icon>\n          </button>\n          <input\n            type=\"text\"\n            formControlName=\"backdrop\"\n            id=\"backdrop\"\n            minlength=\"1\"\n            maxlength=\"250\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"release_date\" trans>Release Date</label>\n      <input\n        type=\"date\"\n        formControlName=\"release_date\"\n        id=\"release_date\"\n        placeholder=\"YYYY-MM-DD\"\n        required\n      />\n    </div>\n\n    <div class=\"input-container\">\n      <label for=\"tagline\" trans>Tagline</label>\n      <input type=\"text\" formControlName=\"tagline\" id=\"tagline\" minlength=\"1\" maxlength=\"250\" />\n    </div>\n  </div>\n\n  <div class=\"input-container\">\n    <label for=\"description\" trans>Overview</label>\n    <textarea\n      type=\"text\"\n      formControlName=\"description\"\n      id=\"description\"\n      minlength=\"1\"\n      cdkTextareaAutosize\n      cdkAutosizeMinRows=\"6\"\n    ></textarea>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"runtime\" trans>Runtime</label>\n      <input type=\"number\" formControlName=\"runtime\" id=\"runtime\" min=\"1\" max=\"500\" />\n    </div>\n\n    <div class=\"input-container certification-input-container\">\n      <label for=\"certification\" trans>Certification</label>\n      <select formControlName=\"certification\" id=\"certification\">\n        <option [ngValue]=\"certification\" *ngFor=\"let certification of certificationOptions\">\n          {{ certification }}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"budget\" trans>Budget</label>\n      <input type=\"number\" formControlName=\"budget\" id=\"budget\" min=\"1\" />\n    </div>\n\n    <div class=\"input-container\">\n      <label for=\"revenue\" trans>Revenue</label>\n      <input type=\"number\" formControlName=\"revenue\" id=\"revenue\" min=\"1\" />\n    </div>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"popularity\" trans>Popularity</label>\n      <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" />\n    </div>\n\n    <div class=\"input-container\">\n      <label for=\"language\" trans>Language</label>\n      <select formControlName=\"language\" id=\"language\" required>\n        <option [value]=\"language.code\" *ngFor=\"let language of languageOptions$ | async\">\n          {{ language.name }}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n    Save\n  </button>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Title} from '../../../../../../models/title';\nimport {LoadSelectOptions, ToggleLoading} from '../../state/crupdate-title-actions';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\nimport {LanguageListItem} from '../../../../../../../common/core/services/value-lists.service';\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\nimport {filter, finalize, take} from 'rxjs/operators';\nimport {Settings} from '../../../../../../../common/core/config/settings.service';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {TitlesService} from '../../../../titles.service';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\n\n@Component({\n    selector: 'primary-facts-panel',\n    templateUrl: './primary-facts-panel.component.html',\n    styleUrls: ['./primary-facts-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PrimaryFactsPanelComponent implements OnInit {\n    @Select(CrupdateTitleState.title) title$: Observable<Title>;\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    @Select(CrupdateTitleState.languageOptions) languageOptions$: Observable<LanguageListItem[]>;\n    public certificationOptions: string[];\n    public poster$ = new BehaviorSubject<string>(null);\n\n    public form = this.fb.group({\n        name: ['', [Validators.required, Validators.minLength(1)]],\n        original_title: ['', [Validators.required, Validators.minLength(1)]],\n        is_series: [false, [Validators.required]],\n        language: [''],\n        tagline: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        backdrop: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        description: ['', [Validators.minLength(1)]],\n        budget: ['', Validators.min(1)],\n        revenue: ['', Validators.min(1)],\n        runtime: ['', [Validators.min(1), Validators.max(300)]],\n        country: ['', [Validators.minLength(1), Validators.maxLength(50)]],\n        popularity: [1, [Validators.min(1), Validators.max(100)]],\n        certification: ['pg'],\n        release_date: [''],\n        allow_update: [true],\n    });\n\n    constructor(\n        private store: Store,\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private uploadQueue: UploadQueueService,\n        private settings: Settings,\n        private router: Router,\n        private titles: TitlesService,\n        private toast: Toast,\n    ) {\n        this.certificationOptions = this.settings.getJson('browse.ageRatings');\n    }\n\n    ngOnInit() {\n        this.store.dispatch(new LoadSelectOptions());\n\n        this.store.select(CrupdateTitleState.title)\n            .pipe(filter(t => !!t.id), take(1))\n            .subscribe(title => {\n                this.form.patchValue({\n                    ...title,\n                    release_date: title.release_date ? title.release_date.split('T')[0] : null,\n                });\n                this.poster$.next(title.poster);\n            });\n\n        this.form.get('poster').valueChanges.subscribe(value => {\n            this.poster$.next(value);\n        });\n    }\n\n    public uploadImage(type: 'poster'|'backdrop') {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                uri: 'uploads/images',\n                httpParams: {\n                    diskPrefix: `media-images/${type}s`\n                },\n            };\n            this.uploadQueue.start(upload, params).subscribe(fileEntry => {\n                this.form.patchValue({\n                    [type]: fileEntry.fileEntry.url\n                });\n            });\n        });\n    }\n\n    public submit() {\n        this.store.dispatch(new ToggleLoading(true));\n        const titleId = this.store.selectSnapshot(CrupdateTitleState.title).id;\n        const request = titleId ?\n            this.titles.update(titleId, this.form.value) :\n            this.titles.create(this.form.value);\n        request\n            .pipe(finalize(() => this.store.dispatch(new ToggleLoading(false))))\n            .subscribe(response => {\n            this.toast.open(titleId ? MESSAGES.TITLE_UPDATE_SUCCESS : MESSAGES.TITLE_CREATE_SUCCESS);\n            if (titleId) {\n                this.router.navigate([this.router.url.includes('admin') ? '/admin/titles' : this.router.url.split('?')[0].replace('/edit', '')]);\n            } else {\n                this.router.navigate([this.router.url.replace('new', '' + response.title.id), 'edit']);\n            }\n        });\n    }\n}\n","<div class=\"modal-header\">\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.credit\" trans>Edit</h2>\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.credit\" trans>Create</h2>\n  <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\n    <mat-icon svgIcon=\"close\"></mat-icon>\n  </button>\n</div>\n\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\n  <mat-dialog-content class=\"many-inputs\">\n    <div class=\"input-container\" *ngIf=\"data.credit\">\n      <label for=\"name\" trans>Person</label>\n      <input type=\"text\" id=\"name\" [value]=\"credit?.name\" disabled />\n    </div>\n\n    <search-input\n      *ngIf=\"!data.credit\"\n      placeholder=\"Search for a person...\"\n      label=\"Person\"\n      [type]=\"personModelType\"\n      [resetInputOnSelect]=\"false\"\n      searchProvider=\"local\"\n      (resultSelected)=\"setCredit($event)\"\n    ></search-input>\n\n    <div class=\"input-container\" *ngIf=\"data.type === 'cast'\">\n      <label for=\"character\" trans>Character</label>\n      <input type=\"text\" id=\"character\" formControlName=\"character\" required />\n    </div>\n\n    <ng-container *ngIf=\"data.type === 'crew'\">\n      <div class=\"input-container\">\n        <label for=\"job\" trans>Job</label>\n        <input type=\"text\" id=\"job\" formControlName=\"job\" [matAutocomplete]=\"auto\" required />\n      </div>\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"jobSelected($event)\">\n        <mat-option\n          *ngFor=\"let value of filteredJobs | async\"\n          [value]=\"value.job\"\n          class=\"multiline-mat-menu-item\"\n        >\n          <div class=\"title\"><span trans>Job</span>: {{ value.job }}</div>\n          <div class=\"description\"><span trans>Department</span>: {{ value.department }}</div>\n        </mat-option>\n      </mat-autocomplete>\n\n      <div class=\"input-container\">\n        <label for=\"department\" trans>Department</label>\n        <input type=\"text\" id=\"department\" formControlName=\"department\" required />\n      </div>\n    </ng-container>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n      Save\n    </button>\n  </mat-dialog-actions>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Inject,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {TitleCredit} from '../../../../../../models/title';\nimport {Observable} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport {Actions, Select, Store} from '@ngxs/store';\nimport {AddCredit, UpdateCredit} from '../../state/crupdate-title-actions';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {Creditable} from '../../../../../people/creditable';\nimport {MEDIA_TYPE} from '../../../../../media-type';\nimport {ValueLists} from '../../../../../../../common/core/services/value-lists.service';\nimport {filter, map, startWith} from 'rxjs/operators';\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\nimport {BackendErrorResponse} from '../../../../../../../common/core/types/backend-error-response';\n\ninterface CrupdateCreditModalData {\n    credit?: TitleCredit;\n    type: 'cast'|'crew';\n    mediaItem: Creditable;\n}\n\ninterface JobList {\n    department: string;\n    jobs: string[];\n}\n\n@Component({\n    selector: 'crupdate-credit-modal',\n    templateUrl: './crupdate-credit-modal.component.html',\n    styleUrls: ['./crupdate-credit-modal.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCreditModalComponent implements OnInit {\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    credit: TitleCredit;\n    personModelType = MEDIA_TYPE.PERSON;\n\n    public form = this.fb.group({\n        character: [''],\n        department: [''],\n        job: [''],\n    });\n\n    public availableJobs: {job: string, department: string}[] = [];\n    public filteredJobs: Observable<{job: string, department: string}[]>;\n\n    constructor(\n        private store: Store,\n        private toast: Toast,\n        private fb: FormBuilder,\n        private actions$: Actions,\n        private dialogRef: MatDialogRef<CrupdateCreditModalComponent>,\n        private valueLists: ValueLists,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCreditModalData,\n    ) {\n        if (this.data.credit) {\n            this.credit = this.data.credit;\n            this.form.patchValue(this.data.credit.pivot);\n        }\n    }\n\n    ngOnInit() {\n        this.valueLists.get(['tmdbJobs']).subscribe(response => {\n            this.availableJobs = [];\n            (response.tmdbJobs as JobList[]).forEach(jobGroup => {\n                const jobs = jobGroup.jobs.map(jobName => {\n                    return {job: jobName, department: jobGroup.department};\n                });\n                this.availableJobs = [...this.availableJobs, ...jobs];\n            });\n\n            this.filteredJobs = this.form.get('job').valueChanges\n                .pipe(\n                    startWith(''),\n                    map(q => this.availableJobs.filter(v => {\n                        q = q.toLowerCase();\n                        return !q || v.job.toLowerCase().includes(q) || v.department.toLowerCase().includes(q);\n                    }).slice(0, 10))\n                );\n        });\n    }\n\n    public confirm() {\n        const action = this.data.credit\n            ? new UpdateCredit(this.credit.pivot.id, this.getPayload())\n            : new AddCredit(this.credit?.id, this.data.mediaItem, this.getPayload());\n        this.store.dispatch(action).subscribe(() => {\n            this.close();\n            this.toast.open(this.data.credit ? MESSAGES.CREDIT_UPDATE_SUCCESS : MESSAGES.CREDIT_ADD_SUCCESS);\n        }, (errResponse: BackendErrorResponse) => {\n            this.toast.open(errResponse.message);\n        });\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public setCredit(credit: TitleCredit) {\n        this.credit = credit;\n    }\n\n    private getPayload() {\n        const payload = this.form.value;\n        if (this.data.type === 'cast') {\n            payload.department = 'cast';\n            payload.job = 'cast';\n        }\n        return payload;\n    }\n\n    public jobSelected(e: MatAutocompleteSelectedEvent) {\n        const value = this.availableJobs.find(v => v.job === e.option.value);\n        this.form.patchValue({job: value.job, department: value.department});\n    }\n}\n","<datatable-header>\n    <button type=\"button\" mat-raised-button color=\"accent\" leftContent (click)=\"openCrupdateCreditModal()\" trans>Add Credit</button>\n</datatable-header>\n\n<table class=\"material-table\" cdkDropList (cdkDropListDropped)=\"changeCreditsOrder($event)\" [cdkDropListDisabled]=\"type === 'crew'\">\n    <thead>\n    <tr>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header=\"pivot.character\" *ngIf=\"type === 'cast'\" trans>Character</th>\n        <th table-sort-header=\"pivot.department\" *ngIf=\"type === 'crew'\" trans>Department</th>\n        <th table-sort-header=\"pivot.job\" *ngIf=\"type === 'crew'\" trans>Job</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let person of datatable.data$ | async\" cdkDrag>\n        <td>\n           <div class=\"column-with-image\">\n               <button type=\"button\" mat-icon-button cdkDragHandle *ngIf=\"type === 'cast'\">\n                   <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n               </button>\n               <media-image [src]=\"person.poster\" size=\"small\"></media-image>\n               <span>{{person.name}}</span>\n           </div>\n            <div *cdkDragPreview>{{person.name}}</div>\n        </td>\n        <td *ngIf=\"type === 'cast'\">{{person.pivot.character}}</td>\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.department}}</td>\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.job}}</td>\n        <td class=\"edit-column\">\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateCreditModal(person)\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" mat-icon-button (click)=\"detachCredit(person)\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\n    <span primary-text trans>Nothing to Display.</span>\n</no-results-message>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges, OnDestroy,\n    OnInit,\n    SimpleChange\n} from '@angular/core';\nimport {Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {TitleCredit} from '../../../../../../models/title';\nimport {CrupdateCreditModalComponent} from '../crupdate-credit-modal/crupdate-credit-modal.component';\nimport {ChangeCreditOrder, RemoveCredit} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {Person} from '../../../../../../models/person';\nimport {Creditable} from '../../../../../people/creditable';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\n\n@Component({\n    selector: 'credits-panel',\n    templateUrl: './credits-panel.component.html',\n    styleUrls: ['./credits-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService]\n})\nexport class CreditsPanelComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() mediaItem: Creditable;\n    @Input() type: 'cast'|'crew';\n\n    constructor(\n        private dialog: Modal,\n        private store: Store,\n        private toast: Toast,\n        public datatable: DatatableService<TitleCredit>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n    }\n\n    ngOnChanges(changes: {mediaItem?: SimpleChange}) {\n        if (changes.mediaItem && changes.mediaItem.currentValue) {\n            this.datatable.data = this.type === 'cast' ?\n                this.getCast(this.mediaItem.credits) :\n                this.getCrew(this.mediaItem.credits);\n        }\n    }\n\n    ngOnDestroy() {\n        this.datatable.destroy();\n    }\n\n    public openCrupdateCreditModal(credit?: TitleCredit) {\n        this.dialog.open(\n            CrupdateCreditModalComponent,\n            {credit, type: this.type, mediaItem: this.mediaItem}\n        );\n    }\n\n    public detachCredit(credit: TitleCredit) {\n        this.dialog.open(ConfirmModalComponent, {\n            title: 'Remove Credit',\n            body:  'Are you sure you want to remove this credit?',\n            ok:    'Remove'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.store.dispatch(new RemoveCredit(this.mediaItem, credit)).subscribe(() => {\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\n            });\n        });\n    }\n\n    public changeCreditsOrder(e: CdkDragDrop<Person>) {\n        if (this.store.selectSnapshot(CrupdateTitleState.loading)) return;\n        this.store.dispatch(new ChangeCreditOrder(this.mediaItem, e.previousIndex, e.currentIndex, this.type));\n    }\n\n    public getCast(credits: TitleCredit[]) {\n        if ( ! credits) return [];\n        return credits.filter(credit => credit.pivot.department === 'cast');\n    }\n\n    public getCrew(credits: TitleCredit[]) {\n        if ( ! credits) return [];\n        return credits.filter(credit => credit.pivot.department !== 'cast');\n    }\n}\n","<div class=\"modal-header\">\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.episode\" trans>Edit Episode</h2>\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.episode\" trans>Create Episode</h2>\n  <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\n    <mat-icon svgIcon=\"close\"></mat-icon>\n  </button>\n</div>\n\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"episodeForm\" ngNativeValidate>\n  <mat-dialog-content>\n    <mat-tab-group [dynamicHeight]=\"true\" animationDuration=\"0ms\" color=\"accent\">\n      <mat-tab [label]=\"'Primary Facts' | trans\">\n        <div class=\"many-inputs primary-facts-panel\">\n          <div class=\"input-container\">\n            <label for=\"name\" trans>Title</label>\n            <input\n              type=\"text\"\n              formControlName=\"name\"\n              id=\"name\"\n              minlength=\"1\"\n              maxlength=\"250\"\n              required\n            />\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"episode_number\" trans>Number</label>\n            <input\n              type=\"number\"\n              formControlName=\"episode_number\"\n              id=\"episode_number\"\n              min=\"1\"\n              required\n            />\n            <div class=\"error\" *ngIf=\"(errors$ | async).episode_number as epNumError\">\n              {{ epNumError }}\n            </div>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"poster\" trans>Poster</label>\n            <div class=\"input-with-action action-left\">\n              <button\n                type=\"button\"\n                mat-flat-button\n                color=\"accent\"\n                (click)=\"uploadPoster()\"\n                [matTooltip]=\"'Upload poster' | trans\"\n              >\n                <mat-icon svgIcon=\"file-upload\"></mat-icon>\n              </button>\n              <input\n                type=\"text\"\n                formControlName=\"poster\"\n                id=\"poster\"\n                minlength=\"1\"\n                maxlength=\"250\"\n              />\n            </div>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"release_date\" trans>Release Date</label>\n            <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" required />\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"description\" trans>Overview</label>\n            <textarea\n              type=\"text\"\n              formControlName=\"description\"\n              id=\"description\"\n              minlength=\"1\"\n              cdkTextareaAutosize\n              cdkAutosizeMinRows=\"6\"\n            ></textarea>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"popularity\" trans>Popularity</label>\n            <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" />\n          </div>\n        </div>\n      </mat-tab>\n      <mat-tab [label]=\"'Cast' | trans\" [disabled]=\"!data.episode\">\n        <credits-panel [mediaItem]=\"episode$ | async\" type=\"cast\"></credits-panel>\n      </mat-tab>\n      <mat-tab [label]=\"'Crew' | trans\" [disabled]=\"!data.episode\">\n        <credits-panel [mediaItem]=\"episode$ | async\" type=\"crew\"></credits-panel>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n      Save\n    </button>\n  </mat-dialog-actions>\n</form>\n","import {Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {Episode} from '../../../../../../../models/episode';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../../state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {CreateEpisode, LoadEpisodeCredits, UpdateEpisode} from '../../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../../toast-messages';\nimport {Season} from '../../../../../../../models/season';\nimport {UploadQueueService} from '../../../../../../../../common/uploads/upload-queue/upload-queue.service';\nimport {Toast} from '../../../../../../../../common/core/ui/toast.service';\nimport {openUploadWindow} from '../../../../../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../../../../../common/uploads/upload-input-config';\nimport {BackendErrorResponse} from '../../../../../../../../common/core/types/backend-error-response';\n\ninterface CrupdateEpisodeModalData {\n    episode?: Episode;\n    season?: Season;\n}\n\n@Component({\n    selector: 'crupdate-episode-modal',\n    templateUrl: './crupdate-episode-modal.component.html',\n    styleUrls: ['./crupdate-episode-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateEpisodeModalComponent implements OnInit {\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    public episode$: BehaviorSubject<Episode> = new BehaviorSubject(null);\n    public errors$: BehaviorSubject<{episode_number?: string}> = new BehaviorSubject({});\n\n    public episodeForm = this.fb.group({\n        name: ['', [Validators.required, Validators.minLength(1)]],\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        description: ['', [Validators.minLength(1)]],\n        popularity: [50, [Validators.min(1), Validators.max(1000)]],\n        release_date: [''],\n        episode_number: [''],\n    });\n\n    constructor(\n        private store: Store,\n        private toast: Toast,\n        private fb: FormBuilder,\n        private uploadQueue: UploadQueueService,\n        private dialogRef: MatDialogRef<CrupdateEpisodeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateEpisodeModalData,\n    ) {}\n\n    ngOnInit() {\n        if (this.data.episode) {\n            this.bindToStoreEpisode();\n            this.episodeForm.patchValue({\n                ...this.episode$.value,\n                release_date: this.episode$.value.release_date.split('T')[0]\n            });\n            setTimeout(() => this.loadEpisodeCredits());\n        } else {\n            const epNum = this.data.season ? this.data.season.episode_count + 1 : 1;\n            this.episodeForm.patchValue({episode_number: epNum});\n        }\n    }\n\n    public confirm() {\n        if (this.data.episode) {\n            this.updateEpisode();\n        } else {\n            this.createEpisode();\n        }\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    private createEpisode() {\n        this.store.dispatch(new CreateEpisode(this.data.season, this.episodeForm.value))\n            .subscribe(() => {\n                this.errors$.next({});\n                this.toast.open(MESSAGES.EPISODE_CREATE_SUCCESS);\n                const episodes = this.store.selectSnapshot(CrupdateTitleState.seasons)\n                    .find(s => s.id === this.data.season.id).episodes;\n                this.data.episode = episodes[episodes.length - 1];\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    private updateEpisode() {\n        this.store.dispatch(new UpdateEpisode(this.data.episode, this.episodeForm.value))\n            .subscribe(() => {\n                this.errors$.next({});\n                this.toast.open(MESSAGES.EPISODE_UPDATE_SUCCESS);\n                this.close();\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    public uploadPoster() {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                uri: 'uploads/images',\n                httpParams: {\n                    diskPrefix: 'media-images/posters'\n                },\n            };\n            this.uploadQueue.start(upload, params).subscribe(response => {\n                this.episodeForm.patchValue({\n                    poster: response.fileEntry.url\n                });\n            });\n        });\n    }\n\n    private bindToStoreEpisode() {\n        this.store.select(CrupdateTitleState.title)\n            .subscribe(title => {\n               if (title.seasons) {\n                   const episode = title.seasons.find(s => s.number === this.data.episode.season_number)\n                       .episodes.find(e => e.episode_number === this.data.episode.episode_number);\n                   this.episode$.next({...episode});\n               }\n            });\n    }\n\n    private loadEpisodeCredits() {\n        if ( ! this.data.episode.credits) {\n            this.store.dispatch(new LoadEpisodeCredits(this.episode$.value)).toPromise();\n        }\n    }\n}\n","<datatable-header pluralResourceName=\"episodes\">\n    <ng-container leftContent>\n        <button mat-raised-button color=\"accent\" (click)=\"openCrupdateEpisodeModal()\" trans>Add Episode</button>\n    </ng-container>\n</datatable-header>\n<table class=\"material-table\">\n    <thead>\n    <tr>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header trans>Number</th>\n        <th table-sort-header trans>Release Date</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let episode of datatable.data$ | async; trackBy: trackByFn\">\n        <td>\n            <div class=\"column-with-image\">\n                <media-image [src]=\"episode.poster\" [alt]=\"episode.name\" size=\"small\"></media-image>\n                <span>{{episode.name}}</span>\n            </div>\n        </td>\n        <td>{{episode.episode_number}}</td>\n        <td>{{episode.release_date | formattedDate}}</td>\n        <td class=\"edit-column\">\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateEpisodeModal(episode)\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" mat-icon-button (click)=\"deleteEpisode(episode)\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\">\n    <span primary-text trans>Nothing to Display.</span>\n    <span secondary-text trans>This season does not have any episodes yet.</span>\n</no-results-message>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges, OnDestroy,\n    OnInit,\n    SimpleChange,\n    ViewEncapsulation\n} from '@angular/core';\nimport {Episode} from '../../../../../../models/episode';\nimport {DeleteEpisode} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {CrupdateEpisodeModalComponent} from '../seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {Store} from '@ngxs/store';\nimport {Season} from '../../../../../../models/season';\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\nimport {ActivatedRoute} from '@angular/router';\nimport {DatatableService} from '../../../../../../../common/datatable/datatable.service';\n\n@Component({\n    selector: 'episodes-panel',\n    templateUrl: './episodes-panel.component.html',\n    styleUrls: ['./episodes-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService]\n})\nexport class EpisodesPanelComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    @Input() season: Season;\n    public trackByFn = (i: number, episode: Episode) => episode.id;\n\n    constructor(\n        private store: Store,\n        private dialog: Modal,\n        private toast: Toast,\n        private route: ActivatedRoute,\n        public datatable: DatatableService<Episode>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n    }\n\n    ngAfterViewInit() {\n        const episodeNum = +this.route.snapshot.params.episodeNumber;\n        if (episodeNum) {\n            const episode = this.season.episodes.find(e => e.episode_number === episodeNum);\n            if (episode) {\n                this.openCrupdateEpisodeModal(episode);\n            }\n        }\n    }\n\n    ngOnChanges(changes: {season?: SimpleChange}) {\n        if (changes.season.currentValue && changes.season.currentValue.episodes) {\n            this.datatable.data = this.season.episodes;\n        }\n    }\n\n    ngOnDestroy() {\n        this.datatable.destroy();\n    }\n\n    public deleteEpisode(episode: Episode) {\n        this.dialog.open(ConfirmModalComponent, {\n            title: 'Delete Episode',\n            body:  'Are you sure you want to delete this episode?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.store.dispatch(new DeleteEpisode(episode)).subscribe(() => {\n                this.toast.open(MESSAGES.EPISODE_DELETE_SUCCESS);\n            });\n        });\n    }\n\n    public openCrupdateEpisodeModal(episode?: Episode) {\n        this.dialog.open(\n            CrupdateEpisodeModalComponent,\n            {episode, season: this.season},\n            {panelClass: 'crupdate-episode-modal-container'}\n        );\n    }\n}\n","<ng-container *ngIf=\"seasons$ | async as seasons\">\n    <div class=\"header\">\n        <button type=\"button\" mat-raised-button color=\"accent\" (click)=\"addSeason()\" [disabled]=\"loading$ | async\">Add Season</button>\n    </div>\n\n    <mat-accordion>\n        <mat-expansion-panel [expanded]=\"(activeSeason$ | async) === season.number\" class=\"mat-elevation-z0\" [ngClass]=\"'season-' + season.number + '-panel'\" *ngFor=\"let season of seasons; trackBy: trackByFn\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    <span trans>Season</span>\n                    &nbsp;\n                    <span>{{season.number}}</span>\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <ng-template matExpansionPanelContent>\n                <mat-tab-group animationDuration=\"0ms\" color=\"accent\">\n                    <mat-tab [label]=\"'Episodes' | trans\">\n                        <episodes-panel [season]=\"season\"></episodes-panel>\n                    </mat-tab>\n                    <mat-tab [label]=\"'Regular Cast' | trans\">\n                        <credits-panel type=\"cast\" [mediaItem]=\"season\"></credits-panel>\n                    </mat-tab>\n                    <mat-tab [label]=\"'Regular Crew' | trans\">\n                        <credits-panel type=\"crew\" [mediaItem]=\"season\"></credits-panel>\n                    </mat-tab>\n                </mat-tab-group>\n            </ng-template>\n\n            <mat-action-row>\n                <button type=\"button\" mat-button (click)=\"maybeDeleteSeason(season)\" trans>Delete</button>\n            </mat-action-row>\n        </mat-expansion-panel>\n    </mat-accordion>\n\n    <no-results-message *ngIf=\"!seasons.length\">\n        <span primary-text trans>Nothing to Display.</span>\n        <span secondary-text trans>This series does not have any seasons yet.</span>\n    </no-results-message>\n</ng-container>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Season} from '../../../../../../models/season';\nimport {CreateSeason, DeleteSeason} from '../../state/crupdate-title-actions';\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'seasons-panel',\n    templateUrl: './seasons-panel.component.html',\n    styleUrls: ['./seasons-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeasonsPanelComponent implements OnInit, AfterViewInit {\n    @Select(CrupdateTitleState.seasons) seasons$: Observable<Season[]>;\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    public activeSeason$ = new BehaviorSubject<number>(1);\n\n    constructor(\n        private store: Store,\n        private modal: Modal,\n        private toast: Toast,\n        private route: ActivatedRoute,\n        private el: ElementRef<HTMLElement>,\n    ) {}\n\n    ngOnInit() {\n        this.activeSeason$.next(+this.route.snapshot.params.seasonNumber || 1);\n    }\n\n    ngAfterViewInit() {\n       setTimeout(() => {\n           if (this.activeSeason$.value > 1) {\n               this.el.nativeElement.querySelector(`.season-${this.activeSeason$.value}-panel`)\n                   ?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n           }\n       });\n    }\n\n    public addSeason() {\n        this.store.dispatch(new CreateSeason()).subscribe(() => {\n            this.toast.open(MESSAGES.SEASON_CREATE_SUCCESS);\n        });\n    }\n\n    public maybeDeleteSeason(season: Season) {\n        this.modal.open(ConfirmModalComponent, {\n            title: 'Delete Season',\n            body:  'Are you sure you want to delete this season?',\n            bodyBold: 'This will also delete all episodes attached to this season.',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.store.dispatch(new DeleteSeason(season)).subscribe(() => {\n                this.toast.open(MESSAGES.SEASON_DELETE_SUCCESS);\n            });\n        });\n    }\n\n    trackByFn(index: number, season: Season) {\n        return season.id;\n    }\n}\n","<button mat-raised-button color=\"accent\" (click)=\"uploadImage()\">\n    <mat-icon svgIcon=\"add\"></mat-icon>\n    <span trans>Upload Image</span>\n</button>\n\n<div cdkDropListGroup>\n    <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\"></div>\n    <div class=\"images-grid\">\n        <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\" *ngFor=\"let image of images$ | async\">\n            <media-image class=\"images-panel-media-image\" cdkDrag (cdkDragMoved)=\"dragMoved($event);\" [src]=\"image.url\" size=\"medium\" mode=\"landscape\">\n                <button mat-mini-fab color=\"warn\" (click)=\"deleteImage(image)\">\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\n                </button>\n            </media-image>\n        </div>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {Observable} from 'rxjs';\nimport {Image} from '../../../../../../models/image';\nimport {ImagesService} from '../../../../../shared/images.service';\nimport {AddImage, ChangeImageOrder, DeleteImage} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\nimport {CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup} from '@angular/cdk/drag-drop';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\nimport {ViewportRuler} from '@angular/cdk/overlay';\n\n@Component({\n    selector: 'images-panel',\n    templateUrl: './images-panel.component.html',\n    styleUrls: ['./images-panel.component.scss'],\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImagesPanelComponent {\n    @Select(CrupdateTitleState.images) images$: Observable<Image[]>;\n\n    @ViewChild(CdkDropListGroup) listGroup: CdkDropListGroup<CdkDropList>;\n    @ViewChild(CdkDropList) placeholder: CdkDropList;\n\n    public target: CdkDropList;\n    public targetIndex: number;\n    public source: CdkDropList;\n    public sourceIndex: number;\n    public activeContainer;\n\n    constructor(\n        private images: ImagesService,\n        private store: Store,\n        private toast: Toast,\n        private viewportRuler: ViewportRuler,\n    ) {}\n\n    public uploadImage() {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                modelId: this.store.selectSnapshot(CrupdateTitleState.title).id\n            };\n            this.images.create(upload[0], params)\n                .subscribe(response => {\n                    this.store.dispatch(new AddImage(response.image)).subscribe(() => {\n                        this.toast.open(MESSAGES.IMAGE_CREATE_SUCCESS);\n                    });\n                });\n        });\n    }\n\n    public deleteImage(image: Image) {\n        this.store.dispatch(new DeleteImage(image)).subscribe(() => {\n            this.toast.open(MESSAGES.IMAGE_DELETE_SUCCESS);\n        });\n    }\n\n    /* GRID DRAG AND DROP */\n\n    dragMoved(e: CdkDragMove) {\n        const point = this.getPointerPositionOnPage(e.event);\n        this.listGroup._items.forEach(dropList => {\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\n                this.activeContainer = dropList;\n                return;\n            }\n        });\n    }\n\n    dropListDropped() {\n        if ( ! this.target) return;\n\n        const phElement = this.placeholder.element.nativeElement;\n        const parent = phElement.parentElement;\n\n        phElement.style.display = 'none';\n\n        parent.removeChild(phElement);\n        parent.appendChild(phElement);\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\n\n        this.target = null;\n        this.source = null;\n\n        if (this.sourceIndex !== this.targetIndex) {\n            this.store.dispatch(new ChangeImageOrder(this.sourceIndex, this.targetIndex));\n        }\n    }\n\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\n        if (drop === this.placeholder) return true;\n\n\n        if (drop !== this.activeContainer) return false;\n\n        const phElement = this.placeholder.element.nativeElement;\n        const sourceElement = drag.dropContainer.element.nativeElement;\n        const dropElement = drop.element.nativeElement;\n\n        const dragIndex = __indexOf(dropElement.parentElement.children, (this.source ? phElement : sourceElement));\n        const dropIndex = __indexOf(dropElement.parentElement.children, dropElement);\n\n        if ( ! this.source) {\n            this.sourceIndex = dragIndex;\n            this.source = drag.dropContainer;\n\n            phElement.style.width = sourceElement.clientWidth + 'px';\n            phElement.style.height = sourceElement.clientHeight + 'px';\n\n            sourceElement.parentElement.removeChild(sourceElement);\n        }\n\n        this.targetIndex = dropIndex;\n        this.target = drop;\n\n        phElement.style.display = '';\n        dropElement.parentElement.insertBefore(phElement, (dropIndex > dragIndex\n            ? dropElement.nextSibling : dropElement));\n\n        this.placeholder._dropListRef.enter(drag._dragRef, drag.element.nativeElement.offsetLeft, drag.element.nativeElement.offsetTop);\n        return false;\n    }\n\n    /** Determines the point of the page that was touched by the user. */\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        const point = __isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\n\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top\n        };\n    }\n}\n\nfunction __indexOf(collection, node) {\n    return Array.prototype.indexOf.call(collection, node);\n}\n\n/** Determines whether an event is a touch event. */\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n}\n\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\n    const {top, bottom, left, right} = dropList.element.nativeElement.getBoundingClientRect();\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n","<form\n  class=\"input-container\"\n  *ngIf=\"!readonly\"\n  ngNativeValidate\n  (ngSubmit)=\"selectTagsFromString(formControl.value)\"\n>\n  <div class=\"input-with-action\">\n    <input\n      type=\"text\"\n      class=\"tags-string-input\"\n      [matAutocomplete]=\"auto\"\n      [formControl]=\"formControl\"\n      required\n    />\n    <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\n  </div>\n</form>\n\n<p class=\"main-info\" *ngIf=\"!readonly\" [transValues]=\"{tagName: pluralName}\" trans>\n  Separate :tagName with comma.\n</p>\n\n<div class=\"selected-tags\">\n  <mat-chip-list [selectable]=\"false\">\n    <mat-chip\n      (removed)=\"deselectTag(tag)\"\n      [removable]=\"!readonly\"\n      *ngFor=\"let tag of selectedTags$ | async\"\n    >\n      <span>{{ tag }}</span>\n      <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n    </mat-chip>\n  </mat-chip-list>\n</div>\n\n<div class=\"existing-tags\" *ngIf=\"!readonly\">\n  <p [transValues]=\"{tagName: pluralName}\" trans>Choose from existing :tagName:</p>\n  <div class=\"existing-tags-list\">\n    <div\n      class=\"existing-tag-name\"\n      *ngFor=\"let tag of existingTags$ | async\"\n      (click)=\"selectTags([tag.name])\"\n    >\n      {{ tag.display_name }}\n    </div>\n  </div>\n</div>\n\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selectTags([$event.option.value])\">\n  <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{\n    tag.display_name\n  }}</mat-option>\n</mat-autocomplete>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Tag} from '@common/core/types/models/Tag';\nimport {TagsService} from '@common/core/services/tags.service';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    switchMap,\n} from 'rxjs/operators';\n\n@Component({\n    selector: 'tags-manager',\n    templateUrl: './tags-manager.component.html',\n    styleUrls: ['./tags-manager.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TagsManagerComponent,\n            multi: true,\n        },\n    ],\n})\nexport class TagsManagerComponent implements OnInit, ControlValueAccessor {\n    @Input() public readonly = false;\n    @Input() public tagType: string;\n    @Input() public pluralName = 'tags';\n\n    formControl = new FormControl();\n    selectedTags$ = new BehaviorSubject<string[]>([]);\n    existingTags$ = new BehaviorSubject<Tag[]>([]);\n    suggestedTags$ = new BehaviorSubject<Tag[]>([]);\n\n    private propagateChange: (tags: string[]) => void;\n\n    constructor(private tagService: TagsService) {}\n\n    ngOnInit() {\n        this.tagService.index({perPage: 15, type: this.tagType}).subscribe(response => {\n            this.existingTags$.next(\n                response.pagination.data.filter(tag => tag.type !== 'status')\n            );\n        });\n\n        this.formControl.valueChanges\n            .pipe(\n                debounceTime(250),\n                distinctUntilChanged(),\n                switchMap(query => this.searchTags(query)),\n                catchError(() => of([]))\n            )\n            .subscribe(tags => {\n                this.suggestedTags$.next(tags);\n            });\n    }\n\n    writeValue(value: string[]) {\n        this.selectTags(value, {skipPropagate: true, override: true});\n    }\n\n    registerOnChange(fn: (tags: string[]) => void) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() {}\n\n    selectTags(\n        tags?: string[],\n        options: {skipPropagate?: boolean; override?: boolean} = {}\n    ) {\n        const newTags = (tags || [])\n            .map(t => t.trim())\n            .filter(t => !this.selectedTags$.value.includes(t));\n        if (options.override) {\n            this.selectedTags$.next(newTags);\n        } else if (newTags.length) {\n            this.selectedTags$.next([...this.selectedTags$.value, ...newTags]);\n        }\n        this.formControl.reset();\n        if (!options.skipPropagate) {\n            this.propagateChange(this.selectedTags$.value);\n        }\n    }\n\n    deselectTag(tagName: string) {\n        const selectedTags = this.selectedTags$.value.slice();\n        selectedTags.splice(selectedTags.indexOf(tagName), 1);\n        this.selectedTags$.next(selectedTags);\n        this.propagateChange(this.selectedTags$.value);\n    }\n\n    selectTagsFromString(tagString: string) {\n        const tags = tagString.split(',').map(t => slugifyString(t));\n        this.selectTags(tags);\n    }\n\n    private searchTags(query: string): Observable<Tag[]> {\n        if (!query) {\n            return of([]);\n        }\n        return this.tagService.index({query}).pipe(\n            map(response => {\n                return response.pagination.data;\n            })\n        );\n    }\n}\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\ninterface SelectTagsModalComponentData {\n    tagType?: string;\n    pluralName?: string;\n}\n\n@Component({\n    selector: 'tag-manager-modal',\n    templateUrl: './select-tags-modal.component.html',\n    styleUrls: ['./select-tags-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectTagsModalComponent {\n    public selectedTagsControl = new FormControl();\n    public pluralName: string;\n\n    constructor(\n        private dialogRef: MatDialogRef<SelectTagsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: SelectTagsModalComponentData,\n    ) {\n        this.pluralName = this.data.pluralName || 'tags';\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public confirm() {\n        this.dialogRef.close(this.selectedTagsControl.value);\n    }\n\n    public noTagsSelected(): boolean {\n        return !this.selectedTagsControl.value?.length;\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title [transValues]=\"{tagName: pluralName}\" trans>Select :tagName</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n   <tags-manager [tagType]=\"data.tagType\" [pluralName]=\"pluralName\" [formControl]=\"selectedTagsControl\"></tags-manager>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\n    <button type=\"button\" class=\"submit-button\" [disabled]=\"noTagsSelected()\" (click)=\"confirm()\" mat-raised-button color=\"accent\" [transValues]=\"{tagName: pluralName}\" trans>Merge :tagName</button>\n</mat-dialog-actions>\n","<datatable-header>\n    <button mat-raised-button color=\"accent\" leftContent (click)=\"openTagManagerModal()\">\n        {{ 'Add' | trans }} {{ (displayType || (type + 's') ) | trans }}\n    </button>\n</datatable-header>\n\n<table class=\"material-table\">\n    <thead>\n    <tr>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header trans>Display Name</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let tag of datatable.data$ | async\">\n        <td>{{tag.name}}</td>\n        <td>{{tag.display_name || '-'}}</td>\n        <td class=\"edit-column\">\n            <button mat-icon-button (click)=\"detachTag(tag)\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"folder.svg\">\n    <span primary-text trans>Nothing to display</span>\n</no-results-message>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {AttachTags, DetachTag} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {Tag} from '@common/core/types/models/Tag';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SelectTagsModalComponent} from '@common/tags/tags-manager/select-tags-modal/select-tags-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\n\n@Component({\n    selector: 'tags-panel',\n    templateUrl: './tags-panel.component.html',\n    styleUrls: ['./tags-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService]\n})\nexport class TagsPanelComponent implements OnInit, OnDestroy {\n    @Input() type: 'keyword' | 'genre' | 'production_country';\n    @Input() displayType: string;\n\n    constructor(\n        private store: Store,\n        private modal: Modal,\n        private toast: Toast,\n        public datatable: DatatableService<Tag>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n        const tags$ = this.getTagObservable();\n        tags$.subscribe(tags => {\n            this.datatable.data = tags || [];\n        });\n    }\n\n    ngOnDestroy() {\n        this.datatable.destroy();\n    }\n\n    public openTagManagerModal() {\n        this.modal.open(\n            SelectTagsModalComponent,\n            {tagType: this.type, pluralName: this.type === 'production_country' ? 'countries' : `${this.type}s`},\n        ).beforeClosed().subscribe(tagNames => {\n           if (tagNames && tagNames.length) {\n               this.store.dispatch(new AttachTags(tagNames, this.type));\n           }\n        });\n    }\n\n    public detachTag(tag: Tag) {\n        this.store.dispatch(new DetachTag(tag))\n            .subscribe(() => {\n                this.toast.open(MESSAGES.TAG_DETACH_SUCCESS);\n            });\n    }\n\n    private getTagObservable() {\n        if (this.type === 'keyword') {\n            return this.store.select(CrupdateTitleState.keywords);\n        } else if (this.type === 'genre') {\n            return this.store.select(CrupdateTitleState.genres);\n        } else {\n            return this.store.select(CrupdateTitleState.countries);\n        }\n    }\n}\n","<ng-container *ngIf=\"activePanel$ | async as activePanel\">\n    <primary-facts-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'primaryFacts'\"></primary-facts-panel>\n    <seasons-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'seasons'\"></seasons-panel>\n    <images-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'images'\"></images-panel>\n    <video-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'videos'\" [title]=\"title\"></video-index>\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"cast\" *ngIf=\"activePanel === 'cast'\"></credits-panel>\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"crew\" *ngIf=\"activePanel === 'crew'\"></credits-panel>\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"keyword\" *ngIf=\"activePanel === 'keywords'\"></tags-panel>\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"genre\" *ngIf=\"activePanel === 'genres'\"></tags-panel>\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"production_country\" displayType=\"country\" *ngIf=\"activePanel === 'countries'\"></tags-panel>\n    <reviews-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'reviews'\" [title]=\"title\"></reviews-index>\n\n    <aside class=\"sidebar material-panel\">\n        <div class=\"header\" trans>Edit</div>\n        <div class=\"list\">\n            <button class=\"list-item no-style\" (click)=\"openPanel('primaryFacts')\" [class.active]=\"activePanel === 'primaryFacts'\" trans>Primary Facts</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('seasons')\" [class.active]=\"activePanel === 'seasons'\" trans>Seasons</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('images')\" [class.active]=\"activePanel === 'images'\" trans>Images</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('videos')\" [class.active]=\"activePanel === 'videos'\" trans>Videos</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('cast')\" [class.active]=\"activePanel === 'cast'\" trans>Cast</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('crew')\" [class.active]=\"activePanel === 'crew'\" trans>Crew</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('genres')\" [class.active]=\"activePanel === 'genres'\" trans>Genres</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('keywords')\" [class.active]=\"activePanel === 'keywords'\" trans>Keywords</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('countries')\" [class.active]=\"activePanel === 'countries'\" trans>Countries</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('reviews')\" [class.active]=\"activePanel === 'reviews'\" trans>Reviews</button>\n        </div>\n        <p *ngIf=\"!titleCreated()\" class=\"message\" trans>Save from \"Primary Facts\" panel in order to enable other menu items.</p>\n    </aside>\n\n    <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\n</ng-container>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Select, Store} from '@ngxs/store';\nimport {HydrateTitle, ResetState} from './state/crupdate-title-actions';\nimport {CrupdateTitleState} from './state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Title} from '../../../../models/title';\n\n@Component({\n    selector: 'crupdate-title',\n    templateUrl: './crupdate-title.component.html',\n    styleUrls: ['./crupdate-title.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTitleComponent implements OnInit, OnDestroy {\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    public title: Title;\n    public activePanel$ = new BehaviorSubject<string>('primaryFacts');\n\n    constructor(\n        private store: Store,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            this.store.dispatch(new HydrateTitle(data.api?.title));\n            this.title = data.api?.title;\n        });\n\n        this.route.queryParams.subscribe(params => {\n            this.activePanel$.next(params.active || 'primaryFacts');\n        });\n\n        if (this.route.snapshot.params.seasonNumber) {\n            this.activePanel$.next('seasons');\n        }\n    }\n\n    ngOnDestroy() {\n        this.store.dispatch(new ResetState());\n    }\n\n    public openPanel(name: string) {\n        this.router.navigate([], {queryParams: {active: name}});\n    }\n\n    public titleCreated(): boolean {\n        return !!this.store.selectSnapshot(CrupdateTitleState.title).id;\n    }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {CrupdateTitleResolverService} from './crupdate-title/crupdate-title-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrupdateTitleComponent,\n        resolve: {api: CrupdateTitleResolverService},\n        data: {permissions: ['titles.update']}\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class CrupdateTitleRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {Store} from '@ngxs/store';\nimport {TitlesService} from '../../titles.service';\nimport {CurrentUser} from '../../../../../common/auth/current-user';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CrupdateTitleResolverService implements Resolve<Observable<any>> {\n    constructor(\n        private router: Router,\n        private store: Store,\n        private titles: TitlesService,\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\n        const query = {fullCredits: true, keywords: true, countries: true, seasons: true, skipUpdating: true, allVideos: true},\n            titleId = route.params.titleId;\n\n        if ( ! titleId) {\n            return of(null);\n        }\n\n        return this.titles.get(route.params.titleId, query).pipe(\n            catchError(() => {\n                this.router.navigate(this.fallbackUri(state));\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response) {\n                    return of(response);\n                } else {\n                    this.router.navigate(this.fallbackUri(state));\n                    return EMPTY;\n                }\n            })\n        );\n    }\n\n    private fallbackUri(state: RouterStateSnapshot) {\n        return state.url.includes('admin') ? ['/admin/titles'] : [state.url.replace('/edit', '')];\n    }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {PrimaryFactsPanelComponent} from './crupdate-title/panels/primary-facts-panel/primary-facts-panel.component';\nimport {ImagesPanelComponent} from './crupdate-title/panels/images-panel/images-panel.component';\nimport {CreditsPanelComponent} from './crupdate-title/panels/credits-panel/credits-panel.component';\nimport {CrupdateCreditModalComponent} from './crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component';\nimport {TagsPanelComponent} from './crupdate-title/panels/tags-panel/tags-panel.component';\nimport {SeasonsPanelComponent} from './crupdate-title/panels/seasons-panel/seasons-panel.component';\nimport {CrupdateEpisodeModalComponent} from './crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {VideoIndexComponent} from '../../../admin/video-index/video-index.component';\nimport {CrupdateTitleRoutingModule} from './crupdate-title-routing.module';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {EpisodesPanelComponent} from './crupdate-title/panels/episodes-panel/episodes-panel.component';\nimport {FormatPipesModule} from '../../../../common/core/ui/format-pipes/format-pipes.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {SearchInputModule} from '../../search/seach-input/search-input.module';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\nimport {SelectUserInputModule} from '../../../../common/core/ui/select-user-input/select-user-input.module';\nimport {SelectTitleInputModule} from '../../../admin/video-index/select-title-input/select-title-input.module';\nimport {ReviewsIndexComponent} from '../../../admin/reviews-index/reviews-index.component';\nimport {ReviewIndexFiltersComponent} from '../../../admin/reviews-index/review-index-filters/review-index-filters.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\n\n@NgModule({\n    declarations: [\n        CrupdateTitleComponent,\n        PrimaryFactsPanelComponent,\n        ImagesPanelComponent,\n        CreditsPanelComponent,\n        CrupdateCreditModalComponent,\n        TagsPanelComponent,\n        SeasonsPanelComponent,\n        EpisodesPanelComponent,\n        CrupdateEpisodeModalComponent,\n        VideoIndexComponent,\n        ReviewsIndexComponent,\n        ReviewIndexFiltersComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdateTitleRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NoResultsMessageModule,\n        MediaImageModule,\n        FormatPipesModule,\n        LoadingIndicatorModule,\n        SearchInputModule,\n        DatatableModule,\n        SelectUserInputModule,\n        SelectTitleInputModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatTabsModule,\n        TextFieldModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n    ],\n})\nexport class CrupdateTitleModule {}\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '../../core/http/app-http-client.service';\nimport {PaginatedBackendResponse} from '../../core/types/pagination/paginated-backend-response';\nimport {Tag} from '@common/core/types/models/Tag';\nimport {BackendResponse} from '@common/core/types/backend-response';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TagsService {\n    static BASE_URI = 'tags';\n\n    constructor(private http: AppHttpClient) {\n    }\n\n    public index(params?: object): PaginatedBackendResponse<Tag> {\n        return this.http.get(TagsService.BASE_URI, params);\n    }\n\n    public create(params: Partial<Tag>): BackendResponse<{tag: Tag}> {\n        return this.http.post(TagsService.BASE_URI, params);\n    }\n\n    public update(id: number, params: Partial<Tag>): BackendResponse<{tag: Tag}> {\n        return this.http.put(`${TagsService.BASE_URI}/${id}`, params);\n    }\n\n    public delete(tagIds: number[]): BackendResponse<void> {\n        return this.http.delete(`${TagsService.BASE_URI}/${tagIds}`);\n    }\n\n}\n","import {Social} from './Social';\nimport {SocialProfile} from './SocialProfile';\nimport {Role} from './Role';\nimport {Permission} from '@common/core/types/models/permission';\nimport {Subscription} from '@common/shared/billing/models/subscription';\nimport {AccessToken} from '@common/core/types/models/access-token';\n\nexport const USER_MODEL = 'user';\n\nexport interface User {\n    id: number;\n    display_name: string;\n    username?: string;\n    first_name?: string;\n    last_name?: string;\n    avatar?: string;\n    email_verified_at: string;\n    permissions?: Permission[];\n    email: string;\n    password: string;\n    language: string;\n    timezone: string;\n    country: string;\n    created_at: string;\n    updated_at: string;\n    subscriptions?: Subscription[];\n    roles: Role[];\n    social_profiles: SocialProfile[];\n    tokens?: AccessToken[];\n    has_password: boolean;\n    oauth?: Social[];\n    available_space: number | null;\n    unread_notifications_count?: number;\n    card_last_four?: number;\n    card_brand?: string;\n    model_type: 'user';\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectUserInputComponent} from './select-user-input/select-user-input.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n@NgModule({\n    declarations: [SelectUserInputComponent],\n    imports: [\n        CommonModule,\n        MatButtonModule,\n        MatMenuModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [\n        SelectUserInputComponent\n    ],\n})\nexport class SelectUserInputModule {\n}\n","export function removeNullFromObject<T>(obj: T): T {\n    const copy = {...obj};\n    Object.keys(copy).forEach(key => {\n        if (copy[key] == null || copy[key] === '') {\n            delete copy[key];\n        }\n    });\n    return copy;\n}\n","<ng-container *ngIf=\"user\">\n    <img [src]=\"user.avatar\" alt=\"\">\n    <a [routerLink]=\"url.generate(user)\" target=\"_blank\" class=\"link content\" *ngIf=\"haveUrl\">\n        <div>{{user.display_name}}</div>\n        <div class=\"email secondary\">{{user.email}}</div>\n    </a>\n    <div class=\"content\" *ngIf=\"!haveUrl\">\n        <div>{{user.display_name}}</div>\n        <div class=\"email secondary\">{{user.email}}</div>\n    </div>\n</ng-container>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {User} from '@common/core/types/models/User';\nimport {UrlGeneratorService} from '@common/core/services/url-generator.service';\n\n@Component({\n    selector: 'user-column',\n    templateUrl: './user-column.component.html',\n    styleUrls: ['./user-column.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {class: 'column-with-image'},\n})\nexport class UserColumnComponent {\n    @Input() user: User;\n    @Input() showEmail = false;\n    haveUrl: boolean;\n\n    constructor(public url: UrlGeneratorService) {\n        this.haveUrl = !!url['user'];\n    }\n}\n","<div class=\"table\">\n  <div class=\"filter-suggestion-header row\">\n    <div class=\"column\" trans>Field</div>\n    <div class=\"column\" trans>Description</div>\n  </div>\n  <div class=\"body\" role=\"list\">\n    <div\n      role=\"listitem\"\n      class=\"row filter-suggestion-item\"\n      *ngFor=\"let filter of filters | keyvalue: originalOrder; index as index\"\n      tabindex=\"0\"\n      #filterSuggestion\n      [attr.data-filter-key]=\"filter.key\"\n      [attr.data-index]=\"index\"\n      (click)=\"filterSelected.emit(filter.value)\"\n    >\n      <div class=\"column label-column\" trans>{{ filter.value.label }}</div>\n      <div class=\"column\" trans>{{ filter.value.description }}</div>\n    </div>\n  </div>\n</div>\n\n<div class=\"help-container\">\n  <mat-icon svgIcon=\"info\"></mat-icon>\n  <div trans>\n    Use arrows, tab or mouse to navigate added filters. Backspace or delete key to remove them.\n  </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport {DatatableFilter} from '../filter-config/datatable-filter';\n\nconst ITEM_CLASS = 'filter-suggestion-item';\n\n@Component({\n    selector: 'filter-suggestions',\n    templateUrl: './filter-suggestions.component.html',\n    styleUrls: ['./filter-suggestions.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FilterSuggestionsComponent {\n    @Input() filters: {[key: string]: DatatableFilter};\n    @Output() filterSelected = new EventEmitter<DatatableFilter>();\n    @ViewChildren('filterSuggestion') items: QueryList<ElementRef<HTMLElement>>;\n\n    anyFocused(): boolean {\n        return document.activeElement.classList.contains(ITEM_CLASS);\n    }\n\n    focusItemAt(index: number) {\n        this.items.get(index).nativeElement.focus();\n    }\n\n    getFocusedFilter(): DatatableFilter {\n        if (this.anyFocused()) {\n            const k = (document.activeElement as HTMLElement).dataset.filterKey;\n            return this.filters[k];\n        }\n    }\n\n    getFocusedIndex(): number {\n        if (this.anyFocused()) {\n            const el = document.activeElement as HTMLElement;\n            return parseInt(el.dataset.index);\n        }\n    }\n\n    originalOrder = (): number => {\n        return 0;\n    };\n}\n","<ng-container *ngIf=\"value$ | async as value; else defaultHint\">\n    <img class=\"image\" [src]=\"value.image\" />\n    <div class=\"name\">{{ value.name }}</div>\n</ng-container>\n<ng-template #defaultHint>\n    <div trans>Click to select</div>\n</ng-template>\n","import {ChangeDetectionStrategy, Component, HostListener, Input} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {NormalizedModel} from '@common/core/types/models/normalized-model';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {DatatableFilter} from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/datatable-filter';\n\ntype propagateFn = (value: NormalizedModel) => void;\n\n@Component({\n    selector: 'select-model-control',\n    templateUrl: './select-model-control.component.html',\n    styleUrls: ['./select-model-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: SelectModelControlComponent,\n            multi: true,\n        },\n    ],\n})\nexport class SelectModelControlComponent implements ControlValueAccessor {\n    @Input() filter: DatatableFilter;\n    private propagateChange: propagateFn;\n    value$ = new BehaviorSubject<NormalizedModel>(null);\n\n    constructor(private dialog: Modal) {}\n\n    registerOnChange(fn: propagateFn): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {}\n\n    writeValue(value: NormalizedModel) {\n        this.value$.next(value);\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.openSelectModelDialog();\n    }\n\n    openSelectModelDialog() {\n        this.dialog\n            .open(this.filter.component, this.filter.componentData)\n            .afterClosed()\n            .subscribe((model: NormalizedModel) => {\n                if (model) {\n                    this.value$.next(model);\n                    this.propagateChange(model);\n                }\n            });\n    }\n}\n","import { FilterOperator } from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/datatable-filter';\n\nexport const FILTER_OPERATOR_NAMES: {[op in FilterOperator]: string} = {\n  '=': 'is',\n  '!=': 'is not',\n  '>': 'is greater than',\n  '>=': 'is greater than or equal to',\n  '<': 'is less than',\n  '<=': 'is less than or equal to',\n  has: 'Include',\n  doesntHave: 'Do not include',\n};\n\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {FilterOperator} from '../../filter-config/datatable-filter';\nimport {FILTER_OPERATOR_NAMES} from '../../../filter-operator-names';\nimport {BreakpointsService} from '../../../../../core/ui/breakpoints.service';\n\n@Pipe({\n    name: 'operatorDisplayName',\n})\nexport class OperatorDisplayNamePipe implements PipeTransform {\n    constructor(private breakpoints: BreakpointsService) {}\n    transform(value: FilterOperator, compact: boolean): string {\n        return compact || this.breakpoints.isMobile$.value\n            ? value\n            : FILTER_OPERATOR_NAMES[value];\n    }\n}\n","<ng-container [formGroup]=\"formGroup\">\n    <select\n        class=\"operator-select\"\n        formControlName=\"operator\"\n        #select\n        (ngModelChange)=\"resizeSelect()\"\n    >\n        <option [value]=\"operator\" *ngFor=\"let operator of operators\">\n            {{ operator | operatorDisplayName:compact }}\n        </option>\n    </select>\n</ng-container>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FilterOperator} from '../../filter-config/datatable-filter';\n\n@Component({\n    selector: 'operator-select',\n    templateUrl: './operator-select.component.html',\n    styleUrls: ['./operator-select.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OperatorSelectComponent implements AfterViewInit {\n    @Input() compact: boolean;\n    @Input() formGroup: FormGroup;\n    @Input() operators: FilterOperator[];\n    @ViewChild('select') select: ElementRef<HTMLSelectElement>;\n\n    ngAfterViewInit() {\n        this.resizeSelect();\n    }\n\n    resizeSelect() {\n        const select = this.select?.nativeElement;\n        if (select && select.selectedIndex > -1) {\n            const valueLength =\n                select.options[select.selectedIndex].label.length;\n            select.style.width = `${valueLength + 5}ch`;\n        }\n    }\n}\n","<ng-container [formGroup]=\"formGroup\" *ngIf=\"form.controls[key] as formGroup\">\n  <div class=\"filter-label\" (click)=\"el.nativeElement.focus()\" trans>{{ filter.label }}</div>\n  <operator-select\n    *ngIf=\"filter.operators\"\n    [compact]=\"compact\"\n    [formGroup]=\"formGroup\"\n    [operators]=\"filter.operators\"\n  ></operator-select>\n  <ng-container [ngSwitch]=\"filter.type\">\n    <div class=\"filter-input-container\" *ngSwitchCase=\"'select'\">\n      <select\n        [id]=\"key\"\n        #valueInput\n        class=\"filter-input filter-value\"\n        formControlName=\"value\"\n        (ngModelChange)=\"resizeInput()\"\n        [compareWith]=\"compareFilterValueFn\"\n      >\n        <option *ngFor=\"let option of filter.options\" [ngValue]=\"option.value\" trans>\n          {{ option.key || option.value }}\n        </option>\n      </select>\n      <svg viewBox=\"0 0 24 24\" class=\"caret-svg\">\n        <path d=\"M7 10l5 5 5-5z\"></path>\n        <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n      </svg>\n    </div>\n    <div class=\"date-picker-container\" *ngSwitchCase=\"'datePicker'\">\n      <input\n        type=\"date\"\n        class=\"date-input filter-value\"\n        #valueInput\n        [id]=\"key\"\n        formControlName=\"value\"\n      />\n    </div>\n    <select-model-control\n      [filter]=\"filter\"\n      *ngSwitchCase=\"'selectModel'\"\n      #valueInput\n      [id]=\"key\"\n      formControlName=\"value\"\n      class=\"filter-value select-model-input\"\n    ></select-model-control>\n    <div class=\"filter-input-container\" *ngSwitchCase=\"'input'\">\n      <input\n        #valueInput\n        [id]=\"key\"\n        formControlName=\"value\"\n        (ngModelChange)=\"resizeInput()\"\n        [type]=\"filter.inputType || 'text'\"\n        class=\"filter-input filter-value\"\n        min=\"1\"\n        required\n      />\n    </div>\n  </ng-container>\n</ng-container>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {\n    DatatableFilter,\n    FilterValue,\n} from '../../filter-config/datatable-filter';\nimport * as deepequal from 'fast-deep-equal';\nimport {SelectModelControlComponent} from '../select-model-control/select-model-control.component';\n\n@Component({\n    selector: 'active-filter',\n    templateUrl: './active-filter.component.html',\n    styleUrls: ['./active-filter.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        tabIndex: '0',\n        role: 'button',\n    },\n})\nexport class ActiveFilterComponent implements AfterViewInit {\n    @HostBinding('attr.data-control-key') @Input() key: string;\n    @Input() compact: boolean;\n    @Input() form: FormGroup;\n    @Input() filter: DatatableFilter;\n    @ViewChild('valueInput') valueInput:\n        | SelectModelControlComponent\n        | ElementRef<HTMLSelectElement | HTMLInputElement>;\n\n    constructor(public el: ElementRef<HTMLElement>) {}\n\n    ngAfterViewInit() {\n        this.resizeInput();\n    }\n\n    focus() {\n        this.el.nativeElement.focus();\n    }\n\n    focusValueInput() {\n        if (this.valueInput instanceof SelectModelControlComponent) {\n            this.valueInput.openSelectModelDialog();\n        } else if (this.valueInput?.nativeElement) {\n            this.valueInput.nativeElement.focus();\n        }\n    }\n\n    resizeInput() {\n        const el = (this.valueInput as ElementRef)?.nativeElement;\n        if (el?.nodeName === 'SELECT') {\n            const select = el as HTMLSelectElement;\n            if (select.selectedIndex > -1) {\n                const valueLength =\n                    select.options[select.selectedIndex].label.length;\n                select.style.width = `${valueLength + 5}ch`;\n            }\n        } else if (el?.nodeName === 'INPUT' && el.type !== 'date') {\n            const input = el as HTMLInputElement;\n            input.style.width = `${input.value.length + 7}ch`;\n        }\n    }\n\n    compareFilterValueFn = (val1: FilterValue, val2: FilterValue) => {\n        return deepequal(val1, val2);\n    };\n}\n","<ng-container *ngFor=\"let control of form.controls | keyvalue; index as index\">\n    <active-filter\n        [compact]=\"compact\"\n        [key]=\"control.key\"\n        [form]=\"form\"\n        [filter]=\"filter\"\n        *ngIf=\"config[control.value.value.key] as filter\"\n        [attr.data-index]=\"index\"\n    ></active-filter>\n</ng-container>\n<ng-content></ng-content>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Input,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {DatatableFilter} from '../filter-config/datatable-filter';\nimport {randomString} from '@common/core/utils/random-string';\nimport {ActiveFilterComponent} from './active-filter/active-filter.component';\n\ninterface AddFilterOptions {\n    value?: any;\n    operator?: string;\n    focus?: boolean;\n}\n\n@Component({\n    selector: 'active-filters',\n    templateUrl: './active-filters.component.html',\n    styleUrls: ['./active-filters.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ActiveFiltersComponent {\n    @Input() compact: boolean;\n    @Input() form: FormGroup;\n    @Input() config: DatatableFilter;\n    @ViewChildren(ActiveFilterComponent)\n    filters: QueryList<ActiveFilterComponent>;\n\n    constructor(\n        private fb: FormBuilder,\n        private cd: ChangeDetectorRef,\n        public el: ElementRef<HTMLElement>\n    ) {}\n\n    add(config: DatatableFilter, opts: AddFilterOptions = {}) {\n        const value =\n            opts.value !== undefined ? opts.value : config.defaultValue;\n        const control = this.fb.group({\n            key: config.key,\n            value,\n            operator: opts.operator || config.defaultOperator,\n        });\n        const key = Object.keys(this.form.controls).length + randomString(8);\n        // don't reload the table if filter does not have any default value (select model/user filter for example)\n        this.form.addControl(key, control, {emitEvent: value !== ''});\n        this.cd.detectChanges();\n        if (opts.focus) {\n            this.filters.last.focusValueInput();\n        }\n    }\n\n    removeByKey(key: string) {\n        this.form.removeControl(key);\n        this.cd.markForCheck();\n    }\n\n    removeCurrentlyFocused() {\n        const activeEl = document.activeElement as HTMLElement;\n        this.removeByKey(activeEl.dataset.controlKey);\n    }\n\n    anyFocused(): boolean {\n        return document.activeElement.nodeName === 'ACTIVE-FILTER';\n    }\n\n    focusLast() {\n        if (this.filters.last) {\n            this.filters.last.focus();\n        }\n    }\n\n    focusPrevious() {\n        const i = this.getFocusedIndex();\n        const previous = this.filters.get(i - 1);\n        if (previous) {\n            previous.focus();\n        }\n    }\n\n    getByIndex(index: number) {\n        return this.filters.get(index);\n    }\n\n    lastIsFocused() {\n        const i = this.getFocusedIndex();\n        return i === this.filters.length - 1;\n    }\n\n    getFocusedIndex(): number {\n        const i = (document.activeElement as HTMLElement).dataset.index;\n        return i ? parseInt(i) : null;\n    }\n}\n","export enum Keycodes {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    DELETE = 46,\n    ARROW_UP = 38,\n    ARROW_RIGHT = 39,\n    ARROW_DOWN = 40,\n    ARROW_LEFT = 37,\n    BACKSPACE = 8,\n    TAB = 9,\n    S = 83,\n    N = 78,\n    A = 65,\n    T = 84,\n    B = 66,\n    C = 67,\n    O = 79,\n    P = 80,\n    R = 82,\n    F = 70,\n    Y = 89,\n    Z = 90,\n}\n","import {Injectable} from '@angular/core';\nimport {Keycodes} from './keycodes.enum';\nimport {fromEvent, Subscription} from 'rxjs';\n\ninterface ParsedKeybind {\n    ctrl: boolean;\n    shift: boolean;\n    key: string;\n}\n\n// TODO: refactor so keybinds are stored for a specific \"listenOn\" element instead of globally\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class Keybinds {\n    private bindings = [];\n\n    public add(keybinds: string|string[], callback: (e: KeyboardEvent) => void) {\n        if ( ! Array.isArray(keybinds)) {\n            keybinds = [keybinds];\n        }\n        keybinds.forEach(keybind => {\n            this.bindings.push({keybind: this.parseKeybindString(keybind), keybindString: keybind, callback});\n        });\n    }\n\n    public addWithPreventDefault(keybind: string, callback: Function) {\n        this.bindings.push({keybind: this.parseKeybindString(keybind), keybindString: keybind, callback, preventDefault: true});\n    }\n\n    public listenOn(el: HTMLElement|Document, options: {fireIfInputFocused?: boolean} = {}): Subscription {\n        return fromEvent(el, 'keydown').subscribe((e: KeyboardEvent) => {\n            if (options.fireIfInputFocused || !['input', 'select'].includes(document.activeElement.nodeName.toLowerCase())) {\n                this.executeBindings(e);\n            }\n        });\n    }\n\n    private executeBindings(e: KeyboardEvent) {\n        this.bindings.forEach(binding => {\n            if ( ! this.bindingMatches(binding.keybind, e)) return;\n            if (binding.preventDefault && e.preventDefault) e.preventDefault();\n            binding.callback(e);\n        });\n    }\n\n    private bindingMatches(keybind: ParsedKeybind, e: KeyboardEvent) {\n        return Keycodes[keybind.key.toUpperCase()] === e.keyCode &&\n          (e.ctrlKey === keybind.ctrl || e.metaKey === keybind.ctrl) &&\n          e.shiftKey === keybind.shift;\n    }\n\n    /**\n     * Parse keybind string into object.\n     */\n    private parseKeybindString(keybind: string): ParsedKeybind {\n        const parts = keybind.trim().split('+');\n        const parsed = {ctrl: false, shift: false, key: ''};\n\n        parts.forEach(part => {\n            part = part.trim().toLowerCase();\n\n            if (part === 'ctrl') {\n                parsed.ctrl = true;\n            } else if (part === 'shift') {\n                parsed.shift = true;\n            } else {\n                parsed.key = part;\n            }\n        });\n\n        return parsed;\n    }\n}\n","<active-filters [form]=\"form\" [config]=\"keyedFilters\" [compact]=\"compact\">\n    <div class=\"input-container search-input-container\">\n        <mat-icon class=\"search-icon\" svgIcon=\"search\"></mat-icon>\n        <input\n            type=\"text\"\n            class=\"search-input\"\n            #searchInput\n            [placeholder]=\"('Type to search for ' + pluralName) | trans\"\n            [formControl]=\"searchControl\"\n            (focus)=\"inputFocus.emit()\"\n        />\n    </div>\n</active-filters>\n\n<button type=\"button\" class=\"clear-button\" (click)=\"clearSearch()\" *ngIf=\"haveFiltersOrQuery$ | async\" mat-icon-button>\n    <mat-icon svgIcon=\"close\"></mat-icon>\n</button>\n\n<button\n    type=\"button\"\n    mat-button\n    class=\"filter-button\"\n    (click)=\"toggleFilterDropdown()\"\n    *ngIf=\"keyedFilters\"\n>\n    <mat-icon class=\"filter-button-icon\" svgIcon=\"filter-list\"></mat-icon>\n    <span class=\"filter-button-text\" *ngIf=\"!compact\" trans>Filter</span>\n</button>\n\n<filter-suggestions\n    [filters]=\"keyedFilters\"\n    (filterSelected)=\"addFilterFromDropdownClick($event)\"\n    [style.top]=\"filterBarHeight + 5 + 'px'\"\n    [class.visible]=\"filterDropdownVisible$ | async\"\n></filter-suggestions>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport {FormBuilder, FormControl} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {distinctUntilChanged, filter, map, startWith} from 'rxjs/operators';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    fromEvent,\n    merge,\n    Observable,\n    Subscription,\n} from 'rxjs';\nimport {\n    DatatableFilter,\n    FilterValue,\n} from '@common/datatable/datatable-filters/search-input-with-filters/filter-config/datatable-filter';\nimport {Keybinds} from '@common/core/keybinds/keybinds.service';\nimport {FilterSuggestionsComponent} from './filter-suggestions/filter-suggestions.component';\nimport {ActiveFiltersComponent} from './active-filters/active-filters.component';\n\ninterface FormData {\n    [key: string]: {\n        key: string;\n        value: {value: FilterValue; operator: string} | FilterValue;\n        operator: string;\n    };\n}\n\n@Component({\n    selector: 'search-input-with-filters',\n    templateUrl: './search-input-with-filters.component.html',\n    styleUrls: ['./search-input-with-filters.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchInputWithFiltersComponent implements OnInit, AfterViewInit, OnDestroy {\n    @Input() compact: boolean;\n    @Input() searchControl: FormControl;\n    @Input() pluralName: string;\n    @Input() set filters(filters: DatatableFilter[]) {\n        if (filters) {\n            this.keyedFilters = {};\n            (filters || []).forEach(filter => {\n                this.keyedFilters[filter.key] = filter;\n            });\n        } else {\n            this.keyedFilters = null;\n        }\n    }\n\n    @Output() filterChange = new EventEmitter<string>();\n    @Output() inputFocus = new EventEmitter();\n\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild(FilterSuggestionsComponent) suggestions: FilterSuggestionsComponent;\n    @ViewChild(ActiveFiltersComponent) activeFilters: ActiveFiltersComponent;\n    @ViewChildren('filterSuggestion') filterContainers: QueryList<\n        ElementRef<HTMLElement>\n    >;\n\n    keyedFilters: {[key: string]: DatatableFilter};\n\n    form = this.fb.group({});\n\n    filterBarHeight = 0;\n    filterDropdownVisible$ = new BehaviorSubject<boolean>(false);\n    private closeActionsStream$: Subscription;\n\n    haveFiltersOrQuery$: Observable<boolean>;\n\n    constructor(\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private el: ElementRef<HTMLElement>,\n        private keybinds: Keybinds,\n        private cd: ChangeDetectorRef,\n        private router: Router\n    ) {}\n\n    ngOnInit() {\n        this.haveFiltersOrQuery$ = combineLatest([\n            this.searchControl.valueChanges.pipe(startWith(null)),\n            this.form.valueChanges.pipe(startWith(null)),\n        ]).pipe(map(([s, f]) => s || (f && Object.keys(f).length !== 0)));\n    }\n\n    ngAfterViewInit() {\n        this.watchForSizeChanges();\n        this.setFiltersFromQuery();\n        this.setupKeybinds();\n        this.subscribeToCloseActions();\n        this.bindToFormValueChange();\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(e: MouseEvent) {\n        if (\n            e.target === this.el.nativeElement ||\n            e.target === this.activeFilters.el.nativeElement\n        ) {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this.closeActionsStream$?.unsubscribe();\n    }\n\n    clearSearch() {\n        Object.keys(this.form.controls).forEach(key => {\n            this.activeFilters.removeByKey(key);\n        });\n        // prevent double datatable reload\n        this.searchControl.reset(null, {emitEvent: false});\n        this.form.reset();\n    }\n\n    toggleFilterDropdown() {\n        if (this.filterDropdownVisible$.value) {\n            this.filterDropdownVisible$.next(false);\n        } else {\n            this.filterDropdownVisible$.next(true);\n        }\n    }\n\n    addFilterFromDropdownClick(config: DatatableFilter) {\n        this.activeFilters.add(config, {focus: true});\n        this.filterDropdownVisible$.next(false);\n    }\n\n    private searchInputIsFocused(): boolean {\n        return document.activeElement === this.searchInput.nativeElement;\n    }\n\n    private cursorAtStartOfSearchInput(): boolean {\n        return (\n            this.searchInputIsFocused() &&\n            this.searchInput.nativeElement.selectionStart === 0\n        );\n    }\n\n    private cursorAtEndOfSearchInput(): boolean {\n        return (\n            this.searchInputIsFocused() &&\n            this.searchInput.nativeElement.selectionStart ===\n                this.searchInput.nativeElement.value.length\n        );\n    }\n\n    private bindToFormValueChange() {\n        this.form.valueChanges\n            .pipe(\n                map(v => (Object.keys(v).length ? v : null)),\n                distinctUntilChanged()\n            )\n            .subscribe((formData: FormData) => {\n                this.filterChange.emit(formData ? encodeFilterFormData(formData) : null);\n            });\n    }\n\n    private watchForSizeChanges() {\n        const resizeObserver = new ResizeObserver(entries => {\n            this.filterBarHeight = entries[0].contentRect.height;\n        });\n        resizeObserver.observe(this.el.nativeElement, {box: 'border-box'});\n    }\n\n    private setFiltersFromQuery() {\n        const qp = this.router.routerState.root.snapshot.queryParams;\n        if (qp.filters) {\n            const filterValues = decodeFilterString(qp.filters);\n            filterValues.forEach(filterValue => {\n                this.activeFilters.add(this.keyedFilters[filterValue.key], filterValue);\n            });\n        }\n        if (qp.query) {\n            this.searchControl.setValue(qp.query);\n        }\n    }\n\n    private setupKeybinds() {\n        this.keybinds.add(['backspace', 'delete'], () => {\n            if (this.cursorAtStartOfSearchInput()) {\n                return this.activeFilters.focusLast();\n            }\n            if (this.activeFilters.anyFocused()) {\n                this.activeFilters.removeCurrentlyFocused();\n                return this.searchInput.nativeElement.focus();\n            }\n        });\n\n        this.keybinds.add('arrow_left', e => {\n            if (this.cursorAtStartOfSearchInput()) {\n                this.activeFilters.focusLast();\n                e.preventDefault();\n            } else if (this.activeFilters.anyFocused()) {\n                this.activeFilters.focusPrevious();\n                e.preventDefault();\n            }\n        });\n\n        this.keybinds.add('arrow_right', e => {\n            if (this.activeFilters.anyFocused()) {\n                e.preventDefault();\n                const i = this.activeFilters.getFocusedIndex();\n                const next = this.activeFilters.getByIndex(i + 1);\n                if (next) {\n                    next.focus();\n                } else if (this.activeFilters.lastIsFocused()) {\n                    this.searchInput.nativeElement.focus();\n                }\n            }\n        });\n\n        this.keybinds.add(['arrow_down', 'tab'], e => {\n            if (this.cursorAtEndOfSearchInput() || this.suggestions.anyFocused()) {\n                e.preventDefault();\n                if (!this.filterDropdownVisible$.value) {\n                    this.toggleFilterDropdown();\n                }\n                const currentIndex = this.suggestions.getFocusedIndex();\n                let newIndex = currentIndex > -1 ? currentIndex : 0;\n                if (this.suggestions.anyFocused()) {\n                    newIndex += 1;\n                }\n                if (newIndex >= this.suggestions.items.length) {\n                    newIndex = 0;\n                }\n                this.suggestions.focusItemAt(newIndex);\n            }\n        });\n\n        this.keybinds.add(['arrow_up', 'shift+tab'], e => {\n            if (this.suggestions.anyFocused()) {\n                e.preventDefault();\n                const currentIndex = this.activeFilters.getFocusedIndex();\n                let newIndex = currentIndex > -1 ? currentIndex : 0;\n                newIndex -= 1;\n                if (newIndex === -1) {\n                    this.searchInput.nativeElement.focus();\n                } else {\n                    this.suggestions.focusItemAt(newIndex);\n                }\n            }\n        });\n\n        this.keybinds.add('enter', e => {\n            const focused = this.suggestions.getFocusedFilter();\n            if (focused) {\n                e.preventDefault();\n                this.activeFilters.add(focused, {focus: true});\n                this.filterDropdownVisible$.next(false);\n            }\n        });\n\n        this.keybinds.add('esc', e => {\n            if (this.filterDropdownVisible$.value) {\n                e.preventDefault();\n                this.filterDropdownVisible$.next(false);\n            }\n        });\n\n        this.keybinds.listenOn(document, {\n            fireIfInputFocused: true,\n        });\n    }\n\n    private subscribeToCloseActions() {\n        this.closeActionsStream$ = merge(\n            fromEvent(document, 'click') as Observable<MouseEvent>,\n            fromEvent(document, 'auxclick') as Observable<MouseEvent>,\n            fromEvent(document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(\n                filter(event => {\n                    const clickTarget = event.target as HTMLElement;\n                    return (\n                        clickTarget !== this.el.nativeElement &&\n                        !this.el.nativeElement.contains(clickTarget)\n                    );\n                })\n            )\n            .subscribe(() => {\n                this.filterDropdownVisible$.next(false);\n            });\n    }\n}\n\nconst encodeFilterFormData = (formData: FormData): string => {\n    const filters = [];\n    Object.values(formData).forEach(filter => {\n        if (filter.value !== '') {\n            filters.push(filter);\n        }\n    });\n    if (!filters.length) {\n        return '';\n    }\n    return encodeURIComponent(btoa(JSON.stringify(filters)));\n};\n\nconst decodeFilterString = (filterString: string): DecodedValue[] => {\n    let filtersFromQuery = [];\n    try {\n        filtersFromQuery = JSON.parse(atob(decodeURIComponent(filterString)));\n    } catch (e) {\n        //\n    }\n    return filtersFromQuery;\n};\n\ninterface DecodedValue {\n    key: string;\n    value: {value: FilterValue; operator: string};\n    operator: string;\n}\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {DatatableService} from '@common/datatable/datatable.service';\nimport {Model} from '@common/core/types/models/model';\nimport {DatatableFilter} from './search-input-with-filters/filter-config/datatable-filter';\n\n@Component({\n    selector: 'datatable-filters',\n    templateUrl: './datatable-filters.component.html',\n    styleUrls: ['./datatable-filters.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DatatableFiltersComponent {\n    @Input() pluralName: string;\n    @Input() filters: DatatableFilter[];\n\n    constructor(public datable: DatatableService<Model>) {}\n\n    onFilterChange(filters: string) {\n        this.datable.filters$.next({\n            filters,\n        });\n    }\n}\n","<search-input-with-filters\n    [searchControl]=\"datable.searchControl\"\n    [pluralName]=\"pluralName\"\n    [filters]=\"filters\"\n    (filterChange)=\"onFilterChange($event)\"\n></search-input-with-filters>\n","import {ComponentType} from '@angular/cdk/portal';\nimport {NormalizedModel} from '@common/core/types/models/normalized-model';\n\nexport class DatatableFilter {\n    defaultValue: FilterValue | '';\n    defaultOperator: FilterOperator;\n    key: string;\n    label: string;\n    description: string;\n    required: boolean;\n    order: number;\n    type: FilterControlType;\n    inputType: 'string' | 'number';\n    options: {key?: string; value: string | boolean | object | number}[];\n    operators: FilterOperator[] | undefined;\n    component?: ComponentType<any>;\n    componentData?: any;\n\n    constructor(options: DatatableFilterOptions) {\n        this.defaultValue =\n            options.defaultValue !== undefined ? options.defaultValue : '';\n        this.key = options.key || '';\n        this.label = options.label || options.key || '';\n        this.description = options.description || '';\n        this.defaultOperator = options.defaultOperator || FilterOperator.eq;\n        this.required = !!options.required;\n        this.order = options.order === undefined ? 1 : options.order;\n        this.type = options.type || FilterControlType.Select;\n        this.inputType = options.inputType;\n        this.options = options.options || [];\n        this.operators = options.operators;\n        this.component = options.component;\n        this.componentData = options.componentData;\n    }\n}\n\nexport interface DatatableFilterOptions {\n    defaultValue?: FilterValue | '';\n    key?: string;\n    label?: string;\n    description: string;\n    component?: ComponentType<any>;\n    componentData?: any;\n    defaultOperator?: FilterOperator;\n    required?: boolean;\n    order?: number;\n    type?: FilterControlType;\n    inputType?: 'string' | 'number';\n    options?: {key?: string; value: string | boolean | object | number}[];\n    operators?: FilterOperator[];\n}\n\nexport enum FilterControlType {\n    Select = 'select',\n    DatePicker = 'datePicker',\n    SelectModel = 'selectModel',\n    Input = 'input',\n    StaticValue = 'staticValue',\n}\n\nexport enum FilterOperator {\n    eq = '=',\n    ne = '!=',\n    gt = '>',\n    gte = '>=',\n    lt = '<',\n    lte = '<=',\n    has = 'has',\n    doesntHave = 'doesntHave',\n}\n\nexport type FilterValueWithOperator = {\n    value: FilterValue;\n    operator: FilterOperator;\n};\nexport const ALL_PRIMITIVE_OPERATORS = [\n    FilterOperator.eq,\n    FilterOperator.ne,\n    FilterOperator.gt,\n    FilterOperator.gte,\n    FilterOperator.lt,\n    FilterOperator.lte,\n];\n\nexport type FilterValue =\n    | string\n    | number\n    | boolean\n    | NormalizedModel\n    | FilterValueWithOperator\n    | null;\n","import {\n    ALL_PRIMITIVE_OPERATORS,\n    DatatableFilter,\n    FilterControlType,\n    FilterOperator,\n} from './datatable-filter';\n\nexport class TimestampFilter extends DatatableFilter {\n    type = FilterControlType.DatePicker;\n    operators = ALL_PRIMITIVE_OPERATORS;\n    defaultOperator = FilterOperator.lte;\n    defaultValue = new Date().toISOString().split('T')[0];\n}\n\nexport class CreatedAtFilter extends TimestampFilter {\n  key = 'created_at';\n  label = 'Created At';\n}\n\nexport class UpdatedAtFilter extends TimestampFilter {\n  key = 'updated_at';\n  label = 'Updated At';\n}\n\n\n","<div class=\"modal-header\">\n  <h2 mat-dialog-title [transValues]=\"{resource: modelName}\" trans>Find :resource</h2>\n  <button type=\"button\" (click)=\"close()\" class=\"no-style close-button\" tabindex=\"-1\">\n    <mat-icon svgIcon=\"close\"></mat-icon>\n  </button>\n</div>\n\n<mat-dialog-content>\n  <div class=\"input-container search-input-container\">\n    <input\n      type=\"text\"\n      placeholder=\"Search for :resource by name...\"\n      trans-placeholder\n      [transValues]=\"{resource: modelName}\"\n      [formControl]=\"searchFormControl\"\n    />\n    <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n  </div>\n\n  <div class=\"results\">\n    <div class=\"result\" *ngFor=\"let model of results$ | async\" (click)=\"close(model)\">\n      <img [src]=\"model.image\" alt=\"\" />\n      <div class=\"meta overflow-hidden\">\n        <div class=\"name overflow-hidden\">{{ model.name }}</div>\n        <div class=\"description overflow-hidden\" *ngIf=\"model.description\">{{ model.description }}</div>\n      </div>\n    </div>\n  </div>\n</mat-dialog-content>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Inject,\n    OnInit,\n} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    switchMap,\n} from 'rxjs/operators';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {NormalizedModel} from '@common/core/types/models/normalized-model';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\n\ninterface SelectModelDialogData {\n    modelType: string;\n}\n\n@Component({\n    selector: 'select-model-dialog',\n    templateUrl: './select-model-dialog.component.html',\n    styleUrls: ['./select-model-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectModelDialogComponent implements OnInit {\n    modelName: string;\n    searchFormControl = new FormControl();\n    loading$ = new BehaviorSubject(false);\n    results$ = new BehaviorSubject<NormalizedModel[]>([]);\n\n    constructor(\n        private dialogRef: MatDialogRef<SelectModelDialogComponent>,\n        private http: AppHttpClient,\n        @Inject(MAT_DIALOG_DATA) public data: SelectModelDialogData\n    ) {\n        this.modelName = this.data.modelType;\n    }\n\n    ngOnInit() {\n        this.searchFormControl.valueChanges\n            .pipe(\n                debounceTime(250),\n                distinctUntilChanged(),\n                switchMap(query => this.searchModel(query)),\n                catchError(() => of([]))\n            )\n            .subscribe(users => {\n                this.results$.next(users);\n                this.loading$.next(false);\n            });\n    }\n\n    private searchModel(query: string): Observable<NormalizedModel[]> {\n        this.loading$.next(true);\n        if (!query) {\n            return of([]);\n        }\n        return this.http\n            .get<{results: NormalizedModel[]}>('search/global/model', {\n                modelType: this.data.modelType,\n                query,\n            })\n            .pipe(map(response => response.results));\n    }\n\n    close(selectedModel?: NormalizedModel) {\n        this.dialogRef.close(selectedModel);\n    }\n}\n","<div class=\"page-size\" *ngIf=\"!hidePerPage\">\n    <div class=\"page-size-label\" trans>Items per page</div>\n    <div class=\"input-container\">\n        <select class=\"page-size-input\" [formControl]=\"perPageControl\">\n            <option [ngValue]=\"10\">10</option>\n            <option [ngValue]=\"15\">15</option>\n            <option [ngValue]=\"20\">20</option>\n            <option [ngValue]=\"50\">50</option>\n            <option [ngValue]=\"100\">100</option>\n        </select>\n    </div>\n</div>\n<div class=\"range-actions\">\n    <div class=\"range-label\" *ngIf=\"from && to && totalRecords\">\n        {{from}} - {{to}} {{'of' | trans}} {{totalRecords | number}}\n    </div>\n    <button type=\"button\" [disabled]=\"!havePrevious || (datable.paginator.loading$ | async)\" class=\"range-button\" (click)=\"previousPage()\" mat-icon-button>\n        <mat-icon svgIcon=\"chevron-left\"></mat-icon>\n    </button>\n    <button type=\"button\" [disabled]=\"!haveNext || (datable.paginator.loading$ | async)\" class=\"range-button\" (click)=\"nextPage()\" mat-icon-button>\n        <mat-icon svgIcon=\"chevron-right\"></mat-icon>\n    </button>\n</div>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\n\n@Component({\n    selector: 'datatable-footer',\n    templateUrl: './datatable-footer.component.html',\n    styleUrls: ['./datatable-footer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableFooterComponent implements OnInit, OnDestroy {\n    @Input() hidePerPage = false;\n    public perPageControl = new FormControl(15);\n    public from: number;\n    public to: number;\n    public totalRecords: number;\n    public havePrevious: boolean;\n    public haveNext: boolean;\n    private changeRef: Subscription;\n\n    constructor(\n        public datable: DatatableService<any>,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit() {\n        this.changeRef = this.datable.paginator.response$\n            .pipe(filter(r => !!r?.pagination), map(r => r.pagination))\n            .subscribe(pagination => {\n                this.totalRecords = pagination.total;\n                this.to = Math.min((pagination.per_page * pagination.current_page), this.totalRecords);\n                this.from = Math.max((this.to - pagination.per_page), 1);\n                this.havePrevious = this.datable.paginator.canLoadPrevPage();\n                this.haveNext = this.datable.paginator.canLoadNextPage();\n                this.perPageControl.setValue(parseInt('' + pagination.per_page), {emitEvent: false});\n                this.cd.markForCheck();\n            });\n\n        this.perPageControl.valueChanges\n            .subscribe(perPage => {\n                this.datable.paginator.changePerPage(perPage);\n            });\n    }\n\n    ngOnDestroy() {\n        this.changeRef.unsubscribe();\n        this.datable.destroy();\n    }\n\n    public previousPage() {\n        this.datable.paginator.previousPage();\n    }\n\n    public nextPage() {\n        this.datable.paginator.nextPage();\n    }\n}\n","import { ConnectedPosition } from '@angular/cdk/overlay';\n\nexport const LEFT_POSITION: ConnectedPosition[] = [\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 50},\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 50},\n];\n","<header>\n    <mat-icon svgIcon=\"filter-list\"></mat-icon>\n    <span trans>Filters</span>\n</header>\n\n<form class=\"body\" (ngSubmit)=\"close()\">\n    <ng-container *ngTemplateOutlet=\"data.filters\"></ng-container>\n</form>\n\n<footer>\n    <button (click)=\"close()\" type=\"button\" mat-button color=\"accent\" trans>Close</button>\n</footer>\n","import {ChangeDetectionStrategy, Component, ElementRef, Inject, TemplateRef} from '@angular/core';\nimport {OVERLAY_PANEL_DATA} from '../../core/ui/overlay-panel/overlay-panel-data';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {matDialogAnimations} from '@angular/material/dialog';\n\n@Component({\n    selector: 'datatable-filters-panel',\n    templateUrl: './datatable-filters-panel.component.html',\n    styleUrls: ['./datatable-filters-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[@dialogContainer]': `'enter'`\n    },\n    animations: [\n        matDialogAnimations.dialogContainer,\n    ]\n})\nexport class DatatableFiltersPanelComponent {\n\n    constructor(\n        @Inject(OVERLAY_PANEL_DATA) public data: {filters: TemplateRef<ElementRef>},\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n}\n","<div class=\"input-container search-input-container\">\n    <input type=\"text\" class=\"search-input\" [placeholder]=\"placeholder | trans\" [formControl]=\"datatable.searchControl\">\n    <mat-icon svgIcon=\"search\" *ngIf=\"!hideIcon\"></mat-icon>\n</div>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {DatatableService} from '../../datatable.service';\nimport {Model} from '@common/core/types/models/model';\n\n@Component({\n    selector: 'datatable-header-search-input',\n    templateUrl: './datatable-header-search-input.component.html',\n    styleUrls: ['./datatable-header-search-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderSearchInputComponent {\n    @Input() placeholder: string;\n    @Input() hideIcon = false;\n\n    constructor(\n        public datatable: DatatableService<Model>,\n    ) {}\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {TitleCasePipe as AngularTitleCasePipe} from '@angular/common';\n\n@Pipe({\n    name: 'titleCase',\n    pure: true,\n})\nexport class TitleCasePipe extends AngularTitleCasePipe implements PipeTransform {\n    transform(value: string): string;\n    transform(value: null|undefined): null;\n    transform(value: string|null|undefined): string|null;\n    transform(value: string | null | undefined): string | null {\n        if ( ! value) {\n            return '';\n        }\n        return super.transform(value.replace('-', ' ').replace('_', ' '));\n    }\n}\n","<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"datatable.paginator && datatable.paginator.loading$ | async\"></mat-progress-bar>\n<div class=\"left-column\">\n    <div class=\"default-left-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-content select=\"[leftContent]\"></ng-content>\n    </div>\n    <div class=\"selected-left-content capitalize\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        {{ ':count :resource selected' | trans:{count: numberOfRowsSelected, resource: pluralResourceName} }}\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"default-right-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-container *ngIf=\"filterPanelTemplate\">\n            <mat-chip-list aria-label=\"Active Filters\" class=\"filter-chip-list\">\n                <mat-chip *ngFor=\"let filter of filters$ | async | keyvalue\" [removable]=\"true\" [selectable]=\"false\" (removed)=\"datatable.removeFilter(filter.key)\">\n                    {{filter.key | titleCase | trans}}: {{isModel(filter.value) ? (filter.value.name || filter.value.display_name) : filter.value}}\n                    <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\n                </mat-chip>\n            </mat-chip-list>\n            <button (click)=\"openFiltersPanel()\" class=\"filter-button\" [class.active]=\"filterPanelRef\" #filterButton mat-icon-button>\n                <mat-icon svgIcon=\"filter-list\"></mat-icon>\n            </button>\n        </ng-container>\n        <datatable-header-search-input placeholder=\"Search {{ pluralResourceName }}\"></datatable-header-search-input>\n    </div>\n    <div class=\"selected-right-actions\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        <ng-content select=\"[rightContent]\"></ng-content>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Model} from '../../core/types/models/model';\nimport {Subscription} from 'rxjs';\nimport {OverlayPanel} from '../../core/ui/overlay-panel/overlay-panel.service';\nimport {LEFT_POSITION} from '../../core/ui/overlay-panel/positions/left-position';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {DatatableFiltersPanelComponent} from '../datatable-filters-panel/datatable-filters-panel.component';\nimport {map} from 'rxjs/operators';\nimport {removeNullFromObject} from '../../core/utils/remove-null-from-object';\nimport {DatatableFilterValue} from '../types/datatable-filters';\n\n@Component({\n    selector: 'datatable-header',\n    templateUrl: './datatable-header.component.html',\n    styleUrls: ['./datatable-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderComponent implements OnInit, OnDestroy {\n    @HostBinding('class.rows-selected') public numberOfRowsSelected: number;\n    @ContentChild('tableFilters') filterPanelTemplate: TemplateRef<ElementRef>;\n    @ViewChild('filterButton', { read: ElementRef }) filterButton: ElementRef<HTMLButtonElement>;\n    @Input() pluralResourceName: string;\n    @Input() showSelectedActions = true;\n    private subscriptions: Subscription[] = [];\n    public filterPanelRef: OverlayPanelRef<any>;\n\n    public filters$ = this.datatable.filters$\n        .pipe(map(v => {\n            const filters = removeNullFromObject(v);\n            delete filters.query;\n            return filters;\n        }));\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    ngOnInit() {\n        // close filter panel when any filter is selected.\n        const filterSub = this.datatable.filters$.subscribe(() => {\n            this.filterPanelRef && this.filterPanelRef.close();\n        });\n        const changeSub = this.datatable.selectedRows$.subscribe(value => {\n            this.numberOfRowsSelected = value.length;\n            this.cd.markForCheck();\n        });\n        this.subscriptions = [filterSub, changeSub];\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    public openFiltersPanel() {\n        if (this.filterPanelRef) {\n            this.filterPanelRef.close();\n        } else {\n            const position = LEFT_POSITION.slice();\n            position[0].offsetY = 40;\n            position[1].offsetY = 40;\n            this.filterPanelRef = this.overlayPanel.open(DatatableFiltersPanelComponent, {\n                origin: this.filterButton,\n                position,\n                mobilePosition: 'center',\n                data: {filters: this.filterPanelTemplate},\n                maxWidth: '90%',\n            });\n            this.filterButton.nativeElement.classList.add('active');\n            this.filterPanelRef.afterClosed().subscribe(() => {\n                this.filterPanelRef = null;\n                this.filterButton.nativeElement.classList.remove('active');\n            });\n        }\n    }\n\n    public isModel(value: DatatableFilterValue) {\n        return typeof value === 'object' && value.id;\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SearchInputWithFiltersComponent} from './search-input-with-filters.component';\nimport {ActiveFiltersComponent} from './active-filters/active-filters.component';\nimport {ActiveFilterComponent} from './active-filters/active-filter/active-filter.component';\nimport {OperatorSelectComponent} from './active-filters/operator-select/operator-select.component';\nimport {FilterSuggestionsComponent} from './filter-suggestions/filter-suggestions.component';\nimport {OperatorDisplayNamePipe} from './active-filters/operator-select/operator-display-name.pipe';\nimport {SelectModelControlComponent} from './active-filters/select-model-control/select-model-control.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SelectModelDialogComponent} from '@common/datatable/datatable-filters/select-model-dialog/select-model-dialog.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n@NgModule({\n    declarations: [\n        SearchInputWithFiltersComponent,\n        ActiveFiltersComponent,\n        ActiveFilterComponent,\n        OperatorSelectComponent,\n        FilterSuggestionsComponent,\n        OperatorDisplayNamePipe,\n        SelectModelControlComponent,\n        SelectModelDialogComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [SearchInputWithFiltersComponent],\n})\nexport class SearchInputWithFiltersModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TableSortHeaderComponent} from './table-sort-header/table-sort-header.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslationsModule} from '../core/translations/translations.module';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {UserColumnComponent} from './columns/user-column/user-column.component';\nimport {TableBodyCheckboxComponent} from './selection/table-body-checkbox.component';\nimport {TableHeaderCheckboxComponent} from './selection/table-header-checkbox.component';\nimport {DatatableFooterComponent} from './datatable-footer/datatable-footer.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DatatableHeaderComponent} from './datatable-header/datatable-header.component';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {DatatableFiltersPanelComponent} from './datatable-filters-panel/datatable-filters-panel.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {ChipsModule} from '../core/ui/chips/chips.module';\nimport {DatatableHeaderSearchInputComponent} from './datatable-header/datatable-header-search-input/datatable-header-search-input.component';\nimport {NoResultsMessageModule} from '../core/ui/no-results-message/no-results-message.module';\nimport {NoResultsMessageComponent} from '../core/ui/no-results-message/no-results-message.component';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {DatatableFiltersComponent} from '@common/datatable/datatable-filters/datatable-filters.component';\nimport {DatatablePageHeaderComponent} from '@common/datatable/datatable-page-header/datatable-page-header.component';\nimport {SearchInputWithFiltersModule} from './datatable-filters/search-input-with-filters/search-input-with-filters.module';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n    declarations: [\n        TableSortHeaderComponent,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableHeaderSearchInputComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n        DatatableFiltersComponent,\n        DatatablePageHeaderComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ChipsModule,\n        NoResultsMessageModule,\n        FormatPipesModule,\n        SearchInputWithFiltersModule,\n        RouterModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatProgressBarModule,\n    ],\n    exports: [\n        TableSortHeaderComponent,\n        MatCheckboxModule,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n        NoResultsMessageComponent,\n        DatatableFiltersComponent,\n        DatatablePageHeaderComponent,\n    ],\n})\nexport class DatatableModule {}\n","import {Params, Router} from '@angular/router';\nimport {BehaviorSubject, of, Subscription} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\nimport {Injectable} from '@angular/core';\nimport {LocalStorage} from '@common/core/services/local-storage.service';\n\n@Injectable()\nexport class Paginator<T> {\n    private subscription: Subscription;\n    private params$ = new BehaviorSubject<PaginationParams>({});\n    public paginatedOnce$ = new BehaviorSubject<boolean>(false);\n    public loading$ = new BehaviorSubject(false);\n    public response$ = new BehaviorSubject<{pagination: PaginationResponse<T>, [key: string]: any}>(null);\n    public dontUpdateQueryParams = false;\n    public perPageCacheKey: string = null;\n    /** only true if data was already loaded from backend and it was empty */\n    public noResults$ = this.response$.pipe(map(r => this.paginatedOnce$.value && r.pagination.data.length === 0));\n\n    get params(): PaginationParams {\n        return this.params$.value;\n    }\n\n    get currentPage(): number {\n        return this.response$.value?.pagination?.current_page;\n    }\n\n    constructor(\n        private router: Router,\n        private http: AppHttpClient,\n        private localStorage?: LocalStorage,\n    ) {}\n\n    public paginate(userParams: object = {}, url?: string, initialData?: PaginationResponse<T>) {\n        // only use query params on first pagination, so query params can be removed via user params\n        const queryParams = !this.subscription ? this.currentQueryParams() : {};\n        const paginationParams = this.response$.value ? {\n            perPage: this.response$.value.pagination.per_page,\n            page: this.response$.value.pagination.current_page\n        } : {};\n        this.params$.next({...paginationParams, ...queryParams, ...userParams});\n\n        if ( ! this.subscription) {\n            this.init(url, initialData);\n        }\n    }\n\n    public nextPage() {\n        const current = this.response$.value.pagination.current_page || 0;\n        this.paginate({\n            ...this.params$.value,\n            page: current + 1,\n            cursor: this.response$.value.pagination.next_cursor,\n        });\n    }\n\n    public previousPage() {\n        const current = this.response$.value.pagination.current_page;\n        this.paginate({\n            ...this.params$.value,\n            page: (current - 1) || 1,\n            cursor: this.response$.value.pagination.prev_cursor,\n        });\n    }\n\n    public changePerPage(newPerPage: number) {\n        if (newPerPage !== this.params$.value?.perPage) {\n            if (this.perPageCacheKey) {\n                this.localStorage.set(this.perPageCacheKey, newPerPage);\n            }\n            this.paginate({\n                ...this.params$.value,\n                perPage: newPerPage\n            });\n        }\n    }\n\n    public currentQueryParams(): Params {\n        return this.router.routerState.root.snapshot.queryParams;\n    }\n\n    private init(uri: string, initialData?: PaginationResponse<T>) {\n        this.subscription = this.params$.pipe(\n            switchMap(params => {\n                this.loading$.next(true);\n                const firstPagination = !this.paginatedOnce$.value;\n                if (firstPagination && this.perPageCacheKey && this.localStorage.get(this.perPageCacheKey)) {\n                    params = {perPage: this.localStorage.get(this.perPageCacheKey), ...params};\n                }\n\n                // if we got initial pagination response (of 1st page)\n                // return that instead of making 1st page http request\n                const request = firstPagination && initialData ?\n                    of({pagination: initialData}) :\n                    this.http.get(uri, params);\n\n                return (request as PaginatedBackendResponse<T>).pipe(\n                    // can't use \"finalize\" here as it will complete after loading$.next(true)\n                    // call above, which will prevent loading bar from showing\n                    // if pagination request is cancelled and new one is queued\n                    tap(() => {\n                        this.updateQueryParams(params);\n                        this.loading$.next(false);\n                        this.paginatedOnce$.next(true);\n                    }, () => {\n                        this.loading$.next(false);\n                        this.paginatedOnce$.next(true);\n                    })\n                ) as PaginatedBackendResponse<T>;\n            })\n        ).subscribe(response => {\n            this.response$.next(response);\n        });\n    }\n\n    private updateQueryParams(params = {}) {\n        if (this.dontUpdateQueryParams) return;\n        for (const key in params) {\n            if (Array.isArray(params[key])) {\n                params[key] = params[key].join(',');\n            }\n        }\n        this.router.navigate([], {queryParams: params, replaceUrl: true});\n    }\n\n    public canLoadNextPage(): boolean {\n        const data = this.response$.value?.pagination;\n        if (data) {\n            return !!data.next_cursor || (this.currentPage < data.last_page);\n        }\n        return false;\n    }\n\n    public canLoadPrevPage(): boolean {\n        const data = this.response$.value?.pagination;\n        if (data) {\n            return !!data.prev_cursor || (this.currentPage > 1);\n        }\n        return false;\n    }\n}\n","import {ConfirmModalData} from '../core/ui/confirm-modal/confirm-modal.component';\n\nexport const DELETE_RESOURCE_MESSAGE: ConfirmModalData = {\n    title: `Delete :resource`,\n    body:  `Are you sure you want to delete selected :resource?`,\n    ok:    'Delete'\n};\n","import * as Dot from \"dot-object\";\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {Model} from '@common/core/types/models/model';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\nexport function sortDatatableData<T extends Model>(data: T[], orderBy: string, orderDir: string): T[] {\n    return data.sort((a, b) => {\n        let valueA = sortingDataAccessor(a, orderBy);\n        let valueB = sortingDataAccessor(b, orderBy);\n\n        // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n        const valueAType = typeof valueA;\n        const valueBType = typeof valueB;\n\n        if (valueAType !== valueBType) {\n            if (valueAType === 'number') {\n                valueA += '';\n            }\n            if (valueBType === 'number') {\n                valueB += '';\n            }\n        }\n\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n        let comparatorResult = 0;\n        if (valueA != null && valueB != null) {\n            // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n            if (valueA > valueB) {\n                comparatorResult = 1;\n            } else if (valueA < valueB) {\n                comparatorResult = -1;\n            }\n        } else if (valueA != null) {\n            comparatorResult = 1;\n        } else if (valueB != null) {\n            comparatorResult = -1;\n        }\n\n        return comparatorResult * (orderDir === 'asc' ? 1 : -1);\n    });\n}\n\n/**\n * Data accessor function that is used for accessing data properties for sorting through\n * the default sortData function.\n * This default function assumes that the sort header IDs (which defaults to the column name)\n * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n * May be set to a custom function for different behavior.\n */\nfunction sortingDataAccessor(data: object, sortHeaderId: string): string {\n    const value = Dot.pick(sortHeaderId, data);\n\n    if (_isNumberValue(value)) {\n        const numberValue = Number(value);\n\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    // if (Array.isArray(value)) {\n    //     return value.reduce((prev, curr) => prev += objectToStr(curr));\n    // }\n\n    return value;\n}\n","export function filterDatatableData<T = object>(data: T[], filter: string): T[] {\n    return data.filter(obj => filterPredicate(obj as any, filter));\n}\n/**\n * Checks if a data object matches the data source's filter string. By default, each data object\n * is converted to a string of its properties and returns true if the filter has\n * at least one occurrence in that string. By default, the filter string has its whitespace\n * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n * filter matching.\n * @param data Data object used to check against the filter.\n * @param filter Filter string that has been set on the data source.\n * @returns Whether the filter matches against the data\n */\nfunction filterPredicate(data: object|string, filter: string): boolean {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = typeof data === 'string' ? data : objectToStr(data);\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) !== -1;\n}\n\nexport function objectToStr(obj: object) {\n    return Object.keys(obj).reduce((currentTerm: string, key: string) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        const term = (obj[key] && typeof obj[key] === 'object') ?\n            objectToStr(obj[key]) :\n            obj[key];\n        return currentTerm + term + '◬';\n    }, '').toLowerCase();\n}\n","import {Injectable} from '@angular/core';\nimport {\n    animationFrameScheduler,\n    BehaviorSubject,\n    combineLatest,\n    Subscription,\n} from 'rxjs';\nimport {Paginator} from '../shared/paginator.service';\nimport {debounceTime, filter, map, pairwise, tap} from 'rxjs/operators';\nimport {DatatableFilters, DatatableFilterValue} from './types/datatable-filters';\nimport {DatatableSort} from './types/datatable-sort';\nimport {PaginationParams} from '../core/types/pagination/pagination-params';\nimport {removeNullFromObject} from '../core/utils/remove-null-from-object';\nimport {ComponentType} from '@angular/cdk/portal';\nimport {MatDialogConfig} from '@angular/material/dialog';\nimport {Modal} from '../core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '../core/ui/confirm-modal/confirm-modal.component';\nimport {DELETE_RESOURCE_MESSAGE} from './delete-resource-message';\nimport {PaginationResponse} from '../core/types/pagination/pagination-response';\nimport {sortDatatableData} from '@common/datatable/utils/sort-datatable-data';\nimport {Model} from '@common/core/types/models/model';\nimport {filterDatatableData} from '@common/datatable/utils/filter-datatable-data';\nimport {Router} from '@angular/router';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {LocalStorage} from '../core/services/local-storage.service';\nimport {FormControl} from '@angular/forms';\n\nexport type DatatableStaticParams = Record<string, string | number | boolean | string[]>;\n\ninterface DatatableConfig<T> {\n    uri?: string;\n    staticParams?: DatatableStaticParams;\n    initialData?: PaginationResponse<T> | T[];\n    disableSort?: boolean;\n    infiniteScroll?: boolean;\n}\n\n@Injectable()\nexport class DatatableService<T extends Model> {\n    public sort$ = new BehaviorSubject<DatatableSort>({});\n    public filters$ = new BehaviorSubject<DatatableFilters>({});\n    public searchControl = new FormControl();\n    public searchTerm$ = new BehaviorSubject<string>(null);\n    public staticParams$ = new BehaviorSubject<DatatableStaticParams>({});\n    public paginator = new Paginator<T>(this.router, this.http, this.localStorage);\n    private paginatorSub: Subscription;\n    private mainSub: Subscription;\n    private searchControlSub: Subscription;\n    private ignoreNextParamChange = false;\n    private originalData$ = new BehaviorSubject<T[]>([]);\n    public data$ = new BehaviorSubject<T[]>([]);\n    public selectedRows$ = new BehaviorSubject<number[]>([]);\n    public config: DatatableConfig<T>;\n\n    constructor(\n        protected modal: Modal,\n        protected router: Router,\n        protected http: AppHttpClient,\n        protected localStorage: LocalStorage\n    ) {}\n\n    get data() {\n        return this.data$.value;\n    }\n\n    set data(data: T[]) {\n        const tableData = [...data];\n        this.originalData$.next(tableData);\n        this.data$.next(tableData);\n\n        // Reset filters and sort without trigger data reload via pagination\n        this.ignoreNextParamChange = true;\n        this.reset();\n    }\n\n    public init(config: DatatableConfig<T> = {}) {\n        // TODO: don't add static params to current url query params\n\n        this.config = config;\n        this.staticParams$.next({\n            ...this.staticParams$.value,\n            ...config.staticParams,\n        });\n        if (config.uri) {\n            this.connectToPaginator();\n        } else if (config.initialData) {\n            this.data = config.initialData as T[];\n        }\n\n        // set search term from queryParams\n        if (config.uri) {\n            const qp = this.router.routerState.root.snapshot.queryParams;\n            const initialSearchTerm = qp.query as string;\n            this.searchControl.setValue(initialSearchTerm);\n            this.searchTerm$.next(initialSearchTerm);\n            this.sort$.next({\n                orderBy: qp.orderBy,\n                orderDir: qp.orderDir,\n            });\n        }\n        this.searchControlSub = this.searchControl.valueChanges\n            .pipe(debounceTime(300))\n            .subscribe(value => {\n                this.searchTerm$.next(value);\n            });\n\n        this.mainSub = combineLatest([\n            this.sort$,\n            this.filters$,\n            this.searchTerm$.pipe(\n                map(query => {\n                    return {query};\n                })\n            ),\n            // static params needs to be last, so it can override all the other params\n            this.staticParams$,\n        ])\n            .pipe(\n                debounceTime(0, animationFrameScheduler),\n                map(params => Object.assign({}, ...params))\n            )\n            .subscribe((params: PaginationParams) => {\n                if (this.ignoreNextParamChange) {\n                    return (this.ignoreNextParamChange = false);\n                }\n                params = removeNullFromObject(params);\n                Object.entries(params).forEach(([key, value]) => {\n                    if (typeof value === 'object' && value.id) {\n                        params[`${key}Id`] = value.id;\n                        delete params[key];\n                    }\n                });\n                if (this.config.uri) {\n                    this.paginator.paginate(\n                        params,\n                        this.config.uri,\n                        this.config.initialData as PaginationResponse<T>\n                    );\n                } else if (Object.keys(params).length && this.data.length) {\n                    this.applyLocalTransforms(params);\n                }\n            });\n\n        return this;\n    }\n\n    private connectToPaginator() {\n        this.paginatorSub = this.paginator.response$\n            .pipe(pairwise())\n            .subscribe(([prev, current]) => {\n                // append data instead of overriding with next page data (infinite scroll).\n                // if page did not change, we can assume that it was filter or sort\n                // change and we should use only new data, even on infinite scroll\n                const data =\n                    this.config.infiniteScroll &&\n                    prev?.pagination?.current_page !== current.pagination.current_page\n                        ? [...this.data$.value, ...current.pagination.data]\n                        : current.pagination.data;\n                this.data$.next(data);\n            });\n    }\n\n    private applyLocalTransforms(params: PaginationParams) {\n        let data = [...this.originalData$.value];\n        if (params.query) {\n            data = filterDatatableData<T>(data, params.query);\n        }\n        if (params.orderBy && params.orderDir) {\n            data = sortDatatableData<T>(data, params.orderBy, params.orderDir);\n        }\n        this.data$.next(data);\n    }\n\n    public addFilter(key: keyof DatatableFilters, value: DatatableFilterValue) {\n        this.filters$.next({\n            ...this.filters$.value,\n            [key]: value,\n        });\n    }\n\n    public removeFilter(key: keyof DatatableFilters) {\n        const filters = {...this.filters$.value};\n        delete filters[key];\n        this.filters$.next(filters);\n    }\n\n    public reset(staticParams: DatatableStaticParams = null) {\n        this.filters$.next({});\n        this.sort$.next({});\n        this.selectedRows$.next([]);\n        if (staticParams) {\n            this.staticParams$.next(staticParams);\n        }\n    }\n\n    public openCrupdateResourceModal(\n        cmp: ComponentType<any>,\n        data?: object,\n        config?: MatDialogConfig\n    ) {\n        return this.modal\n            .open(cmp, data, config)\n            .beforeClosed()\n            .pipe(\n                filter(modifiedResource => !!modifiedResource),\n                tap(() => this.reset())\n            );\n    }\n\n    public confirmResourceDeletion(resource: string) {\n        const data = {...DELETE_RESOURCE_MESSAGE, replacements: {resource}};\n        return this.modal\n            .open(ConfirmModalComponent, data)\n            .afterClosed()\n            .pipe(filter(confirmed => confirmed));\n    }\n\n    public getCurrentParams() {\n        return {\n            ...this.sort$.value,\n            ...this.filters$.value,\n            ...this.staticParams$.value,\n            ...this.paginator.params,\n        };\n    }\n\n    public destroy() {\n        this.paginatorSub?.unsubscribe();\n        this.mainSub?.unsubscribe();\n        this.searchControlSub?.unsubscribe();\n    }\n}\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\n\n@Component({\n    selector: '[table-body-checkbox]',\n    template: `\n        <mat-checkbox (click)=\"$event.stopPropagation()\"\n                      (change)=\"$event ? toggleRow(rowId) : null\"\n                      [checked]=\"isRowSelected(rowId)\">\n        </mat-checkbox>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'table-checkbox'}\n})\nexport class TableBodyCheckboxComponent implements OnInit, OnDestroy {\n    @Input('table-body-checkbox') rowId: number;\n    private changeRef: Subscription;\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit() {\n        this.changeRef = this.datatable.selectedRows$.subscribe(value => {\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.changeRef.unsubscribe();\n    }\n\n    public isRowSelected(id: number): boolean {\n        return this.datatable.selectedRows$.value.indexOf(id) > -1;\n    }\n\n    public toggleRow(id: number) {\n        if (this.isRowSelected(id)) {\n            const array = this.datatable.selectedRows$.value.slice();\n            const i = this.datatable.selectedRows$.value.indexOf(id);\n            array.splice(i, 1);\n            this.datatable.selectedRows$.next(array);\n        } else {\n            this.datatable.selectedRows$.next(\n                [...this.datatable.selectedRows$.value, id]\n            );\n        }\n    }\n}\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\n\n@Component({\n    selector: '[table-header-checkbox]',\n    template: `\n        <mat-checkbox\n            (change)=\"$event ? toggleAllRows() : null\"\n            [checked]=\"allRowsSelected()\"\n            [indeterminate]=\"anyRowsSelected() && ! allRowsSelected()\">\n        </mat-checkbox>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'table-checkbox'},\n})\nexport class TableHeaderCheckboxComponent implements OnInit, OnDestroy{\n    private changeRef: Subscription;\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit() {\n        this.changeRef = this.datatable.selectedRows$.subscribe(() => {\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.changeRef.unsubscribe();\n    }\n\n    public anyRowsSelected(): boolean {\n        return !!this.datatable.selectedRows$.value.length;\n    }\n\n    public allRowsSelected() {\n        return this.datatable.selectedRows$.value.length &&\n            this.datatable.selectedRows$.value.length === this.datatable.data$.value?.length;\n    }\n\n    public toggleAllRows() {\n        if (this.allRowsSelected()) {\n            this.datatable.selectedRows$.next([]);\n        } else {\n            this.datatable.selectedRows$.next(\n                this.datatable.data$.value.map(v => v.id)\n            );\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {filter} from 'rxjs/operators';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {slugifyString} from '../../core/utils/slugify-string';\n\n@Component({\n    selector: '[table-sort-header]',\n    templateUrl: './table-sort-header.component.html',\n    styleUrls: ['./table-sort-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        'tabindex': '0',\n        '(click)': 'handleClick()',\n        '(keydown)': 'handleKeydown($event)',\n        '(mouseenter)': 'onMouseEnter()',\n        '(mouseleave)': 'onMouseLeave()',\n    }\n})\nexport class TableSortHeaderComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChild('columnName', {static: true}) columnName: ElementRef<HTMLElement>;\n    @Input('table-sort-header') public orderBy: string;\n\n    @HostBinding('class.active')\n    public orderDir: 'desc'|'asc'|null = null;\n\n    @HostBinding('class.sort-disabled') get sortDisabled() {\n        return this.datable.config?.disableSort;\n    }\n\n    private sortSub: Subscription;\n    public arrowVisible = false;\n    public arrowDirection: 'down'|'up' = 'down';\n\n    constructor(\n        public datable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private el: ElementRef<HTMLElement>,\n    ) {}\n\n    ngOnInit() {\n        // get column name from <ng-content> if none is explicitly provided\n        if ( ! this.orderBy) {\n            this.orderBy = slugifyString(this.columnName.nativeElement.textContent, '_');\n        }\n\n        // hide arrow when sort column is changed to different column\n        this.sortSub = this.datable.sort$\n            .pipe(filter(sort => (sort.orderBy !== this.orderBy)))\n            .subscribe(() => {\n                this.orderDir = null;\n                this.onMouseLeave();\n                this.cd.markForCheck();\n            });\n    }\n\n    ngAfterViewInit() {\n        // add '.cdk-keyboard-focused' when tabbing to other sort headers\n        this.focusMonitor.monitor(this.el).subscribe();\n    }\n\n    ngOnDestroy() {\n        this.sortSub.unsubscribe();\n        this.focusMonitor.stopMonitoring(this.el);\n    }\n\n    public changeSort() {\n        this.datable.sort$.next({\n            orderBy: this.orderBy,\n            orderDir: this.getDirection(this.orderDir),\n        });\n    }\n\n    private getDirection(current: string) {\n        switch (current) {\n            case 'asc':\n                this.arrowVisible = false;\n                return this.orderDir = null;\n            case 'desc':\n                this.arrowVisible = true;\n                this.arrowDirection = 'up';\n                return this.orderDir = 'asc';\n            default:\n                this.arrowVisible = true;\n                this.arrowDirection = 'down';\n                return this.orderDir = 'desc';\n        }\n    }\n\n    public onMouseEnter() {\n        if ( ! this.datable.config?.disableSort) {\n            this.arrowVisible = true;\n        }\n    }\n\n    public onMouseLeave() {\n        this.arrowVisible = false;\n        if ( ! this.orderDir) {\n            this.arrowDirection = 'down';\n        }\n    }\n\n    public handleClick() {\n        if ( ! this.datable.config?.disableSort) {\n            this.changeSort();\n        }\n    }\n\n    public handleKeydown(e: KeyboardEvent) {\n        if ( !this.datable.config?.disableSort && (e.keyCode === SPACE || e.keyCode === ENTER)) {\n            e.preventDefault();\n            this.changeSort();\n        }\n    }\n}\n","<span class=\"text\" #columnName>\n    <ng-content></ng-content>\n</span>\n<span class=\"icon-wrapper\" [ngClass]=\"arrowDirection\">\n    <mat-icon svgIcon=\"arrow-downward\" class=\"sort-icon\" [class.hint-visible]=\"arrowVisible\"></mat-icon>\n</span>\n"],"sourceRoot":"webpack:///","file":"369.9048e11f8562024de9cf.js"}