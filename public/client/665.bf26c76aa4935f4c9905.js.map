{"version":3,"mappings":"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","names":["M","constructor","l","g","$","N","P","x","r","this","p","person","loading","credits","loadPerson","patchState","people","get","id","pipe","T","flattenCredits","createPerson","create","payload","updatePerson","update","getState","removeCredit","titles","filter","G","pivot","resetState","E","keys","forEach","push","t","factory","b","d","name","defaults","K","W","at","A","fb","group","poster","popularity","description","known_for","birth_place","birth_date","death_date","gender","allow_update","ngOnInit","datatable","init","route","params","subscribe","store","select","data","personForm","valueChanges","poster$","next","ngOnDestroy","dispatch","destroy","uploadPoster","R","types","j","then","uploadQueue","start","uri","httpParams","diskPrefix","patchValue","fileEntry","url","selectSnapshot","submit","value","router","navigate","includes","split","replace","toast","open","C","detachCredit","c","selectors","I","w","decls","D","path","component","permissions","B","O","nt","e","V","Z","q","k","tt","et","L","Y","m","_","y","Object","originX","originY","overlayX","overlayY","offsetX","H","i","close","overlayPanelRef","s","changeDetection","transform","super","pure","oxw","v","filters$","S","query","filterPanelRef","selectedRows$","numberOfRowsSelected","length","cd","markForCheck","subscriptions","unsubscribe","openFiltersPanel","offsetY","overlayPanel","origin","filterButton","position","mobilePosition","filters","filterPanelTemplate","maxWidth","nativeElement","classList","add","afterClosed","remove","isModel","u","U","a","o","h","response$","paginatedOnce$","pagination","params$","current_page","paginate","subscription","currentQueryParams","perPage","per_page","page","nextPage","cursor","next_cursor","previousPage","prev_cursor","changePerPage","perPageCacheKey","localStorage","set","routerState","root","snapshot","queryParams","loading$","http","updateQueryParams","dontUpdateQueryParams","Array","isArray","join","replaceUrl","canLoadNextPage","currentPage","last_page","canLoadPrevPage","title","body","ok","Number","Q","trim","toLowerCase","indexOf","reduce","data$","originalData$","ignoreNextParamChange","reset","config","staticParams$","staticParams","connectToPaginator","initialData","searchControl","setValue","searchTerm$","sort$","orderBy","orderDir","searchControlSub","mainSub","assign","entries","paginator","applyLocalTransforms","paginatorSub","infiniteScroll","sort","J","f","addFilter","removeFilter","openCrupdateResourceModal","modal","beforeClosed","confirmResourceDeletion","replacements","resource","getCurrentParams","datable","disableSort","columnName","textContent","sortSub","onMouseLeave","ngAfterViewInit","focusMonitor","monitor","el","stopMonitoring","changeSort","getDirection","arrowVisible","arrowDirection","onMouseEnter","handleClick","handleKeydown","keyCode","preventDefault"],"sources":["./src/app/site/people/crupdate-person/state/crupdate-person-state-actions.ts","./src/app/models/person.ts","./src/app/site/people/crupdate-person/state/crupdate-person-state.ts","./src/app/site/people/crupdate-person/crupdate-person-page.component.html","./src/app/site/people/crupdate-person/crupdate-person-page.component.ts","./src/app/site/people/crupdate-person/crupdate-person-routing.module.ts","./src/app/site/people/crupdate-person/crupdate-person.module.ts","./src/common/core/utils/remove-null-from-object.ts","./src/common/core/ui/overlay-panel/positions/left-position.ts","./src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.html","./src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.ts","./src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.html","./src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.ts","./src/common/core/ui/format-pipes/title-case.pipe.ts","./src/common/datatable/datatable-header/datatable-header.component.html","./src/common/datatable/datatable-header/datatable-header.component.ts","./src/common/datatable/datatable-filters/search-input-with-filters/search-input-with-filters.module.ts","./src/common/datatable/datatable.module.ts","./src/common/shared/paginator.service.ts","./src/common/datatable/delete-resource-message.ts","./src/common/datatable/utils/sort-datatable-data.ts","./src/common/datatable/utils/filter-datatable-data.ts","./src/common/datatable/datatable.service.ts","./src/common/datatable/table-sort-header/table-sort-header.component.ts","./src/common/datatable/table-sort-header/table-sort-header.component.html"],"sourcesContent":["import {Person} from '../../../../models/person';\n\nexport class LoadPerson {\n    static readonly type = '[CrupdatePerson] Load Person';\n    constructor(public id: number) {}\n}\n\nexport class DetachCredit {\n    static readonly type = '[CrupdatePerson] Detach Credit';\n    constructor(public id: number) {}\n}\n\nexport class CreatePerson {\n    static readonly type = '[CrupdatePerson] Create Person';\n    constructor(public payload: Partial<Person>) {}\n}\n\nexport class UpdatePerson {\n    static readonly type = '[CrupdatePerson] Update Person';\n    constructor(public payload: Partial<Person>) {}\n}\n\nexport class ResetState {\n    static readonly type = '[CrupdatePerson] Reset State';\n}\n","import {MEDIA_TYPE} from '../site/media-type';\nimport {Title} from './title';\n\nexport class Person {\n    id: number;\n    name: string;\n    poster: string;\n    known_for?: string;\n    gender?: string;\n    birth_date: string;\n    death_date: string;\n    birth_place: string;\n    credits?: Title[];\n    popular_credits?: Title[];\n    views?: number;\n    popularity?: number;\n    updated_at?: string;\n    description: string;\n    model_type: MEDIA_TYPE.PERSON;\n\n    constructor(params: object = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n    }\n}\n","import {Action, Selector, State, StateContext} from '@ngxs/store';\nimport {Person} from '../../../../models/person';\nimport {finalize, tap} from 'rxjs/operators';\nimport {\n    CreatePerson,\n    DetachCredit,\n    LoadPerson,\n    ResetState,\n    UpdatePerson\n} from './crupdate-person-state-actions';\nimport {PeopleService} from '../../people.service';\nimport {TitleCredit} from '../../../../models/title';\nimport {TitlesService} from '../../../titles/titles.service';\nimport {Injectable} from '@angular/core';\n\ninterface CrupdatePersonStateModel {\n    person: Person;\n    credits: TitleCredit[];\n    loading: boolean;\n}\n\n@State<CrupdatePersonStateModel>({\n    name: 'crupdatePerson',\n    defaults: {\n        person: new Person(),\n        credits: [],\n        loading: false,\n    },\n})\n@Injectable()\nexport class CrupdatePersonState {\n    @Selector()\n    static person(state: CrupdatePersonStateModel) {\n        return state.person;\n    }\n\n    @Selector()\n    static loading(state: CrupdatePersonStateModel) {\n        return state.loading;\n    }\n\n    @Selector()\n    static credits(state: CrupdatePersonStateModel) {\n        return state.credits;\n    }\n\n    constructor(\n        private people: PeopleService,\n        private titles: TitlesService,\n    ) {}\n\n    @Action(LoadPerson)\n    loadPerson(ctx: StateContext<CrupdatePersonStateModel>, action: LoadPerson) {\n        ctx.patchState({loading: true});\n        return this.people.get(action.id).pipe(tap(response => {\n            ctx.patchState({\n                person: response.person,\n                credits: this.flattenCredits(response.credits),\n                loading: false\n            });\n        }));\n    }\n\n    @Action(CreatePerson)\n    createPerson(ctx: StateContext<CrupdatePersonStateModel>, action: CreatePerson) {\n        ctx.patchState({loading: true});\n        return this.people.create(action.payload).pipe(\n            finalize(() => ctx.patchState({loading: false})),\n            tap(response => ctx.patchState({person: response.person}))\n        );\n    }\n\n    @Action(UpdatePerson)\n    updatePerson(ctx: StateContext<CrupdatePersonStateModel>, action: UpdatePerson) {\n        ctx.patchState({loading: true});\n        return this.people.update(ctx.getState().person.id, action.payload).pipe(\n            finalize(() => ctx.patchState({loading: false})),\n            tap(response => ctx.patchState({person: response.person}))\n        );\n    }\n\n    @Action(DetachCredit)\n    removeCredit(ctx: StateContext<CrupdatePersonStateModel>, action: DetachCredit) {\n        ctx.patchState({loading: true});\n        return this.titles.removeCredit(action.id).pipe(\n            tap(() => {\n                const newCredits = ctx.getState().credits.filter(credit => {\n                    return credit.pivot.id !== action.id;\n                });\n                ctx.patchState({credits: newCredits});\n            }),\n            finalize(() => ctx.patchState({loading: false}))\n        );\n    }\n\n    @Action(ResetState)\n    resetState(ctx: StateContext<CrupdatePersonStateModel>) {\n        ctx.patchState({\n            person: new Person(),\n            credits: [],\n            loading: false,\n        });\n    }\n\n    private flattenCredits(credits: object) {\n        const flatCredits = [];\n        Object.keys(credits).forEach(key => {\n            flatCredits.push(...credits[key]);\n        });\n        return flatCredits;\n    }\n}\n","<mat-tab-group animationDuration=\"0ms\" class=\"material-panel\" color=\"accent\">\n    <mat-tab [label]=\"'Primary Facts' | trans\">\n        <form class=\"primary-facts-panel\" (ngSubmit)=\"submit()\" [formGroup]=\"personForm\" ngNativeValidate>\n            <div class=\"left-col\">\n                <media-image [src]=\"poster$ | async\" size=\"medium\"></media-image>\n                <button type=\"submit\" mat-raised-button color=\"accent\" class=\"submit-button\" trans>Save</button>\n            </div>\n            <div class=\"right-col many-inputs\">\n                <div class=\"inline-container many-inputs\">\n                    <div class=\"input-container\">\n                        <label for=\"name\" trans>Name</label>\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"known_for\" trans>Known For</label>\n                        <input type=\"text\" formControlName=\"known_for\" id=\"known_for\">\n                    </div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label for=\"poster\" trans>Image</label>\n                    <div class=\"input-with-action action-left\">\n                        <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\" [matTooltip]=\"'Upload poster' | trans\">\n                            <mat-icon svgIcon=\"file-upload\"></mat-icon>\n                        </button>\n                        <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\n                    </div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label for=\"description\" trans>Biography</label>\n                    <textarea id=\"description\" formControlName=\"description\" cdkTextareaAutosize cdkAutosizeMinRows=\"10\" cdkAutosizeMaxRows=\"100\"></textarea>\n                </div>\n\n                <div class=\"inline-container many-inputs\">\n                    <div class=\"input-container\">\n                        <label for=\"gender\" trans>Gender</label>\n                        <select id=\"gender\" formControlName=\"gender\">\n                            <option [ngValue]=\"null\">-</option>\n                            <option value=\"male\" trans>Male</option>\n                            <option value=\"female\" trans>Female</option>\n                        </select>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"birth_date\" trans>Birth Date</label>\n                        <input type=\"date\" id=\"birth_date\" formControlName=\"birth_date\">\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"death_date\" trans>Death Date</label>\n                        <input type=\"date\" id=\"death_date\" formControlName=\"death_date\">\n                    </div>\n                </div>\n\n                <div class=\"inline-container many-inputs\">\n                    <div class=\"input-container\">\n                        <label for=\"popularity\" trans>Popularity</label>\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" step=\"0.1\">\n                    </div>\n\n                    <div class=\"input-container\">\n                        <label for=\"birth_place\" trans>Birth Place</label>\n                        <input type=\"text\" id=\"birth_place\" formControlName=\"birth_place\">\n                    </div>\n\n                    <div class=\"input-container\">\n                        <label for=\"allow_update\" trans>Allow Auto Update</label>\n                        <select formControlName=\"allow_update\" id=\"allow_update\" required>\n                            <option [ngValue]=\"true\" trans>Yes</option>\n                            <option [ngValue]=\"false\" trans>No</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </mat-tab>\n    <mat-tab [label]=\"'Credits' | trans\">\n        <div class=\"responsive-table\">\n            <datatable-header></datatable-header>\n            <table class=\"material-table\">\n                <thead>\n                <tr>\n                    <th table-sort-header=\"name\" trans>Credit</th>\n                    <th table-sort-header=\"pivot.character\" trans>Character</th>\n                    <th table-sort-header=\"pivot.department\" trans>Department</th>\n                    <th table-sort-header=\"pivot.job\" trans>Job</th>\n                    <th></th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let credit of datatable.data$ | async\">\n                    <td>\n                        <div class=\"column-with-image\">\n                            <media-image [src]=\"credit.poster\" size=\"small\"></media-image>\n                            <span>{{credit.name}}</span>\n                        </div>\n                    </td>\n                    <td data-label=\"Character\" class=\"capitalize\">{{credit.pivot?.character ? credit.pivot.character : '-'}}</td>\n                    <td data-label=\"Department\" class=\"capitalize\">{{credit.pivot?.department ? credit.pivot.department : '-'}} </td>\n                    <td data-label=\"Job\" class=\"capitalize\">{{credit.pivot?.job ? credit.pivot.job : '-'}}</td>\n                    <td class=\"edit-column\">\n                        <button type=\"button\" mat-icon-button (click)=\"detachCredit(credit)\">\n                            <mat-icon svgIcon=\"close\"></mat-icon>\n                        </button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n\n            <no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\n                <span primary-text trans>Nothing to display.</span>\n            </no-results-message>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {Select, Store} from '@ngxs/store';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {\n    CreatePerson,\n    DetachCredit,\n    LoadPerson,\n    ResetState,\n    UpdatePerson\n} from './state/crupdate-person-state-actions';\nimport {CrupdatePersonState} from './state/crupdate-person-state';\nimport {FormBuilder} from '@angular/forms';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {TitleCredit} from '../../../models/title';\nimport {MESSAGES} from '../../../toast-messages';\nimport {UploadQueueService} from '../../../../common/uploads/upload-queue/upload-queue.service';\nimport {Toast} from '../../../../common/core/ui/toast.service';\nimport {openUploadWindow} from '../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../common/uploads/upload-input-config';\nimport {DatatableService} from '../../../../common/datatable/datatable.service';\n\n@Component({\n    selector: 'crupdate-person-page',\n    templateUrl: './crupdate-person-page.component.html',\n    styleUrls: ['./crupdate-person-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        UploadQueueService,\n        DatatableService,\n    ],\n})\nexport class CrupdatePersonPageComponent implements OnInit, OnDestroy {\n    @Select(CrupdatePersonState.loading) loading$: Observable<boolean>;\n    @Select(CrupdatePersonState.credits) credits$: Observable<TitleCredit[]>;\n    public poster$ = new BehaviorSubject<string>(null);\n\n    public personForm = this.fb.group({\n        name: [''],\n        poster: [''],\n        popularity: [''],\n        description: [''],\n        known_for: [''],\n        birth_place: [''],\n        birth_date: [''],\n        death_date: [''],\n        gender: [null],\n        allow_update: [true],\n    });\n\n    constructor(\n        private store: Store,\n        private toast: Toast,\n        private router: Router,\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private uploadQueue: UploadQueueService,\n        public datatable: DatatableService<TitleCredit>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n        this.route.params.subscribe(params => {\n            this.loadPerson(params);\n        });\n\n        this.store.select(CrupdatePersonState.credits).subscribe(credits => {\n            this.datatable.data = credits;\n        });\n\n        this.personForm.get('poster').valueChanges.subscribe(value => {\n            this.poster$.next(value);\n        });\n    }\n\n    ngOnDestroy() {\n        this.store.dispatch(new ResetState());\n        this.datatable.destroy();\n    }\n\n    public uploadPoster() {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                uri: 'uploads/images',\n                httpParams: {\n                    diskPrefix: 'media-images/posters'\n                },\n            };\n            this.uploadQueue.start(upload, params).subscribe(response => {\n                this.personForm.patchValue({\n                    poster: response.fileEntry.url\n                });\n            });\n        });\n    }\n\n    private loadPerson(params: {id?: string}) {\n        if ( ! params.id) return;\n        this.store.dispatch(new LoadPerson(+params.id)).subscribe(() => {\n            const person = this.store.selectSnapshot(CrupdatePersonState.person);\n            this.personForm.patchValue(person);\n            this.poster$.next(person.poster);\n        });\n    }\n\n    public submit() {\n        const person = this.store.selectSnapshot(CrupdatePersonState.person);\n        const response = person.id ?\n            this.store.dispatch(new UpdatePerson(this.personForm.value)) :\n            this.store.dispatch(new CreatePerson(this.personForm.value));\n\n        response.subscribe(() => {\n            this.router.navigate([this.router.url.includes('admin') ? 'admin/people' : this.router.url.split('?')[0].replace('/edit', '')]);\n            this.toast.open(person.id ? MESSAGES.PERSON_UPDATE_SUCCESS : MESSAGES.PERSON_CREATE_SUCCESS);\n        });\n    }\n\n    public detachCredit(credit: TitleCredit) {\n        if ( ! credit.pivot) return;\n        this.store.dispatch(new DetachCredit(credit.pivot.id))\n            .subscribe(() => {\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\n            });\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrupdatePersonPageComponent,\n        data: {permissions: ['people.update']}\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CrupdatePersonRoutingModule { }\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdatePersonRoutingModule} from './crupdate-person-routing.module';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {NgxsModule} from '@ngxs/store';\nimport {CrupdatePersonState} from './state/crupdate-person-state';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\n\n\n@NgModule({\n    declarations: [\n        CrupdatePersonPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdatePersonRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MediaImageModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n        DatatableModule,\n\n        NgxsModule.forFeature([\n            CrupdatePersonState\n        ]),\n\n        // material\n        MatTabsModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        TextFieldModule,\n    ]\n})\nexport class CrupdatePersonModule {\n}\n","export function removeNullFromObject<T>(obj: T): T {\n    const copy = {...obj};\n    Object.keys(copy).forEach(key => {\n        if (copy[key] == null || copy[key] === '') {\n            delete copy[key];\n        }\n    });\n    return copy;\n}\n","import { ConnectedPosition } from '@angular/cdk/overlay';\n\nexport const LEFT_POSITION: ConnectedPosition[] = [\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 50},\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 50},\n];\n","<header>\n    <mat-icon svgIcon=\"filter-list\"></mat-icon>\n    <span trans>Filters</span>\n</header>\n\n<form class=\"body\" (ngSubmit)=\"close()\">\n    <ng-container *ngTemplateOutlet=\"data.filters\"></ng-container>\n</form>\n\n<footer>\n    <button (click)=\"close()\" type=\"button\" mat-button color=\"accent\" trans>Close</button>\n</footer>\n","import {ChangeDetectionStrategy, Component, ElementRef, Inject, TemplateRef} from '@angular/core';\nimport {OVERLAY_PANEL_DATA} from '../../core/ui/overlay-panel/overlay-panel-data';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {matDialogAnimations} from '@angular/material/dialog';\n\n@Component({\n    selector: 'datatable-filters-panel',\n    templateUrl: './datatable-filters-panel.component.html',\n    styleUrls: ['./datatable-filters-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[@dialogContainer]': `'enter'`\n    },\n    animations: [\n        matDialogAnimations.dialogContainer,\n    ]\n})\nexport class DatatableFiltersPanelComponent {\n\n    constructor(\n        @Inject(OVERLAY_PANEL_DATA) public data: {filters: TemplateRef<ElementRef>},\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n}\n","<div class=\"input-container search-input-container\">\n    <input type=\"text\" class=\"search-input\" [placeholder]=\"placeholder | trans\" [formControl]=\"datatable.searchControl\">\n    <mat-icon svgIcon=\"search\" *ngIf=\"!hideIcon\"></mat-icon>\n</div>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {DatatableService} from '../../datatable.service';\nimport {Model} from '@common/core/types/models/model';\n\n@Component({\n    selector: 'datatable-header-search-input',\n    templateUrl: './datatable-header-search-input.component.html',\n    styleUrls: ['./datatable-header-search-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderSearchInputComponent {\n    @Input() placeholder: string;\n    @Input() hideIcon = false;\n\n    constructor(\n        public datatable: DatatableService<Model>,\n    ) {}\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {TitleCasePipe as AngularTitleCasePipe} from '@angular/common';\n\n@Pipe({\n    name: 'titleCase',\n    pure: true,\n})\nexport class TitleCasePipe extends AngularTitleCasePipe implements PipeTransform {\n    transform(value: string): string;\n    transform(value: null|undefined): null;\n    transform(value: string|null|undefined): string|null;\n    transform(value: string | null | undefined): string | null {\n        if ( ! value) {\n            return '';\n        }\n        return super.transform(value.replace('-', ' ').replace('_', ' '));\n    }\n}\n","<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"datatable.paginator && datatable.paginator.loading$ | async\"></mat-progress-bar>\n<div class=\"left-column\">\n    <div class=\"default-left-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-content select=\"[leftContent]\"></ng-content>\n    </div>\n    <div class=\"selected-left-content capitalize\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        {{ ':count :resource selected' | trans:{count: numberOfRowsSelected, resource: pluralResourceName} }}\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"default-right-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-container *ngIf=\"filterPanelTemplate\">\n            <mat-chip-list aria-label=\"Active Filters\" class=\"filter-chip-list\">\n                <mat-chip *ngFor=\"let filter of filters$ | async | keyvalue\" [removable]=\"true\" [selectable]=\"false\" (removed)=\"datatable.removeFilter(filter.key)\">\n                    {{filter.key | titleCase | trans}}: {{isModel(filter.value) ? (filter.value.name || filter.value.display_name) : filter.value}}\n                    <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\n                </mat-chip>\n            </mat-chip-list>\n            <button (click)=\"openFiltersPanel()\" class=\"filter-button\" [class.active]=\"filterPanelRef\" #filterButton mat-icon-button>\n                <mat-icon svgIcon=\"filter-list\"></mat-icon>\n            </button>\n        </ng-container>\n        <datatable-header-search-input placeholder=\"Search {{ pluralResourceName }}\"></datatable-header-search-input>\n    </div>\n    <div class=\"selected-right-actions\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        <ng-content select=\"[rightContent]\"></ng-content>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Model} from '../../core/types/models/model';\nimport {Subscription} from 'rxjs';\nimport {OverlayPanel} from '../../core/ui/overlay-panel/overlay-panel.service';\nimport {LEFT_POSITION} from '../../core/ui/overlay-panel/positions/left-position';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {DatatableFiltersPanelComponent} from '../datatable-filters-panel/datatable-filters-panel.component';\nimport {map} from 'rxjs/operators';\nimport {removeNullFromObject} from '../../core/utils/remove-null-from-object';\nimport {DatatableFilterValue} from '../types/datatable-filters';\n\n@Component({\n    selector: 'datatable-header',\n    templateUrl: './datatable-header.component.html',\n    styleUrls: ['./datatable-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderComponent implements OnInit, OnDestroy {\n    @HostBinding('class.rows-selected') public numberOfRowsSelected: number;\n    @ContentChild('tableFilters') filterPanelTemplate: TemplateRef<ElementRef>;\n    @ViewChild('filterButton', { read: ElementRef }) filterButton: ElementRef<HTMLButtonElement>;\n    @Input() pluralResourceName: string;\n    @Input() showSelectedActions = true;\n    private subscriptions: Subscription[] = [];\n    public filterPanelRef: OverlayPanelRef<any>;\n\n    public filters$ = this.datatable.filters$\n        .pipe(map(v => {\n            const filters = removeNullFromObject(v);\n            delete filters.query;\n            return filters;\n        }));\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    ngOnInit() {\n        // close filter panel when any filter is selected.\n        const filterSub = this.datatable.filters$.subscribe(() => {\n            this.filterPanelRef && this.filterPanelRef.close();\n        });\n        const changeSub = this.datatable.selectedRows$.subscribe(value => {\n            this.numberOfRowsSelected = value.length;\n            this.cd.markForCheck();\n        });\n        this.subscriptions = [filterSub, changeSub];\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    public openFiltersPanel() {\n        if (this.filterPanelRef) {\n            this.filterPanelRef.close();\n        } else {\n            const position = LEFT_POSITION.slice();\n            position[0].offsetY = 40;\n            position[1].offsetY = 40;\n            this.filterPanelRef = this.overlayPanel.open(DatatableFiltersPanelComponent, {\n                origin: this.filterButton,\n                position,\n                mobilePosition: 'center',\n                data: {filters: this.filterPanelTemplate},\n                maxWidth: '90%',\n            });\n            this.filterButton.nativeElement.classList.add('active');\n            this.filterPanelRef.afterClosed().subscribe(() => {\n                this.filterPanelRef = null;\n                this.filterButton.nativeElement.classList.remove('active');\n            });\n        }\n    }\n\n    public isModel(value: DatatableFilterValue) {\n        return typeof value === 'object' && value.id;\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SearchInputWithFiltersComponent} from './search-input-with-filters.component';\nimport {ActiveFiltersComponent} from './active-filters/active-filters.component';\nimport {ActiveFilterComponent} from './active-filters/active-filter/active-filter.component';\nimport {OperatorSelectComponent} from './active-filters/operator-select/operator-select.component';\nimport {FilterSuggestionsComponent} from './filter-suggestions/filter-suggestions.component';\nimport {OperatorDisplayNamePipe} from './active-filters/operator-select/operator-display-name.pipe';\nimport {SelectModelControlComponent} from './active-filters/select-model-control/select-model-control.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SelectModelDialogComponent} from '@common/datatable/datatable-filters/select-model-dialog/select-model-dialog.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n@NgModule({\n    declarations: [\n        SearchInputWithFiltersComponent,\n        ActiveFiltersComponent,\n        ActiveFilterComponent,\n        OperatorSelectComponent,\n        FilterSuggestionsComponent,\n        OperatorDisplayNamePipe,\n        SelectModelControlComponent,\n        SelectModelDialogComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [SearchInputWithFiltersComponent],\n})\nexport class SearchInputWithFiltersModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TableSortHeaderComponent} from './table-sort-header/table-sort-header.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslationsModule} from '../core/translations/translations.module';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {UserColumnComponent} from './columns/user-column/user-column.component';\nimport {TableBodyCheckboxComponent} from './selection/table-body-checkbox.component';\nimport {TableHeaderCheckboxComponent} from './selection/table-header-checkbox.component';\nimport {DatatableFooterComponent} from './datatable-footer/datatable-footer.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DatatableHeaderComponent} from './datatable-header/datatable-header.component';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {DatatableFiltersPanelComponent} from './datatable-filters-panel/datatable-filters-panel.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {ChipsModule} from '../core/ui/chips/chips.module';\nimport {DatatableHeaderSearchInputComponent} from './datatable-header/datatable-header-search-input/datatable-header-search-input.component';\nimport {NoResultsMessageModule} from '../core/ui/no-results-message/no-results-message.module';\nimport {NoResultsMessageComponent} from '../core/ui/no-results-message/no-results-message.component';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {DatatableFiltersComponent} from '@common/datatable/datatable-filters/datatable-filters.component';\nimport {DatatablePageHeaderComponent} from '@common/datatable/datatable-page-header/datatable-page-header.component';\nimport {SearchInputWithFiltersModule} from './datatable-filters/search-input-with-filters/search-input-with-filters.module';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n    declarations: [\n        TableSortHeaderComponent,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableHeaderSearchInputComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n        DatatableFiltersComponent,\n        DatatablePageHeaderComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ChipsModule,\n        NoResultsMessageModule,\n        FormatPipesModule,\n        SearchInputWithFiltersModule,\n        RouterModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatProgressBarModule,\n    ],\n    exports: [\n        TableSortHeaderComponent,\n        MatCheckboxModule,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n        NoResultsMessageComponent,\n        DatatableFiltersComponent,\n        DatatablePageHeaderComponent,\n    ],\n})\nexport class DatatableModule {}\n","import {Params, Router} from '@angular/router';\nimport {BehaviorSubject, of, Subscription} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\nimport {Injectable} from '@angular/core';\nimport {LocalStorage} from '@common/core/services/local-storage.service';\n\n@Injectable()\nexport class Paginator<T> {\n    private subscription: Subscription;\n    private params$ = new BehaviorSubject<PaginationParams>({});\n    public paginatedOnce$ = new BehaviorSubject<boolean>(false);\n    public loading$ = new BehaviorSubject(false);\n    public response$ = new BehaviorSubject<{pagination: PaginationResponse<T>, [key: string]: any}>(null);\n    public dontUpdateQueryParams = false;\n    public perPageCacheKey: string = null;\n    /** only true if data was already loaded from backend and it was empty */\n    public noResults$ = this.response$.pipe(map(r => this.paginatedOnce$.value && r.pagination.data.length === 0));\n\n    get params(): PaginationParams {\n        return this.params$.value;\n    }\n\n    get currentPage(): number {\n        return this.response$.value?.pagination?.current_page;\n    }\n\n    constructor(\n        private router: Router,\n        private http: AppHttpClient,\n        private localStorage?: LocalStorage,\n    ) {}\n\n    public paginate(userParams: object = {}, url?: string, initialData?: PaginationResponse<T>) {\n        // only use query params on first pagination, so query params can be removed via user params\n        const queryParams = !this.subscription ? this.currentQueryParams() : {};\n        const paginationParams = this.response$.value ? {\n            perPage: this.response$.value.pagination.per_page,\n            page: this.response$.value.pagination.current_page\n        } : {};\n        this.params$.next({...paginationParams, ...queryParams, ...userParams});\n\n        if ( ! this.subscription) {\n            this.init(url, initialData);\n        }\n    }\n\n    public nextPage() {\n        const current = this.response$.value.pagination.current_page || 0;\n        this.paginate({\n            ...this.params$.value,\n            page: current + 1,\n            cursor: this.response$.value.pagination.next_cursor,\n        });\n    }\n\n    public previousPage() {\n        const current = this.response$.value.pagination.current_page;\n        this.paginate({\n            ...this.params$.value,\n            page: (current - 1) || 1,\n            cursor: this.response$.value.pagination.prev_cursor,\n        });\n    }\n\n    public changePerPage(newPerPage: number) {\n        if (newPerPage !== this.params$.value?.perPage) {\n            if (this.perPageCacheKey) {\n                this.localStorage.set(this.perPageCacheKey, newPerPage);\n            }\n            this.paginate({\n                ...this.params$.value,\n                perPage: newPerPage\n            });\n        }\n    }\n\n    public currentQueryParams(): Params {\n        return this.router.routerState.root.snapshot.queryParams;\n    }\n\n    private init(uri: string, initialData?: PaginationResponse<T>) {\n        this.subscription = this.params$.pipe(\n            switchMap(params => {\n                this.loading$.next(true);\n                const firstPagination = !this.paginatedOnce$.value;\n                if (firstPagination && this.perPageCacheKey && this.localStorage.get(this.perPageCacheKey)) {\n                    params = {perPage: this.localStorage.get(this.perPageCacheKey), ...params};\n                }\n\n                // if we got initial pagination response (of 1st page)\n                // return that instead of making 1st page http request\n                const request = firstPagination && initialData ?\n                    of({pagination: initialData}) :\n                    this.http.get(uri, params);\n\n                return (request as PaginatedBackendResponse<T>).pipe(\n                    // can't use \"finalize\" here as it will complete after loading$.next(true)\n                    // call above, which will prevent loading bar from showing\n                    // if pagination request is cancelled and new one is queued\n                    tap(() => {\n                        this.updateQueryParams(params);\n                        this.loading$.next(false);\n                        this.paginatedOnce$.next(true);\n                    }, () => {\n                        this.loading$.next(false);\n                        this.paginatedOnce$.next(true);\n                    })\n                ) as PaginatedBackendResponse<T>;\n            })\n        ).subscribe(response => {\n            this.response$.next(response);\n        });\n    }\n\n    private updateQueryParams(params = {}) {\n        if (this.dontUpdateQueryParams) return;\n        for (const key in params) {\n            if (Array.isArray(params[key])) {\n                params[key] = params[key].join(',');\n            }\n        }\n        this.router.navigate([], {queryParams: params, replaceUrl: true});\n    }\n\n    public canLoadNextPage(): boolean {\n        const data = this.response$.value?.pagination;\n        if (data) {\n            return !!data.next_cursor || (this.currentPage < data.last_page);\n        }\n        return false;\n    }\n\n    public canLoadPrevPage(): boolean {\n        const data = this.response$.value?.pagination;\n        if (data) {\n            return !!data.prev_cursor || (this.currentPage > 1);\n        }\n        return false;\n    }\n}\n","import {ConfirmModalData} from '../core/ui/confirm-modal/confirm-modal.component';\n\nexport const DELETE_RESOURCE_MESSAGE: ConfirmModalData = {\n    title: `Delete :resource`,\n    body:  `Are you sure you want to delete selected :resource?`,\n    ok:    'Delete'\n};\n","import * as Dot from \"dot-object\";\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {Model} from '@common/core/types/models/model';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\nexport function sortDatatableData<T extends Model>(data: T[], orderBy: string, orderDir: string): T[] {\n    return data.sort((a, b) => {\n        let valueA = sortingDataAccessor(a, orderBy);\n        let valueB = sortingDataAccessor(b, orderBy);\n\n        // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n        const valueAType = typeof valueA;\n        const valueBType = typeof valueB;\n\n        if (valueAType !== valueBType) {\n            if (valueAType === 'number') {\n                valueA += '';\n            }\n            if (valueBType === 'number') {\n                valueB += '';\n            }\n        }\n\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n        let comparatorResult = 0;\n        if (valueA != null && valueB != null) {\n            // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n            if (valueA > valueB) {\n                comparatorResult = 1;\n            } else if (valueA < valueB) {\n                comparatorResult = -1;\n            }\n        } else if (valueA != null) {\n            comparatorResult = 1;\n        } else if (valueB != null) {\n            comparatorResult = -1;\n        }\n\n        return comparatorResult * (orderDir === 'asc' ? 1 : -1);\n    });\n}\n\n/**\n * Data accessor function that is used for accessing data properties for sorting through\n * the default sortData function.\n * This default function assumes that the sort header IDs (which defaults to the column name)\n * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n * May be set to a custom function for different behavior.\n */\nfunction sortingDataAccessor(data: object, sortHeaderId: string): string {\n    const value = Dot.pick(sortHeaderId, data);\n\n    if (_isNumberValue(value)) {\n        const numberValue = Number(value);\n\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    // if (Array.isArray(value)) {\n    //     return value.reduce((prev, curr) => prev += objectToStr(curr));\n    // }\n\n    return value;\n}\n","export function filterDatatableData<T = object>(data: T[], filter: string): T[] {\n    return data.filter(obj => filterPredicate(obj as any, filter));\n}\n/**\n * Checks if a data object matches the data source's filter string. By default, each data object\n * is converted to a string of its properties and returns true if the filter has\n * at least one occurrence in that string. By default, the filter string has its whitespace\n * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n * filter matching.\n * @param data Data object used to check against the filter.\n * @param filter Filter string that has been set on the data source.\n * @returns Whether the filter matches against the data\n */\nfunction filterPredicate(data: object|string, filter: string): boolean {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = typeof data === 'string' ? data : objectToStr(data);\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) !== -1;\n}\n\nexport function objectToStr(obj: object) {\n    return Object.keys(obj).reduce((currentTerm: string, key: string) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        const term = (obj[key] && typeof obj[key] === 'object') ?\n            objectToStr(obj[key]) :\n            obj[key];\n        return currentTerm + term + '◬';\n    }, '').toLowerCase();\n}\n","import {Injectable} from '@angular/core';\nimport {\n    animationFrameScheduler,\n    BehaviorSubject,\n    combineLatest,\n    Subscription,\n} from 'rxjs';\nimport {Paginator} from '../shared/paginator.service';\nimport {debounceTime, filter, map, pairwise, tap} from 'rxjs/operators';\nimport {DatatableFilters, DatatableFilterValue} from './types/datatable-filters';\nimport {DatatableSort} from './types/datatable-sort';\nimport {PaginationParams} from '../core/types/pagination/pagination-params';\nimport {removeNullFromObject} from '../core/utils/remove-null-from-object';\nimport {ComponentType} from '@angular/cdk/portal';\nimport {MatDialogConfig} from '@angular/material/dialog';\nimport {Modal} from '../core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '../core/ui/confirm-modal/confirm-modal.component';\nimport {DELETE_RESOURCE_MESSAGE} from './delete-resource-message';\nimport {PaginationResponse} from '../core/types/pagination/pagination-response';\nimport {sortDatatableData} from '@common/datatable/utils/sort-datatable-data';\nimport {Model} from '@common/core/types/models/model';\nimport {filterDatatableData} from '@common/datatable/utils/filter-datatable-data';\nimport {Router} from '@angular/router';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {LocalStorage} from '../core/services/local-storage.service';\nimport {FormControl} from '@angular/forms';\n\nexport type DatatableStaticParams = Record<string, string | number | boolean | string[]>;\n\ninterface DatatableConfig<T> {\n    uri?: string;\n    staticParams?: DatatableStaticParams;\n    initialData?: PaginationResponse<T> | T[];\n    disableSort?: boolean;\n    infiniteScroll?: boolean;\n}\n\n@Injectable()\nexport class DatatableService<T extends Model> {\n    public sort$ = new BehaviorSubject<DatatableSort>({});\n    public filters$ = new BehaviorSubject<DatatableFilters>({});\n    public searchControl = new FormControl();\n    public searchTerm$ = new BehaviorSubject<string>(null);\n    public staticParams$ = new BehaviorSubject<DatatableStaticParams>({});\n    public paginator = new Paginator<T>(this.router, this.http, this.localStorage);\n    private paginatorSub: Subscription;\n    private mainSub: Subscription;\n    private searchControlSub: Subscription;\n    private ignoreNextParamChange = false;\n    private originalData$ = new BehaviorSubject<T[]>([]);\n    public data$ = new BehaviorSubject<T[]>([]);\n    public selectedRows$ = new BehaviorSubject<number[]>([]);\n    public config: DatatableConfig<T>;\n\n    constructor(\n        protected modal: Modal,\n        protected router: Router,\n        protected http: AppHttpClient,\n        protected localStorage: LocalStorage\n    ) {}\n\n    get data() {\n        return this.data$.value;\n    }\n\n    set data(data: T[]) {\n        const tableData = [...data];\n        this.originalData$.next(tableData);\n        this.data$.next(tableData);\n\n        // Reset filters and sort without trigger data reload via pagination\n        this.ignoreNextParamChange = true;\n        this.reset();\n    }\n\n    public init(config: DatatableConfig<T> = {}) {\n        // TODO: don't add static params to current url query params\n\n        this.config = config;\n        this.staticParams$.next({\n            ...this.staticParams$.value,\n            ...config.staticParams,\n        });\n        if (config.uri) {\n            this.connectToPaginator();\n        } else if (config.initialData) {\n            this.data = config.initialData as T[];\n        }\n\n        // set search term from queryParams\n        if (config.uri) {\n            const qp = this.router.routerState.root.snapshot.queryParams;\n            const initialSearchTerm = qp.query as string;\n            this.searchControl.setValue(initialSearchTerm);\n            this.searchTerm$.next(initialSearchTerm);\n            this.sort$.next({\n                orderBy: qp.orderBy,\n                orderDir: qp.orderDir,\n            });\n        }\n        this.searchControlSub = this.searchControl.valueChanges\n            .pipe(debounceTime(300))\n            .subscribe(value => {\n                this.searchTerm$.next(value);\n            });\n\n        this.mainSub = combineLatest([\n            this.sort$,\n            this.filters$,\n            this.searchTerm$.pipe(\n                map(query => {\n                    return {query};\n                })\n            ),\n            // static params needs to be last, so it can override all the other params\n            this.staticParams$,\n        ])\n            .pipe(\n                debounceTime(0, animationFrameScheduler),\n                map(params => Object.assign({}, ...params))\n            )\n            .subscribe((params: PaginationParams) => {\n                if (this.ignoreNextParamChange) {\n                    return (this.ignoreNextParamChange = false);\n                }\n                params = removeNullFromObject(params);\n                Object.entries(params).forEach(([key, value]) => {\n                    if (typeof value === 'object' && value.id) {\n                        params[`${key}Id`] = value.id;\n                        delete params[key];\n                    }\n                });\n                if (this.config.uri) {\n                    this.paginator.paginate(\n                        params,\n                        this.config.uri,\n                        this.config.initialData as PaginationResponse<T>\n                    );\n                } else if (Object.keys(params).length && this.data.length) {\n                    this.applyLocalTransforms(params);\n                }\n            });\n\n        return this;\n    }\n\n    private connectToPaginator() {\n        this.paginatorSub = this.paginator.response$\n            .pipe(pairwise())\n            .subscribe(([prev, current]) => {\n                // append data instead of overriding with next page data (infinite scroll).\n                // if page did not change, we can assume that it was filter or sort\n                // change and we should use only new data, even on infinite scroll\n                const data =\n                    this.config.infiniteScroll &&\n                    prev?.pagination?.current_page !== current.pagination.current_page\n                        ? [...this.data$.value, ...current.pagination.data]\n                        : current.pagination.data;\n                this.data$.next(data);\n            });\n    }\n\n    private applyLocalTransforms(params: PaginationParams) {\n        let data = [...this.originalData$.value];\n        if (params.query) {\n            data = filterDatatableData<T>(data, params.query);\n        }\n        if (params.orderBy && params.orderDir) {\n            data = sortDatatableData<T>(data, params.orderBy, params.orderDir);\n        }\n        this.data$.next(data);\n    }\n\n    public addFilter(key: keyof DatatableFilters, value: DatatableFilterValue) {\n        this.filters$.next({\n            ...this.filters$.value,\n            [key]: value,\n        });\n    }\n\n    public removeFilter(key: keyof DatatableFilters) {\n        const filters = {...this.filters$.value};\n        delete filters[key];\n        this.filters$.next(filters);\n    }\n\n    public reset(staticParams: DatatableStaticParams = null) {\n        this.filters$.next({});\n        this.sort$.next({});\n        this.selectedRows$.next([]);\n        if (staticParams) {\n            this.staticParams$.next(staticParams);\n        }\n    }\n\n    public openCrupdateResourceModal(\n        cmp: ComponentType<any>,\n        data?: object,\n        config?: MatDialogConfig\n    ) {\n        return this.modal\n            .open(cmp, data, config)\n            .beforeClosed()\n            .pipe(\n                filter(modifiedResource => !!modifiedResource),\n                tap(() => this.reset())\n            );\n    }\n\n    public confirmResourceDeletion(resource: string) {\n        const data = {...DELETE_RESOURCE_MESSAGE, replacements: {resource}};\n        return this.modal\n            .open(ConfirmModalComponent, data)\n            .afterClosed()\n            .pipe(filter(confirmed => confirmed));\n    }\n\n    public getCurrentParams() {\n        return {\n            ...this.sort$.value,\n            ...this.filters$.value,\n            ...this.staticParams$.value,\n            ...this.paginator.params,\n        };\n    }\n\n    public destroy() {\n        this.paginatorSub?.unsubscribe();\n        this.mainSub?.unsubscribe();\n        this.searchControlSub?.unsubscribe();\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {filter} from 'rxjs/operators';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {slugifyString} from '../../core/utils/slugify-string';\n\n@Component({\n    selector: '[table-sort-header]',\n    templateUrl: './table-sort-header.component.html',\n    styleUrls: ['./table-sort-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        'tabindex': '0',\n        '(click)': 'handleClick()',\n        '(keydown)': 'handleKeydown($event)',\n        '(mouseenter)': 'onMouseEnter()',\n        '(mouseleave)': 'onMouseLeave()',\n    }\n})\nexport class TableSortHeaderComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChild('columnName', {static: true}) columnName: ElementRef<HTMLElement>;\n    @Input('table-sort-header') public orderBy: string;\n\n    @HostBinding('class.active')\n    public orderDir: 'desc'|'asc'|null = null;\n\n    @HostBinding('class.sort-disabled') get sortDisabled() {\n        return this.datable.config?.disableSort;\n    }\n\n    private sortSub: Subscription;\n    public arrowVisible = false;\n    public arrowDirection: 'down'|'up' = 'down';\n\n    constructor(\n        public datable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private el: ElementRef<HTMLElement>,\n    ) {}\n\n    ngOnInit() {\n        // get column name from <ng-content> if none is explicitly provided\n        if ( ! this.orderBy) {\n            this.orderBy = slugifyString(this.columnName.nativeElement.textContent, '_');\n        }\n\n        // hide arrow when sort column is changed to different column\n        this.sortSub = this.datable.sort$\n            .pipe(filter(sort => (sort.orderBy !== this.orderBy)))\n            .subscribe(() => {\n                this.orderDir = null;\n                this.onMouseLeave();\n                this.cd.markForCheck();\n            });\n    }\n\n    ngAfterViewInit() {\n        // add '.cdk-keyboard-focused' when tabbing to other sort headers\n        this.focusMonitor.monitor(this.el).subscribe();\n    }\n\n    ngOnDestroy() {\n        this.sortSub.unsubscribe();\n        this.focusMonitor.stopMonitoring(this.el);\n    }\n\n    public changeSort() {\n        this.datable.sort$.next({\n            orderBy: this.orderBy,\n            orderDir: this.getDirection(this.orderDir),\n        });\n    }\n\n    private getDirection(current: string) {\n        switch (current) {\n            case 'asc':\n                this.arrowVisible = false;\n                return this.orderDir = null;\n            case 'desc':\n                this.arrowVisible = true;\n                this.arrowDirection = 'up';\n                return this.orderDir = 'asc';\n            default:\n                this.arrowVisible = true;\n                this.arrowDirection = 'down';\n                return this.orderDir = 'desc';\n        }\n    }\n\n    public onMouseEnter() {\n        if ( ! this.datable.config?.disableSort) {\n            this.arrowVisible = true;\n        }\n    }\n\n    public onMouseLeave() {\n        this.arrowVisible = false;\n        if ( ! this.orderDir) {\n            this.arrowDirection = 'down';\n        }\n    }\n\n    public handleClick() {\n        if ( ! this.datable.config?.disableSort) {\n            this.changeSort();\n        }\n    }\n\n    public handleKeydown(e: KeyboardEvent) {\n        if ( !this.datable.config?.disableSort && (e.keyCode === SPACE || e.keyCode === ENTER)) {\n            e.preventDefault();\n            this.changeSort();\n        }\n    }\n}\n","<span class=\"text\" #columnName>\n    <ng-content></ng-content>\n</span>\n<span class=\"icon-wrapper\" [ngClass]=\"arrowDirection\">\n    <mat-icon svgIcon=\"arrow-downward\" class=\"sort-icon\" [class.hint-visible]=\"arrowVisible\"></mat-icon>\n</span>\n"],"sourceRoot":"webpack:///","file":"665.bf26c76aa4935f4c9905.js"}