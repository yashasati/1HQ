{"version":3,"mappings":"uLAEO,IAAMA,EAAb,MAAM,QAEFC,YAAmBC,cADH,cAAO,+BADdC,GAAb,GAKaC,EAAb,MAAM,QAEFH,YAAmBC,cADH,cAAO,iCADdC,GAAb,GAKaE,EAAb,MAAM,QAEFJ,YAAmBC,mBADH,cAAO,iCADdC,GAAb,GAKaG,EAAb,MAAM,QAEFL,YAAmBC,mBADH,cAAO,iCADdC,GAAb,GAKaI,EAAb,MAAM,SACc,cAAO,+BADdJ,GAAb,GCnBM,QAiBFF,YAAYO,EAAiB,IACzB,UAAWN,KAAQM,EACfC,KAAKP,GAAQM,EAAON,8DCQnBQ,EAAmB,MAgB5BT,YACYO,EACAN,GADAO,cACAA,4BAhBED,GACV,OAAOA,EAAMG,sBAIFH,GACX,OAAOA,EAAMI,uBAIFJ,GACX,OAAOA,EAAMK,QASjBC,WAAWN,EAA6CN,GACpD,SAAIa,WAAW,CAACH,SAAS,IAClBH,KAAKO,OAAOC,IAAIf,EAAOgB,IAAIC,MAAK,OAAIC,IACvCZ,EAAIO,WAAW,CACXJ,OAAQS,EAAST,OACjBE,QAASJ,KAAKY,eAAeD,EAASP,SACtCD,SAAS,OAMrBU,aAAad,EAA6CN,GACtD,SAAIa,WAAW,CAACH,SAAS,IAClBH,KAAKO,OAAOO,OAAOrB,EAAOsB,SAASL,MACtC,OAAS,IAAMX,EAAIO,WAAW,CAACH,SAAS,MACxC,OAAIQ,GAAYZ,EAAIO,WAAW,CAACJ,OAAQS,EAAST,WAKzDc,aAAajB,EAA6CN,GACtD,SAAIa,WAAW,CAACH,SAAS,IAClBH,KAAKO,OAAOU,OAAOlB,EAAImB,WAAWhB,OAAOO,GAAIhB,EAAOsB,SAASL,MAChE,OAAS,IAAMX,EAAIO,WAAW,CAACH,SAAS,MACxC,OAAIQ,GAAYZ,EAAIO,WAAW,CAACJ,OAAQS,EAAST,WAKzDiB,aAAapB,EAA6CN,GACtD,SAAIa,WAAW,CAACH,SAAS,IAClBH,KAAKoB,OAAOD,aAAa1B,EAAOgB,IAAIC,MACvC,OAAI,KACA,MAAMC,EAAaZ,EAAImB,WAAWd,QAAQiB,OAAOC,GACtCA,EAAOC,MAAMd,KAAOhB,EAAOgB,IAEtCV,EAAIO,WAAW,CAACF,QAASO,OAE7B,OAAS,IAAMZ,EAAIO,WAAW,CAACH,SAAS,MAKhDqB,WAAWzB,GACPA,EAAIO,WAAW,CACXJ,OAAQ,IAAIuB,EACZrB,QAAS,GACTD,SAAS,IAITS,eAAeb,GACnB,MAAMN,EAAc,GACpB,cAAOiC,KAAK3B,GAAS4B,QAAQhB,IACzBlB,EAAYmC,QAAQ7B,EAAQY,MAEzBlB,0CA/EFQ,GAAmB4B,kDAAnB5B,EAAmB6B,QAAnB7B,EAAmB,eAsB5B8B,UADCC,MAAOzC,IACRU,yBASC,SAGD8B,UADCC,MAAOpC,IACRK,2BAMC,OAGD,UADC,QAAOJ,IACRI,2BAMC,OAGD,UADC,QAAON,IACRM,2BAWC,SAGD8B,UADCC,MAAOlC,IACRG,yBAMC,SAtED8B,QADC,WACD9B,WAEC,OAGD,UADC,WACDA,YAEC,SAGD8B,QADC,WACD9B,YAEC,MAdQA,KAAmB8B,UAT/BC,MAAgC,CAC7BC,KAAM,iBACNC,SAAU,CACNhC,OAAQ,IAAIuB,EACZrB,QAAS,GACTD,SAAS,MAIJF,kPC2DG4B,cACIA,cACIA,kBACIA,0BACAA,gBAAMA,SAAeA,QACzBA,QACJA,QACAA,iBAA8CA,SAA0DA,QACxGA,iBAA+CA,SAA6DA,QAC5GA,kBAAwCA,UAA8CA,QACtFA,kBACIA,sBAAsCA,qFAClCA,wBACJA,QACJA,QACJA,oCAZyBA,+BACPA,uBAGgCA,uEACCA,gFACPA,kFAUhDA,iCACIA,mBAAyBA,+BAAmBA,QAChDA,SC/EN,QAkBFrC,YACYO,EACAN,EACAkB,EACAW,EACAa,EACAC,EACDC,IANCrC,aACAA,aACAA,cACAA,UACAA,aACAA,mBACDA,kBAtBJA,aAAU,IAAIsC,IAAwB,MAEtCtC,gBAAaA,KAAKuC,GAAGC,MAAM,CAC9BP,KAAM,CAAC,IACPQ,OAAQ,CAAC,IACTC,WAAY,CAAC,IACbC,YAAa,CAAC,IACdC,UAAW,CAAC,IACZC,YAAa,CAAC,IACdC,WAAY,CAAC,IACbC,WAAY,CAAC,IACbC,OAAQ,CAAC,MACTC,aAAc,EAAC,KAanBC,WACIlD,KAAKmD,UAAUC,OACfpD,KAAKqD,MAAMC,OAAOC,UAAUxD,IACxBC,KAAKK,WAAWN,KAGpBC,KAAKwD,MAAMC,OAAOxD,WAA6BsD,UAAUxD,IACrDC,KAAKmD,UAAUO,KAAO3D,IAG1BC,KAAK2D,WAAWnD,IAAI,UAAUoD,aAAaL,UAAUxD,IACjDC,KAAK6D,QAAQC,KAAK/D,KAI1BgE,cACI/D,KAAKwD,MAAMQ,SAAS,IAAIlE,GACxBE,KAAKmD,UAAUc,UAGZC,kBACHC,KAAiB,CAACC,MAAO,CAACC,aAA0BC,KAAKvE,IAOrDC,KAAKuE,YAAYC,MAAMzE,EANR,CACX0E,IAAK,iBACLC,WAAY,CACRC,WAAY,0BAGmBpB,UAAU5C,IAC7CX,KAAK2D,WAAWiB,WAAW,CACvBnC,OAAQ9B,EAASkE,UAAUC,UAMnCzE,WAAWN,IACRA,EAAOU,IACdT,KAAKwD,MAAMQ,SAAS,IAAIzE,GAAYQ,EAAOU,KAAK8C,UAAU,KACtD,MAAM9D,EAASO,KAAKwD,MAAMuB,eAAe9E,UACzCD,KAAK2D,WAAWiB,WAAWnF,GAC3BO,KAAK6D,QAAQC,KAAKrE,EAAOgD,UAI1BuC,SACH,MAAMjF,EAASC,KAAKwD,MAAMuB,eAAe9E,UAErCD,KAAKwD,MAAMQ,SADEjE,EAAOU,GACA,IAAIZ,EAAaG,KAAK2D,WAAWsB,OACjC,IAAIrF,EAAaI,KAAK2D,WAAWsB,QAEhD1B,UAAU,KACfvD,KAAKkF,OAAOC,SAAS,CAACnF,KAAKkF,OAAOJ,IAAIM,SAAS,SAAW,eAAiBpF,KAAKkF,OAAOJ,IAAIO,MAAM,KAAK,GAAGC,QAAQ,QAAS,MAC1HtF,KAAKuF,MAAMC,KAAKzF,EAAOU,GAAKgF,0BAAiCA,6BAI9DC,aAAa3F,IACTA,EAAOwB,OACdvB,KAAKwD,MAAMQ,SAAS,IAAIrE,EAAaI,EAAOwB,MAAMd,KAC7C8C,UAAU,KACPvD,KAAKuF,MAAMC,KAAKC,oEAzFnBE,GAA2B9D,2GAA3B8D,EAA2BC,qDALzB,CACPC,IACAC,OACHC,6zED7BLlE,2BACIA,sCACIA,kBAAkCA,mCAAYpC,aAC1CoC,iBACIA,0CACAA,oBAAmFA,gBAAIA,QAC3FA,QACAA,iBACIA,kBACIA,kBACIA,oBAAwBA,iBAAIA,QAC5BA,qBACJA,QACAA,kBACIA,qBAA6BA,sBAASA,QACtCA,qBACJA,QACJA,QAEAA,kBACIA,qBAA0BA,kBAAKA,QAC/BA,mBACIA,sBAAqDA,gCAASpC,qCAC1DoC,wBACJA,QACAA,qBACJA,QACJA,QAEAA,kBACIA,qBAA+BA,sBAASA,QACxCA,wBACJA,QAEAA,kBACIA,kBACIA,qBAA0BA,mBAAMA,QAChCA,sBACIA,sBAAyBA,cAACA,QAC1BA,sBAA2BA,iBAAIA,QAC/BA,sBAA6BA,mBAAMA,QACvCA,QACJA,QACAA,kBACIA,qBAA8BA,uBAAUA,QACxCA,qBACJA,QACAA,kBACIA,qBAA8BA,uBAAUA,QACxCA,qBACJA,QACJA,QAEAA,kBACIA,kBACIA,qBAA8BA,uBAAUA,QACxCA,qBACJA,QAEAA,kBACIA,qBAA+BA,wBAAWA,QAC1CA,qBACJA,QAEAA,kBACIA,qBAAgCA,8BAAiBA,QACjDA,sBACIA,sBAA+BA,gBAAGA,QAClCA,sBAAgCA,eAAEA,QACtCA,QACJA,QACJA,QACJA,QACJA,QACJA,QACAA,wCACIA,mBACIA,6BACAA,qBACIA,kBACAA,eACIA,kBAAmCA,mBAAMA,QACzCA,kBAA8CA,sBAASA,QACvDA,kBAA+CA,uBAAUA,QACzDA,kBAAwCA,gBAAGA,QAC3CA,eACJA,QACAA,QACAA,kBACAA,2CAgBAA,QACJA,QAEAA,0DAGJA,QACJA,QACJA,QAEAA,0DAlHaA,oDACmDA,yCAEnCA,4CAkByEA,2DAgBlEA,gCA6BAA,8BACAA,6BAOvBA,+CAc0BA,0DAmBNA,8DAOdA,inDCnFsB,YAApCG,MAAO/B,YAA6B0F,gCACA,YAApC3D,MAAO/B,YAA6B0F,+BC7BzC,MAAMK,EAAiB,CACnB,CACIC,KAAM,GACNC,UAAWP,EACXjC,KAAM,CAACyC,YAAa,CAAC,oBAQtB,IAAMC,EAAb,MAAM,sDAAO1G,4DAHF,CAAC2G,cAAsBL,IACtBK,QAEC3G,GAAb,yDC8BO,IAAM4G,GAAb,MAAM,sDAAO5G,4DAvBA,CACL6G,KACAH,EACAI,IACAC,KACAA,KACAC,IACAC,IACAC,IACAC,KAEA7E,gBAAsB,CAClB/B,IAIJ6G,KACAC,KACAC,KACAC,KACAC,SAGKxH,GAAb","names":["P","constructor","a","n","b","A","y","T","e","this","r","person","loading","credits","loadPerson","patchState","people","get","id","pipe","i","flattenCredits","createPerson","create","payload","updatePerson","update","getState","removeCredit","titles","filter","m","pivot","resetState","U","keys","forEach","push","t","factory","p","l","name","defaults","C","N","at","z","fb","group","poster","popularity","description","known_for","birth_place","birth_date","death_date","gender","allow_update","ngOnInit","datatable","init","route","params","subscribe","store","select","data","personForm","valueChanges","poster$","next","ngOnDestroy","dispatch","destroy","uploadPoster","E","types","D","then","uploadQueue","start","uri","httpParams","diskPrefix","patchValue","fileEntry","url","selectSnapshot","submit","value","router","navigate","includes","split","replace","toast","open","Z","detachCredit","d","selectors","x","S","decls","G","path","component","permissions","K","c","et","u","H","s","W","_","k","tt","f","M","q","O","F"],"sources":["./src/app/site/people/crupdate-person/state/crupdate-person-state-actions.ts","./src/app/models/person.ts","./src/app/site/people/crupdate-person/state/crupdate-person-state.ts","./src/app/site/people/crupdate-person/crupdate-person-page.component.html","./src/app/site/people/crupdate-person/crupdate-person-page.component.ts","./src/app/site/people/crupdate-person/crupdate-person-routing.module.ts","./src/app/site/people/crupdate-person/crupdate-person.module.ts"],"sourcesContent":["import {Person} from '../../../../models/person';\n\nexport class LoadPerson {\n    static readonly type = '[CrupdatePerson] Load Person';\n    constructor(public id: number) {}\n}\n\nexport class DetachCredit {\n    static readonly type = '[CrupdatePerson] Detach Credit';\n    constructor(public id: number) {}\n}\n\nexport class CreatePerson {\n    static readonly type = '[CrupdatePerson] Create Person';\n    constructor(public payload: Partial<Person>) {}\n}\n\nexport class UpdatePerson {\n    static readonly type = '[CrupdatePerson] Update Person';\n    constructor(public payload: Partial<Person>) {}\n}\n\nexport class ResetState {\n    static readonly type = '[CrupdatePerson] Reset State';\n}\n","import {MEDIA_TYPE} from '../site/media-type';\nimport {Title} from './title';\n\nexport class Person {\n    id: number;\n    name: string;\n    poster: string;\n    known_for?: string;\n    gender?: string;\n    birth_date: string;\n    death_date: string;\n    birth_place: string;\n    credits?: Title[];\n    popular_credits?: Title[];\n    views?: number;\n    popularity?: number;\n    updated_at?: string;\n    description: string;\n    model_type: MEDIA_TYPE.PERSON;\n\n    constructor(params: object = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n    }\n}\n","import {Action, Selector, State, StateContext} from '@ngxs/store';\nimport {Person} from '../../../../models/person';\nimport {finalize, tap} from 'rxjs/operators';\nimport {\n    CreatePerson,\n    DetachCredit,\n    LoadPerson,\n    ResetState,\n    UpdatePerson\n} from './crupdate-person-state-actions';\nimport {PeopleService} from '../../people.service';\nimport {TitleCredit} from '../../../../models/title';\nimport {TitlesService} from '../../../titles/titles.service';\nimport {Injectable} from '@angular/core';\n\ninterface CrupdatePersonStateModel {\n    person: Person;\n    credits: TitleCredit[];\n    loading: boolean;\n}\n\n@State<CrupdatePersonStateModel>({\n    name: 'crupdatePerson',\n    defaults: {\n        person: new Person(),\n        credits: [],\n        loading: false,\n    },\n})\n@Injectable()\nexport class CrupdatePersonState {\n    @Selector()\n    static person(state: CrupdatePersonStateModel) {\n        return state.person;\n    }\n\n    @Selector()\n    static loading(state: CrupdatePersonStateModel) {\n        return state.loading;\n    }\n\n    @Selector()\n    static credits(state: CrupdatePersonStateModel) {\n        return state.credits;\n    }\n\n    constructor(\n        private people: PeopleService,\n        private titles: TitlesService,\n    ) {}\n\n    @Action(LoadPerson)\n    loadPerson(ctx: StateContext<CrupdatePersonStateModel>, action: LoadPerson) {\n        ctx.patchState({loading: true});\n        return this.people.get(action.id).pipe(tap(response => {\n            ctx.patchState({\n                person: response.person,\n                credits: this.flattenCredits(response.credits),\n                loading: false\n            });\n        }));\n    }\n\n    @Action(CreatePerson)\n    createPerson(ctx: StateContext<CrupdatePersonStateModel>, action: CreatePerson) {\n        ctx.patchState({loading: true});\n        return this.people.create(action.payload).pipe(\n            finalize(() => ctx.patchState({loading: false})),\n            tap(response => ctx.patchState({person: response.person}))\n        );\n    }\n\n    @Action(UpdatePerson)\n    updatePerson(ctx: StateContext<CrupdatePersonStateModel>, action: UpdatePerson) {\n        ctx.patchState({loading: true});\n        return this.people.update(ctx.getState().person.id, action.payload).pipe(\n            finalize(() => ctx.patchState({loading: false})),\n            tap(response => ctx.patchState({person: response.person}))\n        );\n    }\n\n    @Action(DetachCredit)\n    removeCredit(ctx: StateContext<CrupdatePersonStateModel>, action: DetachCredit) {\n        ctx.patchState({loading: true});\n        return this.titles.removeCredit(action.id).pipe(\n            tap(() => {\n                const newCredits = ctx.getState().credits.filter(credit => {\n                    return credit.pivot.id !== action.id;\n                });\n                ctx.patchState({credits: newCredits});\n            }),\n            finalize(() => ctx.patchState({loading: false}))\n        );\n    }\n\n    @Action(ResetState)\n    resetState(ctx: StateContext<CrupdatePersonStateModel>) {\n        ctx.patchState({\n            person: new Person(),\n            credits: [],\n            loading: false,\n        });\n    }\n\n    private flattenCredits(credits: object) {\n        const flatCredits = [];\n        Object.keys(credits).forEach(key => {\n            flatCredits.push(...credits[key]);\n        });\n        return flatCredits;\n    }\n}\n","<mat-tab-group animationDuration=\"0ms\" class=\"material-panel\" color=\"accent\">\n    <mat-tab [label]=\"'Primary Facts' | trans\">\n        <form class=\"primary-facts-panel\" (ngSubmit)=\"submit()\" [formGroup]=\"personForm\" ngNativeValidate>\n            <div class=\"left-col\">\n                <media-image [src]=\"poster$ | async\" size=\"medium\"></media-image>\n                <button type=\"submit\" mat-raised-button color=\"accent\" class=\"submit-button\" trans>Save</button>\n            </div>\n            <div class=\"right-col many-inputs\">\n                <div class=\"inline-container many-inputs\">\n                    <div class=\"input-container\">\n                        <label for=\"name\" trans>Name</label>\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"known_for\" trans>Known For</label>\n                        <input type=\"text\" formControlName=\"known_for\" id=\"known_for\">\n                    </div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label for=\"poster\" trans>Image</label>\n                    <div class=\"input-with-action action-left\">\n                        <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\" [matTooltip]=\"'Upload poster' | trans\">\n                            <mat-icon svgIcon=\"file-upload\"></mat-icon>\n                        </button>\n                        <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\n                    </div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label for=\"description\" trans>Biography</label>\n                    <textarea id=\"description\" formControlName=\"description\" cdkTextareaAutosize cdkAutosizeMinRows=\"10\" cdkAutosizeMaxRows=\"100\"></textarea>\n                </div>\n\n                <div class=\"inline-container many-inputs\">\n                    <div class=\"input-container\">\n                        <label for=\"gender\" trans>Gender</label>\n                        <select id=\"gender\" formControlName=\"gender\">\n                            <option [ngValue]=\"null\">-</option>\n                            <option value=\"male\" trans>Male</option>\n                            <option value=\"female\" trans>Female</option>\n                        </select>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"birth_date\" trans>Birth Date</label>\n                        <input type=\"date\" id=\"birth_date\" formControlName=\"birth_date\">\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"death_date\" trans>Death Date</label>\n                        <input type=\"date\" id=\"death_date\" formControlName=\"death_date\">\n                    </div>\n                </div>\n\n                <div class=\"inline-container many-inputs\">\n                    <div class=\"input-container\">\n                        <label for=\"popularity\" trans>Popularity</label>\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" step=\"0.1\">\n                    </div>\n\n                    <div class=\"input-container\">\n                        <label for=\"birth_place\" trans>Birth Place</label>\n                        <input type=\"text\" id=\"birth_place\" formControlName=\"birth_place\">\n                    </div>\n\n                    <div class=\"input-container\">\n                        <label for=\"allow_update\" trans>Allow Auto Update</label>\n                        <select formControlName=\"allow_update\" id=\"allow_update\" required>\n                            <option [ngValue]=\"true\" trans>Yes</option>\n                            <option [ngValue]=\"false\" trans>No</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </mat-tab>\n    <mat-tab [label]=\"'Credits' | trans\">\n        <div class=\"responsive-table\">\n            <datatable-header></datatable-header>\n            <table class=\"material-table\">\n                <thead>\n                <tr>\n                    <th table-sort-header=\"name\" trans>Credit</th>\n                    <th table-sort-header=\"pivot.character\" trans>Character</th>\n                    <th table-sort-header=\"pivot.department\" trans>Department</th>\n                    <th table-sort-header=\"pivot.job\" trans>Job</th>\n                    <th></th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let credit of datatable.data$ | async\">\n                    <td>\n                        <div class=\"column-with-image\">\n                            <media-image [src]=\"credit.poster\" size=\"small\"></media-image>\n                            <span>{{credit.name}}</span>\n                        </div>\n                    </td>\n                    <td data-label=\"Character\" class=\"capitalize\">{{credit.pivot?.character ? credit.pivot.character : '-'}}</td>\n                    <td data-label=\"Department\" class=\"capitalize\">{{credit.pivot?.department ? credit.pivot.department : '-'}} </td>\n                    <td data-label=\"Job\" class=\"capitalize\">{{credit.pivot?.job ? credit.pivot.job : '-'}}</td>\n                    <td class=\"edit-column\">\n                        <button type=\"button\" mat-icon-button (click)=\"detachCredit(credit)\">\n                            <mat-icon svgIcon=\"close\"></mat-icon>\n                        </button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n\n            <no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\n                <span primary-text trans>Nothing to display.</span>\n            </no-results-message>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {Select, Store} from '@ngxs/store';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {\n    CreatePerson,\n    DetachCredit,\n    LoadPerson,\n    ResetState,\n    UpdatePerson\n} from './state/crupdate-person-state-actions';\nimport {CrupdatePersonState} from './state/crupdate-person-state';\nimport {FormBuilder} from '@angular/forms';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {TitleCredit} from '../../../models/title';\nimport {MESSAGES} from '../../../toast-messages';\nimport {UploadQueueService} from '../../../../common/uploads/upload-queue/upload-queue.service';\nimport {Toast} from '../../../../common/core/ui/toast.service';\nimport {openUploadWindow} from '../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../common/uploads/upload-input-config';\nimport {DatatableService} from '../../../../common/datatable/datatable.service';\n\n@Component({\n    selector: 'crupdate-person-page',\n    templateUrl: './crupdate-person-page.component.html',\n    styleUrls: ['./crupdate-person-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        UploadQueueService,\n        DatatableService,\n    ],\n})\nexport class CrupdatePersonPageComponent implements OnInit, OnDestroy {\n    @Select(CrupdatePersonState.loading) loading$: Observable<boolean>;\n    @Select(CrupdatePersonState.credits) credits$: Observable<TitleCredit[]>;\n    public poster$ = new BehaviorSubject<string>(null);\n\n    public personForm = this.fb.group({\n        name: [''],\n        poster: [''],\n        popularity: [''],\n        description: [''],\n        known_for: [''],\n        birth_place: [''],\n        birth_date: [''],\n        death_date: [''],\n        gender: [null],\n        allow_update: [true],\n    });\n\n    constructor(\n        private store: Store,\n        private toast: Toast,\n        private router: Router,\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private uploadQueue: UploadQueueService,\n        public datatable: DatatableService<TitleCredit>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n        this.route.params.subscribe(params => {\n            this.loadPerson(params);\n        });\n\n        this.store.select(CrupdatePersonState.credits).subscribe(credits => {\n            this.datatable.data = credits;\n        });\n\n        this.personForm.get('poster').valueChanges.subscribe(value => {\n            this.poster$.next(value);\n        });\n    }\n\n    ngOnDestroy() {\n        this.store.dispatch(new ResetState());\n        this.datatable.destroy();\n    }\n\n    public uploadPoster() {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                uri: 'uploads/images',\n                httpParams: {\n                    diskPrefix: 'media-images/posters'\n                },\n            };\n            this.uploadQueue.start(upload, params).subscribe(response => {\n                this.personForm.patchValue({\n                    poster: response.fileEntry.url\n                });\n            });\n        });\n    }\n\n    private loadPerson(params: {id?: string}) {\n        if ( ! params.id) return;\n        this.store.dispatch(new LoadPerson(+params.id)).subscribe(() => {\n            const person = this.store.selectSnapshot(CrupdatePersonState.person);\n            this.personForm.patchValue(person);\n            this.poster$.next(person.poster);\n        });\n    }\n\n    public submit() {\n        const person = this.store.selectSnapshot(CrupdatePersonState.person);\n        const response = person.id ?\n            this.store.dispatch(new UpdatePerson(this.personForm.value)) :\n            this.store.dispatch(new CreatePerson(this.personForm.value));\n\n        response.subscribe(() => {\n            this.router.navigate([this.router.url.includes('admin') ? 'admin/people' : this.router.url.split('?')[0].replace('/edit', '')]);\n            this.toast.open(person.id ? MESSAGES.PERSON_UPDATE_SUCCESS : MESSAGES.PERSON_CREATE_SUCCESS);\n        });\n    }\n\n    public detachCredit(credit: TitleCredit) {\n        if ( ! credit.pivot) return;\n        this.store.dispatch(new DetachCredit(credit.pivot.id))\n            .subscribe(() => {\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\n            });\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrupdatePersonPageComponent,\n        data: {permissions: ['people.update']}\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CrupdatePersonRoutingModule { }\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdatePersonRoutingModule} from './crupdate-person-routing.module';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {NgxsModule} from '@ngxs/store';\nimport {CrupdatePersonState} from './state/crupdate-person-state';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\n\n\n@NgModule({\n    declarations: [\n        CrupdatePersonPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdatePersonRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MediaImageModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n        DatatableModule,\n\n        NgxsModule.forFeature([\n            CrupdatePersonState\n        ]),\n\n        // material\n        MatTabsModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        TextFieldModule,\n    ]\n})\nexport class CrupdatePersonModule {\n}\n"],"sourceRoot":"webpack:///","file":"296.b290e39f6489b6ca7fc4.js"}