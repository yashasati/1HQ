{"version":3,"mappings":"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","names":["t","constructor","n","e","i","r","l","c","x","v","this","y","fb","group","name","o","original_title","is_series","language","tagline","poster","backdrop","description","budget","revenue","runtime","country","popularity","certification","release_date","allow_update","certificationOptions","settings","getJson","ngOnInit","store","dispatch","m","select","u","pipe","id","subscribe","form","patchValue","Object","split","poster$","next","get","valueChanges","uploadImage","$","types","j","then","uploadQueue","start","uri","httpParams","diskPrefix","fileEntry","url","submit","selectSnapshot","titles","update","value","create","toast","open","_","router","navigate","includes","replace","title","I","selectors","E","decls","C","d","ht","character","department","job","data","credit","pivot","valueLists","availableJobs","tmdbJobs","forEach","jobs","map","filteredJobs","tt","filter","toLowerCase","slice","confirm","getPayload","mediaItem","close","message","dialogRef","setCredit","type","jobSelected","find","option","U","g","B","datatable","init","ngOnChanges","currentValue","getCast","credits","getCrew","ngOnDestroy","destroy","openCrupdateCreditModal","dialog","detachCredit","H","body","ok","afterClosed","changeCreditsOrder","previousIndex","currentIndex","a","J","episode_number","episode","bindToStoreEpisode","episodeForm","episode$","setTimeout","loadEpisodeCredits","season","episode_count","updateEpisode","createEpisode","errors$","episodes","length","errors","uploadPoster","seasons","number","season_number","toPromise","N","$t","ngAfterViewInit","route","snapshot","params","episodeNumber","openCrupdateEpisodeModal","deleteEpisode","panelClass","activeSeason$","seasonNumber","el","nativeElement","querySelector","scrollIntoView","behavior","block","inline","addSeason","maybeDeleteSeason","modal","bodyBold","trackByFn","P","placeholder","activeContainer","element","dropContainer","w","rt","nt","parentElement","children","source","lt","sourceIndex","style","width","clientWidth","height","clientHeight","removeChild","targetIndex","target","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","modelId","images","image","deleteImage","dragMoved","getPointerPositionOnPage","event","listGroup","_items","top","bottom","left","right","getBoundingClientRect","Wt","dropListDropped","appendChild","startsWith","touches","changedTouches","viewportRuler","getViewportScrollPosition","pageX","pageY","Array","prototype","indexOf","call","k","T","de","tagService","index","perPage","tagType","existingTags$","pagination","formControl","ne","searchTags","at","suggestedTags$","writeValue","selectTags","skipPropagate","override","registerOnChange","propagateChange","registerOnTouched","trim","selectedTags$","reset","deselectTag","splice","selectTagsFromString","te","query","D","provide","useExisting","multi","me","pluralName","selectedTagsControl","noTagsSelected","_e","getTagObservable","openTagManagerModal","beforeClosed","detachTag","api","queryParams","activePanel$","active","openPanel","titleCreated","M","Je","path","component","resolve","titleId","fullCredits","keywords","countries","skipUpdating","allVideos","fallbackUri","st","Ue","factory","permissions","Ne","b","De","p","ke","Me","we","Ee","Se","Oe","Qe","Fe","Ye","f","Z","R","S","V","q","O","Le"],"sources":["./src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.ts","./src/common/tags/tags-manager/tags-manager.component.html","./src/common/tags/tags-manager/tags-manager.component.ts","./src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.ts","./src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.html","./src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.ts","./src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.html","./src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.ts","./src/app/site/titles/crupdate-title/crupdate-title-routing.module.ts","./src/app/site/titles/crupdate-title/crupdate-title/crupdate-title-resolver.service.ts","./src/app/site/titles/crupdate-title/crupdate-title.module.ts"],"sourcesContent":["<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <div class=\"poster-container\">\n    <media-image [src]=\"poster$ | async\"></media-image>\n    <div class=\"many-inputs\">\n      <div class=\"inline-container\">\n        <div class=\"input-container\">\n          <label for=\"name\" trans>Title</label>\n          <input\n            type=\"text\"\n            formControlName=\"name\"\n            id=\"name\"\n            minlength=\"1\"\n            maxlength=\"250\"\n            required\n          />\n        </div>\n        <div class=\"input-container\">\n          <label for=\"original-title\" trans>Original Title</label>\n          <input\n            type=\"text\"\n            formControlName=\"original_title\"\n            id=\"original-title\"\n            minlength=\"1\"\n            maxlength=\"250\"\n            required\n          />\n        </div>\n      </div>\n\n      <div class=\"inline-container\">\n        <div class=\"input-container\">\n          <label for=\"type\" trans>Type</label>\n          <select formControlName=\"is_series\" id=\"type\" required>\n            <option [ngValue]=\"false\" trans>Movie</option>\n            <option [ngValue]=\"true\" trans>TV Series</option>\n          </select>\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"allow_update\" trans>Allow Auto Update</label>\n          <select formControlName=\"allow_update\" id=\"allow_update\" required>\n            <option [ngValue]=\"true\" trans>Yes</option>\n            <option [ngValue]=\"false\" trans>No</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"input-container\">\n        <label for=\"poster\" trans>Poster</label>\n        <div class=\"input-with-action action-left\">\n          <button\n            type=\"button\"\n            mat-flat-button\n            color=\"accent\"\n            (click)=\"uploadImage('poster')\"\n            [matTooltip]=\"'Upload poster' | trans\"\n          >\n            <mat-icon svgIcon=\"file-upload\"></mat-icon>\n          </button>\n          <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\" />\n        </div>\n      </div>\n\n      <div class=\"input-container\">\n        <label for=\"backdrop\" trans>Backdrop</label>\n        <div class=\"input-with-action action-left\">\n          <button\n            type=\"button\"\n            mat-flat-button\n            color=\"accent\"\n            (click)=\"uploadImage('backdrop')\"\n            [matTooltip]=\"'Upload backdrop' | trans\"\n          >\n            <mat-icon svgIcon=\"file-upload\"></mat-icon>\n          </button>\n          <input\n            type=\"text\"\n            formControlName=\"backdrop\"\n            id=\"backdrop\"\n            minlength=\"1\"\n            maxlength=\"250\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"release_date\" trans>Release Date</label>\n      <input\n        type=\"date\"\n        formControlName=\"release_date\"\n        id=\"release_date\"\n        placeholder=\"YYYY-MM-DD\"\n        required\n      />\n    </div>\n\n    <div class=\"input-container\">\n      <label for=\"tagline\" trans>Tagline</label>\n      <input type=\"text\" formControlName=\"tagline\" id=\"tagline\" minlength=\"1\" maxlength=\"250\" />\n    </div>\n  </div>\n\n  <div class=\"input-container\">\n    <label for=\"description\" trans>Overview</label>\n    <textarea\n      type=\"text\"\n      formControlName=\"description\"\n      id=\"description\"\n      minlength=\"1\"\n      cdkTextareaAutosize\n      cdkAutosizeMinRows=\"6\"\n    ></textarea>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"runtime\" trans>Runtime</label>\n      <input type=\"number\" formControlName=\"runtime\" id=\"runtime\" min=\"1\" max=\"500\" />\n    </div>\n\n    <div class=\"input-container certification-input-container\">\n      <label for=\"certification\" trans>Certification</label>\n      <select formControlName=\"certification\" id=\"certification\">\n        <option [ngValue]=\"certification\" *ngFor=\"let certification of certificationOptions\">\n          {{ certification }}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"budget\" trans>Budget</label>\n      <input type=\"number\" formControlName=\"budget\" id=\"budget\" min=\"1\" />\n    </div>\n\n    <div class=\"input-container\">\n      <label for=\"revenue\" trans>Revenue</label>\n      <input type=\"number\" formControlName=\"revenue\" id=\"revenue\" min=\"1\" />\n    </div>\n  </div>\n\n  <div class=\"inline-container\">\n    <div class=\"input-container\">\n      <label for=\"popularity\" trans>Popularity</label>\n      <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" />\n    </div>\n\n    <div class=\"input-container\">\n      <label for=\"language\" trans>Language</label>\n      <select formControlName=\"language\" id=\"language\" required>\n        <option [value]=\"language.code\" *ngFor=\"let language of languageOptions$ | async\">\n          {{ language.name }}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n    Save\n  </button>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Title} from '../../../../../../models/title';\nimport {LoadSelectOptions, ToggleLoading} from '../../state/crupdate-title-actions';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\nimport {LanguageListItem} from '../../../../../../../common/core/services/value-lists.service';\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\nimport {filter, finalize, take} from 'rxjs/operators';\nimport {Settings} from '../../../../../../../common/core/config/settings.service';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {TitlesService} from '../../../../titles.service';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\n\n@Component({\n    selector: 'primary-facts-panel',\n    templateUrl: './primary-facts-panel.component.html',\n    styleUrls: ['./primary-facts-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PrimaryFactsPanelComponent implements OnInit {\n    @Select(CrupdateTitleState.title) title$: Observable<Title>;\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    @Select(CrupdateTitleState.languageOptions) languageOptions$: Observable<LanguageListItem[]>;\n    public certificationOptions: string[];\n    public poster$ = new BehaviorSubject<string>(null);\n\n    public form = this.fb.group({\n        name: ['', [Validators.required, Validators.minLength(1)]],\n        original_title: ['', [Validators.required, Validators.minLength(1)]],\n        is_series: [false, [Validators.required]],\n        language: [''],\n        tagline: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        backdrop: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        description: ['', [Validators.minLength(1)]],\n        budget: ['', Validators.min(1)],\n        revenue: ['', Validators.min(1)],\n        runtime: ['', [Validators.min(1), Validators.max(300)]],\n        country: ['', [Validators.minLength(1), Validators.maxLength(50)]],\n        popularity: [1, [Validators.min(1), Validators.max(100)]],\n        certification: ['pg'],\n        release_date: [''],\n        allow_update: [true],\n    });\n\n    constructor(\n        private store: Store,\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private uploadQueue: UploadQueueService,\n        private settings: Settings,\n        private router: Router,\n        private titles: TitlesService,\n        private toast: Toast,\n    ) {\n        this.certificationOptions = this.settings.getJson('browse.ageRatings');\n    }\n\n    ngOnInit() {\n        this.store.dispatch(new LoadSelectOptions());\n\n        this.store.select(CrupdateTitleState.title)\n            .pipe(filter(t => !!t.id), take(1))\n            .subscribe(title => {\n                this.form.patchValue({\n                    ...title,\n                    release_date: title.release_date ? title.release_date.split('T')[0] : null,\n                });\n                this.poster$.next(title.poster);\n            });\n\n        this.form.get('poster').valueChanges.subscribe(value => {\n            this.poster$.next(value);\n        });\n    }\n\n    public uploadImage(type: 'poster'|'backdrop') {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                uri: 'uploads/images',\n                httpParams: {\n                    diskPrefix: `media-images/${type}s`\n                },\n            };\n            this.uploadQueue.start(upload, params).subscribe(fileEntry => {\n                this.form.patchValue({\n                    [type]: fileEntry.fileEntry.url\n                });\n            });\n        });\n    }\n\n    public submit() {\n        this.store.dispatch(new ToggleLoading(true));\n        const titleId = this.store.selectSnapshot(CrupdateTitleState.title).id;\n        const request = titleId ?\n            this.titles.update(titleId, this.form.value) :\n            this.titles.create(this.form.value);\n        request\n            .pipe(finalize(() => this.store.dispatch(new ToggleLoading(false))))\n            .subscribe(response => {\n            this.toast.open(titleId ? MESSAGES.TITLE_UPDATE_SUCCESS : MESSAGES.TITLE_CREATE_SUCCESS);\n            if (titleId) {\n                this.router.navigate([this.router.url.includes('admin') ? '/admin/titles' : this.router.url.split('?')[0].replace('/edit', '')]);\n            } else {\n                this.router.navigate([this.router.url.replace('new', '' + response.title.id), 'edit']);\n            }\n        });\n    }\n}\n","<div class=\"modal-header\">\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.credit\" trans>Edit</h2>\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.credit\" trans>Create</h2>\n  <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\n    <mat-icon svgIcon=\"close\"></mat-icon>\n  </button>\n</div>\n\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\n  <mat-dialog-content class=\"many-inputs\">\n    <div class=\"input-container\" *ngIf=\"data.credit\">\n      <label for=\"name\" trans>Person</label>\n      <input type=\"text\" id=\"name\" [value]=\"credit?.name\" disabled />\n    </div>\n\n    <search-input\n      *ngIf=\"!data.credit\"\n      placeholder=\"Search for a person...\"\n      label=\"Person\"\n      [type]=\"personModelType\"\n      [resetInputOnSelect]=\"false\"\n      searchProvider=\"local\"\n      (resultSelected)=\"setCredit($event)\"\n    ></search-input>\n\n    <div class=\"input-container\" *ngIf=\"data.type === 'cast'\">\n      <label for=\"character\" trans>Character</label>\n      <input type=\"text\" id=\"character\" formControlName=\"character\" required />\n    </div>\n\n    <ng-container *ngIf=\"data.type === 'crew'\">\n      <div class=\"input-container\">\n        <label for=\"job\" trans>Job</label>\n        <input type=\"text\" id=\"job\" formControlName=\"job\" [matAutocomplete]=\"auto\" required />\n      </div>\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"jobSelected($event)\">\n        <mat-option\n          *ngFor=\"let value of filteredJobs | async\"\n          [value]=\"value.job\"\n          class=\"multiline-mat-menu-item\"\n        >\n          <div class=\"title\"><span trans>Job</span>: {{ value.job }}</div>\n          <div class=\"description\"><span trans>Department</span>: {{ value.department }}</div>\n        </mat-option>\n      </mat-autocomplete>\n\n      <div class=\"input-container\">\n        <label for=\"department\" trans>Department</label>\n        <input type=\"text\" id=\"department\" formControlName=\"department\" required />\n      </div>\n    </ng-container>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n      Save\n    </button>\n  </mat-dialog-actions>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Inject,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {TitleCredit} from '../../../../../../models/title';\nimport {Observable} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport {Actions, Select, Store} from '@ngxs/store';\nimport {AddCredit, UpdateCredit} from '../../state/crupdate-title-actions';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {Creditable} from '../../../../../people/creditable';\nimport {MEDIA_TYPE} from '../../../../../media-type';\nimport {ValueLists} from '../../../../../../../common/core/services/value-lists.service';\nimport {filter, map, startWith} from 'rxjs/operators';\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\nimport {BackendErrorResponse} from '../../../../../../../common/core/types/backend-error-response';\n\ninterface CrupdateCreditModalData {\n    credit?: TitleCredit;\n    type: 'cast'|'crew';\n    mediaItem: Creditable;\n}\n\ninterface JobList {\n    department: string;\n    jobs: string[];\n}\n\n@Component({\n    selector: 'crupdate-credit-modal',\n    templateUrl: './crupdate-credit-modal.component.html',\n    styleUrls: ['./crupdate-credit-modal.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCreditModalComponent implements OnInit {\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    credit: TitleCredit;\n    personModelType = MEDIA_TYPE.PERSON;\n\n    public form = this.fb.group({\n        character: [''],\n        department: [''],\n        job: [''],\n    });\n\n    public availableJobs: {job: string, department: string}[] = [];\n    public filteredJobs: Observable<{job: string, department: string}[]>;\n\n    constructor(\n        private store: Store,\n        private toast: Toast,\n        private fb: FormBuilder,\n        private actions$: Actions,\n        private dialogRef: MatDialogRef<CrupdateCreditModalComponent>,\n        private valueLists: ValueLists,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCreditModalData,\n    ) {\n        if (this.data.credit) {\n            this.credit = this.data.credit;\n            this.form.patchValue(this.data.credit.pivot);\n        }\n    }\n\n    ngOnInit() {\n        this.valueLists.get(['tmdbJobs']).subscribe(response => {\n            this.availableJobs = [];\n            (response.tmdbJobs as JobList[]).forEach(jobGroup => {\n                const jobs = jobGroup.jobs.map(jobName => {\n                    return {job: jobName, department: jobGroup.department};\n                });\n                this.availableJobs = [...this.availableJobs, ...jobs];\n            });\n\n            this.filteredJobs = this.form.get('job').valueChanges\n                .pipe(\n                    startWith(''),\n                    map(q => this.availableJobs.filter(v => {\n                        q = q.toLowerCase();\n                        return !q || v.job.toLowerCase().includes(q) || v.department.toLowerCase().includes(q);\n                    }).slice(0, 10))\n                );\n        });\n    }\n\n    public confirm() {\n        const action = this.data.credit\n            ? new UpdateCredit(this.credit.pivot.id, this.getPayload())\n            : new AddCredit(this.credit?.id, this.data.mediaItem, this.getPayload());\n        this.store.dispatch(action).subscribe(() => {\n            this.close();\n            this.toast.open(this.data.credit ? MESSAGES.CREDIT_UPDATE_SUCCESS : MESSAGES.CREDIT_ADD_SUCCESS);\n        }, (errResponse: BackendErrorResponse) => {\n            this.toast.open(errResponse.message);\n        });\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public setCredit(credit: TitleCredit) {\n        this.credit = credit;\n    }\n\n    private getPayload() {\n        const payload = this.form.value;\n        if (this.data.type === 'cast') {\n            payload.department = 'cast';\n            payload.job = 'cast';\n        }\n        return payload;\n    }\n\n    public jobSelected(e: MatAutocompleteSelectedEvent) {\n        const value = this.availableJobs.find(v => v.job === e.option.value);\n        this.form.patchValue({job: value.job, department: value.department});\n    }\n}\n","<datatable-header>\n    <button type=\"button\" mat-raised-button color=\"accent\" leftContent (click)=\"openCrupdateCreditModal()\" trans>Add Credit</button>\n</datatable-header>\n\n<table class=\"material-table\" cdkDropList (cdkDropListDropped)=\"changeCreditsOrder($event)\" [cdkDropListDisabled]=\"type === 'crew'\">\n    <thead>\n    <tr>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header=\"pivot.character\" *ngIf=\"type === 'cast'\" trans>Character</th>\n        <th table-sort-header=\"pivot.department\" *ngIf=\"type === 'crew'\" trans>Department</th>\n        <th table-sort-header=\"pivot.job\" *ngIf=\"type === 'crew'\" trans>Job</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let person of datatable.data$ | async\" cdkDrag>\n        <td>\n           <div class=\"column-with-image\">\n               <button type=\"button\" mat-icon-button cdkDragHandle *ngIf=\"type === 'cast'\">\n                   <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n               </button>\n               <media-image [src]=\"person.poster\" size=\"small\"></media-image>\n               <span>{{person.name}}</span>\n           </div>\n            <div *cdkDragPreview>{{person.name}}</div>\n        </td>\n        <td *ngIf=\"type === 'cast'\">{{person.pivot.character}}</td>\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.department}}</td>\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.job}}</td>\n        <td class=\"edit-column\">\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateCreditModal(person)\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" mat-icon-button (click)=\"detachCredit(person)\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\n    <span primary-text trans>Nothing to Display.</span>\n</no-results-message>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges, OnDestroy,\n    OnInit,\n    SimpleChange\n} from '@angular/core';\nimport {Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {TitleCredit} from '../../../../../../models/title';\nimport {CrupdateCreditModalComponent} from '../crupdate-credit-modal/crupdate-credit-modal.component';\nimport {ChangeCreditOrder, RemoveCredit} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {Person} from '../../../../../../models/person';\nimport {Creditable} from '../../../../../people/creditable';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\n\n@Component({\n    selector: 'credits-panel',\n    templateUrl: './credits-panel.component.html',\n    styleUrls: ['./credits-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService]\n})\nexport class CreditsPanelComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() mediaItem: Creditable;\n    @Input() type: 'cast'|'crew';\n\n    constructor(\n        private dialog: Modal,\n        private store: Store,\n        private toast: Toast,\n        public datatable: DatatableService<TitleCredit>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n    }\n\n    ngOnChanges(changes: {mediaItem?: SimpleChange}) {\n        if (changes.mediaItem && changes.mediaItem.currentValue) {\n            this.datatable.data = this.type === 'cast' ?\n                this.getCast(this.mediaItem.credits) :\n                this.getCrew(this.mediaItem.credits);\n        }\n    }\n\n    ngOnDestroy() {\n        this.datatable.destroy();\n    }\n\n    public openCrupdateCreditModal(credit?: TitleCredit) {\n        this.dialog.open(\n            CrupdateCreditModalComponent,\n            {credit, type: this.type, mediaItem: this.mediaItem}\n        );\n    }\n\n    public detachCredit(credit: TitleCredit) {\n        this.dialog.open(ConfirmModalComponent, {\n            title: 'Remove Credit',\n            body:  'Are you sure you want to remove this credit?',\n            ok:    'Remove'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.store.dispatch(new RemoveCredit(this.mediaItem, credit)).subscribe(() => {\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\n            });\n        });\n    }\n\n    public changeCreditsOrder(e: CdkDragDrop<Person>) {\n        if (this.store.selectSnapshot(CrupdateTitleState.loading)) return;\n        this.store.dispatch(new ChangeCreditOrder(this.mediaItem, e.previousIndex, e.currentIndex, this.type));\n    }\n\n    public getCast(credits: TitleCredit[]) {\n        if ( ! credits) return [];\n        return credits.filter(credit => credit.pivot.department === 'cast');\n    }\n\n    public getCrew(credits: TitleCredit[]) {\n        if ( ! credits) return [];\n        return credits.filter(credit => credit.pivot.department !== 'cast');\n    }\n}\n","<div class=\"modal-header\">\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.episode\" trans>Edit Episode</h2>\n  <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.episode\" trans>Create Episode</h2>\n  <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\n    <mat-icon svgIcon=\"close\"></mat-icon>\n  </button>\n</div>\n\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"episodeForm\" ngNativeValidate>\n  <mat-dialog-content>\n    <mat-tab-group [dynamicHeight]=\"true\" animationDuration=\"0ms\" color=\"accent\">\n      <mat-tab [label]=\"'Primary Facts' | trans\">\n        <div class=\"many-inputs primary-facts-panel\">\n          <div class=\"input-container\">\n            <label for=\"name\" trans>Title</label>\n            <input\n              type=\"text\"\n              formControlName=\"name\"\n              id=\"name\"\n              minlength=\"1\"\n              maxlength=\"250\"\n              required\n            />\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"episode_number\" trans>Number</label>\n            <input\n              type=\"number\"\n              formControlName=\"episode_number\"\n              id=\"episode_number\"\n              min=\"1\"\n              required\n            />\n            <div class=\"error\" *ngIf=\"(errors$ | async).episode_number as epNumError\">\n              {{ epNumError }}\n            </div>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"poster\" trans>Poster</label>\n            <div class=\"input-with-action action-left\">\n              <button\n                type=\"button\"\n                mat-flat-button\n                color=\"accent\"\n                (click)=\"uploadPoster()\"\n                [matTooltip]=\"'Upload poster' | trans\"\n              >\n                <mat-icon svgIcon=\"file-upload\"></mat-icon>\n              </button>\n              <input\n                type=\"text\"\n                formControlName=\"poster\"\n                id=\"poster\"\n                minlength=\"1\"\n                maxlength=\"250\"\n              />\n            </div>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"release_date\" trans>Release Date</label>\n            <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" required />\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"description\" trans>Overview</label>\n            <textarea\n              type=\"text\"\n              formControlName=\"description\"\n              id=\"description\"\n              minlength=\"1\"\n              cdkTextareaAutosize\n              cdkAutosizeMinRows=\"6\"\n            ></textarea>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"popularity\" trans>Popularity</label>\n            <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" />\n          </div>\n        </div>\n      </mat-tab>\n      <mat-tab [label]=\"'Cast' | trans\" [disabled]=\"!data.episode\">\n        <credits-panel [mediaItem]=\"episode$ | async\" type=\"cast\"></credits-panel>\n      </mat-tab>\n      <mat-tab [label]=\"'Crew' | trans\" [disabled]=\"!data.episode\">\n        <credits-panel [mediaItem]=\"episode$ | async\" type=\"crew\"></credits-panel>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n      Save\n    </button>\n  </mat-dialog-actions>\n</form>\n","import {Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {Episode} from '../../../../../../../models/episode';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../../state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {CreateEpisode, LoadEpisodeCredits, UpdateEpisode} from '../../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../../toast-messages';\nimport {Season} from '../../../../../../../models/season';\nimport {UploadQueueService} from '../../../../../../../../common/uploads/upload-queue/upload-queue.service';\nimport {Toast} from '../../../../../../../../common/core/ui/toast.service';\nimport {openUploadWindow} from '../../../../../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../../../../../common/uploads/upload-input-config';\nimport {BackendErrorResponse} from '../../../../../../../../common/core/types/backend-error-response';\n\ninterface CrupdateEpisodeModalData {\n    episode?: Episode;\n    season?: Season;\n}\n\n@Component({\n    selector: 'crupdate-episode-modal',\n    templateUrl: './crupdate-episode-modal.component.html',\n    styleUrls: ['./crupdate-episode-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateEpisodeModalComponent implements OnInit {\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    public episode$: BehaviorSubject<Episode> = new BehaviorSubject(null);\n    public errors$: BehaviorSubject<{episode_number?: string}> = new BehaviorSubject({});\n\n    public episodeForm = this.fb.group({\n        name: ['', [Validators.required, Validators.minLength(1)]],\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\n        description: ['', [Validators.minLength(1)]],\n        popularity: [50, [Validators.min(1), Validators.max(1000)]],\n        release_date: [''],\n        episode_number: [''],\n    });\n\n    constructor(\n        private store: Store,\n        private toast: Toast,\n        private fb: FormBuilder,\n        private uploadQueue: UploadQueueService,\n        private dialogRef: MatDialogRef<CrupdateEpisodeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateEpisodeModalData,\n    ) {}\n\n    ngOnInit() {\n        if (this.data.episode) {\n            this.bindToStoreEpisode();\n            this.episodeForm.patchValue({\n                ...this.episode$.value,\n                release_date: this.episode$.value.release_date.split('T')[0]\n            });\n            setTimeout(() => this.loadEpisodeCredits());\n        } else {\n            const epNum = this.data.season ? this.data.season.episode_count + 1 : 1;\n            this.episodeForm.patchValue({episode_number: epNum});\n        }\n    }\n\n    public confirm() {\n        if (this.data.episode) {\n            this.updateEpisode();\n        } else {\n            this.createEpisode();\n        }\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    private createEpisode() {\n        this.store.dispatch(new CreateEpisode(this.data.season, this.episodeForm.value))\n            .subscribe(() => {\n                this.errors$.next({});\n                this.toast.open(MESSAGES.EPISODE_CREATE_SUCCESS);\n                const episodes = this.store.selectSnapshot(CrupdateTitleState.seasons)\n                    .find(s => s.id === this.data.season.id).episodes;\n                this.data.episode = episodes[episodes.length - 1];\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    private updateEpisode() {\n        this.store.dispatch(new UpdateEpisode(this.data.episode, this.episodeForm.value))\n            .subscribe(() => {\n                this.errors$.next({});\n                this.toast.open(MESSAGES.EPISODE_UPDATE_SUCCESS);\n                this.close();\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    public uploadPoster() {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                uri: 'uploads/images',\n                httpParams: {\n                    diskPrefix: 'media-images/posters'\n                },\n            };\n            this.uploadQueue.start(upload, params).subscribe(response => {\n                this.episodeForm.patchValue({\n                    poster: response.fileEntry.url\n                });\n            });\n        });\n    }\n\n    private bindToStoreEpisode() {\n        this.store.select(CrupdateTitleState.title)\n            .subscribe(title => {\n               if (title.seasons) {\n                   const episode = title.seasons.find(s => s.number === this.data.episode.season_number)\n                       .episodes.find(e => e.episode_number === this.data.episode.episode_number);\n                   this.episode$.next({...episode});\n               }\n            });\n    }\n\n    private loadEpisodeCredits() {\n        if ( ! this.data.episode.credits) {\n            this.store.dispatch(new LoadEpisodeCredits(this.episode$.value)).toPromise();\n        }\n    }\n}\n","<datatable-header pluralResourceName=\"episodes\">\n    <ng-container leftContent>\n        <button mat-raised-button color=\"accent\" (click)=\"openCrupdateEpisodeModal()\" trans>Add Episode</button>\n    </ng-container>\n</datatable-header>\n<table class=\"material-table\">\n    <thead>\n    <tr>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header trans>Number</th>\n        <th table-sort-header trans>Release Date</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let episode of datatable.data$ | async; trackBy: trackByFn\">\n        <td>\n            <div class=\"column-with-image\">\n                <media-image [src]=\"episode.poster\" [alt]=\"episode.name\" size=\"small\"></media-image>\n                <span>{{episode.name}}</span>\n            </div>\n        </td>\n        <td>{{episode.episode_number}}</td>\n        <td>{{episode.release_date | formattedDate}}</td>\n        <td class=\"edit-column\">\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateEpisodeModal(episode)\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" mat-icon-button (click)=\"deleteEpisode(episode)\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\">\n    <span primary-text trans>Nothing to Display.</span>\n    <span secondary-text trans>This season does not have any episodes yet.</span>\n</no-results-message>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges, OnDestroy,\n    OnInit,\n    SimpleChange,\n    ViewEncapsulation\n} from '@angular/core';\nimport {Episode} from '../../../../../../models/episode';\nimport {DeleteEpisode} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {CrupdateEpisodeModalComponent} from '../seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {Store} from '@ngxs/store';\nimport {Season} from '../../../../../../models/season';\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\nimport {ActivatedRoute} from '@angular/router';\nimport {DatatableService} from '../../../../../../../common/datatable/datatable.service';\n\n@Component({\n    selector: 'episodes-panel',\n    templateUrl: './episodes-panel.component.html',\n    styleUrls: ['./episodes-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService]\n})\nexport class EpisodesPanelComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    @Input() season: Season;\n    public trackByFn = (i: number, episode: Episode) => episode.id;\n\n    constructor(\n        private store: Store,\n        private dialog: Modal,\n        private toast: Toast,\n        private route: ActivatedRoute,\n        public datatable: DatatableService<Episode>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n    }\n\n    ngAfterViewInit() {\n        const episodeNum = +this.route.snapshot.params.episodeNumber;\n        if (episodeNum) {\n            const episode = this.season.episodes.find(e => e.episode_number === episodeNum);\n            if (episode) {\n                this.openCrupdateEpisodeModal(episode);\n            }\n        }\n    }\n\n    ngOnChanges(changes: {season?: SimpleChange}) {\n        if (changes.season.currentValue && changes.season.currentValue.episodes) {\n            this.datatable.data = this.season.episodes;\n        }\n    }\n\n    ngOnDestroy() {\n        this.datatable.destroy();\n    }\n\n    public deleteEpisode(episode: Episode) {\n        this.dialog.open(ConfirmModalComponent, {\n            title: 'Delete Episode',\n            body:  'Are you sure you want to delete this episode?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.store.dispatch(new DeleteEpisode(episode)).subscribe(() => {\n                this.toast.open(MESSAGES.EPISODE_DELETE_SUCCESS);\n            });\n        });\n    }\n\n    public openCrupdateEpisodeModal(episode?: Episode) {\n        this.dialog.open(\n            CrupdateEpisodeModalComponent,\n            {episode, season: this.season},\n            {panelClass: 'crupdate-episode-modal-container'}\n        );\n    }\n}\n","<ng-container *ngIf=\"seasons$ | async as seasons\">\n    <div class=\"header\">\n        <button type=\"button\" mat-raised-button color=\"accent\" (click)=\"addSeason()\" [disabled]=\"loading$ | async\">Add Season</button>\n    </div>\n\n    <mat-accordion>\n        <mat-expansion-panel [expanded]=\"(activeSeason$ | async) === season.number\" class=\"mat-elevation-z0\" [ngClass]=\"'season-' + season.number + '-panel'\" *ngFor=\"let season of seasons; trackBy: trackByFn\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    <span trans>Season</span>\n                    &nbsp;\n                    <span>{{season.number}}</span>\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <ng-template matExpansionPanelContent>\n                <mat-tab-group animationDuration=\"0ms\" color=\"accent\">\n                    <mat-tab [label]=\"'Episodes' | trans\">\n                        <episodes-panel [season]=\"season\"></episodes-panel>\n                    </mat-tab>\n                    <mat-tab [label]=\"'Regular Cast' | trans\">\n                        <credits-panel type=\"cast\" [mediaItem]=\"season\"></credits-panel>\n                    </mat-tab>\n                    <mat-tab [label]=\"'Regular Crew' | trans\">\n                        <credits-panel type=\"crew\" [mediaItem]=\"season\"></credits-panel>\n                    </mat-tab>\n                </mat-tab-group>\n            </ng-template>\n\n            <mat-action-row>\n                <button type=\"button\" mat-button (click)=\"maybeDeleteSeason(season)\" trans>Delete</button>\n            </mat-action-row>\n        </mat-expansion-panel>\n    </mat-accordion>\n\n    <no-results-message *ngIf=\"!seasons.length\">\n        <span primary-text trans>Nothing to Display.</span>\n        <span secondary-text trans>This series does not have any seasons yet.</span>\n    </no-results-message>\n</ng-container>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Season} from '../../../../../../models/season';\nimport {CreateSeason, DeleteSeason} from '../../state/crupdate-title-actions';\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'seasons-panel',\n    templateUrl: './seasons-panel.component.html',\n    styleUrls: ['./seasons-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeasonsPanelComponent implements OnInit, AfterViewInit {\n    @Select(CrupdateTitleState.seasons) seasons$: Observable<Season[]>;\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    public activeSeason$ = new BehaviorSubject<number>(1);\n\n    constructor(\n        private store: Store,\n        private modal: Modal,\n        private toast: Toast,\n        private route: ActivatedRoute,\n        private el: ElementRef<HTMLElement>,\n    ) {}\n\n    ngOnInit() {\n        this.activeSeason$.next(+this.route.snapshot.params.seasonNumber || 1);\n    }\n\n    ngAfterViewInit() {\n       setTimeout(() => {\n           if (this.activeSeason$.value > 1) {\n               this.el.nativeElement.querySelector(`.season-${this.activeSeason$.value}-panel`)\n                   ?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n           }\n       });\n    }\n\n    public addSeason() {\n        this.store.dispatch(new CreateSeason()).subscribe(() => {\n            this.toast.open(MESSAGES.SEASON_CREATE_SUCCESS);\n        });\n    }\n\n    public maybeDeleteSeason(season: Season) {\n        this.modal.open(ConfirmModalComponent, {\n            title: 'Delete Season',\n            body:  'Are you sure you want to delete this season?',\n            bodyBold: 'This will also delete all episodes attached to this season.',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.store.dispatch(new DeleteSeason(season)).subscribe(() => {\n                this.toast.open(MESSAGES.SEASON_DELETE_SUCCESS);\n            });\n        });\n    }\n\n    trackByFn(index: number, season: Season) {\n        return season.id;\n    }\n}\n","<button mat-raised-button color=\"accent\" (click)=\"uploadImage()\">\n    <mat-icon svgIcon=\"add\"></mat-icon>\n    <span trans>Upload Image</span>\n</button>\n\n<div cdkDropListGroup>\n    <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\"></div>\n    <div class=\"images-grid\">\n        <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\" *ngFor=\"let image of images$ | async\">\n            <media-image class=\"images-panel-media-image\" cdkDrag (cdkDragMoved)=\"dragMoved($event);\" [src]=\"image.url\" size=\"medium\" mode=\"landscape\">\n                <button mat-mini-fab color=\"warn\" (click)=\"deleteImage(image)\">\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\n                </button>\n            </media-image>\n        </div>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {Select, Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {Observable} from 'rxjs';\nimport {Image} from '../../../../../../models/image';\nimport {ImagesService} from '../../../../../shared/images.service';\nimport {AddImage, ChangeImageOrder, DeleteImage} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\nimport {CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup} from '@angular/cdk/drag-drop';\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\nimport {ViewportRuler} from '@angular/cdk/overlay';\n\n@Component({\n    selector: 'images-panel',\n    templateUrl: './images-panel.component.html',\n    styleUrls: ['./images-panel.component.scss'],\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImagesPanelComponent {\n    @Select(CrupdateTitleState.images) images$: Observable<Image[]>;\n\n    @ViewChild(CdkDropListGroup) listGroup: CdkDropListGroup<CdkDropList>;\n    @ViewChild(CdkDropList) placeholder: CdkDropList;\n\n    public target: CdkDropList;\n    public targetIndex: number;\n    public source: CdkDropList;\n    public sourceIndex: number;\n    public activeContainer;\n\n    constructor(\n        private images: ImagesService,\n        private store: Store,\n        private toast: Toast,\n        private viewportRuler: ViewportRuler,\n    ) {}\n\n    public uploadImage() {\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\n            const params = {\n                modelId: this.store.selectSnapshot(CrupdateTitleState.title).id\n            };\n            this.images.create(upload[0], params)\n                .subscribe(response => {\n                    this.store.dispatch(new AddImage(response.image)).subscribe(() => {\n                        this.toast.open(MESSAGES.IMAGE_CREATE_SUCCESS);\n                    });\n                });\n        });\n    }\n\n    public deleteImage(image: Image) {\n        this.store.dispatch(new DeleteImage(image)).subscribe(() => {\n            this.toast.open(MESSAGES.IMAGE_DELETE_SUCCESS);\n        });\n    }\n\n    /* GRID DRAG AND DROP */\n\n    dragMoved(e: CdkDragMove) {\n        const point = this.getPointerPositionOnPage(e.event);\n        this.listGroup._items.forEach(dropList => {\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\n                this.activeContainer = dropList;\n                return;\n            }\n        });\n    }\n\n    dropListDropped() {\n        if ( ! this.target) return;\n\n        const phElement = this.placeholder.element.nativeElement;\n        const parent = phElement.parentElement;\n\n        phElement.style.display = 'none';\n\n        parent.removeChild(phElement);\n        parent.appendChild(phElement);\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\n\n        this.target = null;\n        this.source = null;\n\n        if (this.sourceIndex !== this.targetIndex) {\n            this.store.dispatch(new ChangeImageOrder(this.sourceIndex, this.targetIndex));\n        }\n    }\n\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\n        if (drop === this.placeholder) return true;\n\n\n        if (drop !== this.activeContainer) return false;\n\n        const phElement = this.placeholder.element.nativeElement;\n        const sourceElement = drag.dropContainer.element.nativeElement;\n        const dropElement = drop.element.nativeElement;\n\n        const dragIndex = __indexOf(dropElement.parentElement.children, (this.source ? phElement : sourceElement));\n        const dropIndex = __indexOf(dropElement.parentElement.children, dropElement);\n\n        if ( ! this.source) {\n            this.sourceIndex = dragIndex;\n            this.source = drag.dropContainer;\n\n            phElement.style.width = sourceElement.clientWidth + 'px';\n            phElement.style.height = sourceElement.clientHeight + 'px';\n\n            sourceElement.parentElement.removeChild(sourceElement);\n        }\n\n        this.targetIndex = dropIndex;\n        this.target = drop;\n\n        phElement.style.display = '';\n        dropElement.parentElement.insertBefore(phElement, (dropIndex > dragIndex\n            ? dropElement.nextSibling : dropElement));\n\n        this.placeholder._dropListRef.enter(drag._dragRef, drag.element.nativeElement.offsetLeft, drag.element.nativeElement.offsetTop);\n        return false;\n    }\n\n    /** Determines the point of the page that was touched by the user. */\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        const point = __isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\n\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top\n        };\n    }\n}\n\nfunction __indexOf(collection, node) {\n    return Array.prototype.indexOf.call(collection, node);\n}\n\n/** Determines whether an event is a touch event. */\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n}\n\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\n    const {top, bottom, left, right} = dropList.element.nativeElement.getBoundingClientRect();\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n","<form\n  class=\"input-container\"\n  *ngIf=\"!readonly\"\n  ngNativeValidate\n  (ngSubmit)=\"selectTagsFromString(formControl.value)\"\n>\n  <div class=\"input-with-action\">\n    <input\n      type=\"text\"\n      class=\"tags-string-input\"\n      [matAutocomplete]=\"auto\"\n      [formControl]=\"formControl\"\n      required\n    />\n    <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\n  </div>\n</form>\n\n<p class=\"main-info\" *ngIf=\"!readonly\" [transValues]=\"{tagName: pluralName}\" trans>\n  Separate :tagName with comma.\n</p>\n\n<div class=\"selected-tags\">\n  <mat-chip-list [selectable]=\"false\">\n    <mat-chip\n      (removed)=\"deselectTag(tag)\"\n      [removable]=\"!readonly\"\n      *ngFor=\"let tag of selectedTags$ | async\"\n    >\n      <span>{{ tag }}</span>\n      <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n    </mat-chip>\n  </mat-chip-list>\n</div>\n\n<div class=\"existing-tags\" *ngIf=\"!readonly\">\n  <p [transValues]=\"{tagName: pluralName}\" trans>Choose from existing :tagName:</p>\n  <div class=\"existing-tags-list\">\n    <div\n      class=\"existing-tag-name\"\n      *ngFor=\"let tag of existingTags$ | async\"\n      (click)=\"selectTags([tag.name])\"\n    >\n      {{ tag.display_name }}\n    </div>\n  </div>\n</div>\n\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selectTags([$event.option.value])\">\n  <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{\n    tag.display_name\n  }}</mat-option>\n</mat-autocomplete>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Tag} from '@common/core/types/models/Tag';\nimport {TagsService} from '@common/core/services/tags.service';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    switchMap,\n} from 'rxjs/operators';\n\n@Component({\n    selector: 'tags-manager',\n    templateUrl: './tags-manager.component.html',\n    styleUrls: ['./tags-manager.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TagsManagerComponent,\n            multi: true,\n        },\n    ],\n})\nexport class TagsManagerComponent implements OnInit, ControlValueAccessor {\n    @Input() public readonly = false;\n    @Input() public tagType: string;\n    @Input() public pluralName = 'tags';\n\n    formControl = new FormControl();\n    selectedTags$ = new BehaviorSubject<string[]>([]);\n    existingTags$ = new BehaviorSubject<Tag[]>([]);\n    suggestedTags$ = new BehaviorSubject<Tag[]>([]);\n\n    private propagateChange: (tags: string[]) => void;\n\n    constructor(private tagService: TagsService) {}\n\n    ngOnInit() {\n        this.tagService.index({perPage: 15, type: this.tagType}).subscribe(response => {\n            this.existingTags$.next(\n                response.pagination.data.filter(tag => tag.type !== 'status')\n            );\n        });\n\n        this.formControl.valueChanges\n            .pipe(\n                debounceTime(250),\n                distinctUntilChanged(),\n                switchMap(query => this.searchTags(query)),\n                catchError(() => of([]))\n            )\n            .subscribe(tags => {\n                this.suggestedTags$.next(tags);\n            });\n    }\n\n    writeValue(value: string[]) {\n        this.selectTags(value, {skipPropagate: true, override: true});\n    }\n\n    registerOnChange(fn: (tags: string[]) => void) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() {}\n\n    selectTags(\n        tags?: string[],\n        options: {skipPropagate?: boolean; override?: boolean} = {}\n    ) {\n        const newTags = (tags || [])\n            .map(t => t.trim())\n            .filter(t => !this.selectedTags$.value.includes(t));\n        if (options.override) {\n            this.selectedTags$.next(newTags);\n        } else if (newTags.length) {\n            this.selectedTags$.next([...this.selectedTags$.value, ...newTags]);\n        }\n        this.formControl.reset();\n        if (!options.skipPropagate) {\n            this.propagateChange(this.selectedTags$.value);\n        }\n    }\n\n    deselectTag(tagName: string) {\n        const selectedTags = this.selectedTags$.value.slice();\n        selectedTags.splice(selectedTags.indexOf(tagName), 1);\n        this.selectedTags$.next(selectedTags);\n        this.propagateChange(this.selectedTags$.value);\n    }\n\n    selectTagsFromString(tagString: string) {\n        const tags = tagString.split(',').map(t => slugifyString(t));\n        this.selectTags(tags);\n    }\n\n    private searchTags(query: string): Observable<Tag[]> {\n        if (!query) {\n            return of([]);\n        }\n        return this.tagService.index({query}).pipe(\n            map(response => {\n                return response.pagination.data;\n            })\n        );\n    }\n}\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\ninterface SelectTagsModalComponentData {\n    tagType?: string;\n    pluralName?: string;\n}\n\n@Component({\n    selector: 'tag-manager-modal',\n    templateUrl: './select-tags-modal.component.html',\n    styleUrls: ['./select-tags-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectTagsModalComponent {\n    public selectedTagsControl = new FormControl();\n    public pluralName: string;\n\n    constructor(\n        private dialogRef: MatDialogRef<SelectTagsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: SelectTagsModalComponentData,\n    ) {\n        this.pluralName = this.data.pluralName || 'tags';\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public confirm() {\n        this.dialogRef.close(this.selectedTagsControl.value);\n    }\n\n    public noTagsSelected(): boolean {\n        return !this.selectedTagsControl.value?.length;\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title [transValues]=\"{tagName: pluralName}\" trans>Select :tagName</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n   <tags-manager [tagType]=\"data.tagType\" [pluralName]=\"pluralName\" [formControl]=\"selectedTagsControl\"></tags-manager>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\n    <button type=\"button\" class=\"submit-button\" [disabled]=\"noTagsSelected()\" (click)=\"confirm()\" mat-raised-button color=\"accent\" [transValues]=\"{tagName: pluralName}\" trans>Merge :tagName</button>\n</mat-dialog-actions>\n","<datatable-header>\n    <button mat-raised-button color=\"accent\" leftContent (click)=\"openTagManagerModal()\">\n        {{ 'Add' | trans }} {{ (displayType || (type + 's') ) | trans }}\n    </button>\n</datatable-header>\n\n<table class=\"material-table\">\n    <thead>\n    <tr>\n        <th table-sort-header trans>Name</th>\n        <th table-sort-header trans>Display Name</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let tag of datatable.data$ | async\">\n        <td>{{tag.name}}</td>\n        <td>{{tag.display_name || '-'}}</td>\n        <td class=\"edit-column\">\n            <button mat-icon-button (click)=\"detachTag(tag)\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"folder.svg\">\n    <span primary-text trans>Nothing to display</span>\n</no-results-message>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {Store} from '@ngxs/store';\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\nimport {AttachTags, DetachTag} from '../../state/crupdate-title-actions';\nimport {MESSAGES} from '../../../../../../toast-messages';\nimport {Tag} from '@common/core/types/models/Tag';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SelectTagsModalComponent} from '@common/tags/tags-manager/select-tags-modal/select-tags-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\n\n@Component({\n    selector: 'tags-panel',\n    templateUrl: './tags-panel.component.html',\n    styleUrls: ['./tags-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService]\n})\nexport class TagsPanelComponent implements OnInit, OnDestroy {\n    @Input() type: 'keyword' | 'genre' | 'production_country';\n    @Input() displayType: string;\n\n    constructor(\n        private store: Store,\n        private modal: Modal,\n        private toast: Toast,\n        public datatable: DatatableService<Tag>,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init();\n        const tags$ = this.getTagObservable();\n        tags$.subscribe(tags => {\n            this.datatable.data = tags || [];\n        });\n    }\n\n    ngOnDestroy() {\n        this.datatable.destroy();\n    }\n\n    public openTagManagerModal() {\n        this.modal.open(\n            SelectTagsModalComponent,\n            {tagType: this.type, pluralName: this.type === 'production_country' ? 'countries' : `${this.type}s`},\n        ).beforeClosed().subscribe(tagNames => {\n           if (tagNames && tagNames.length) {\n               this.store.dispatch(new AttachTags(tagNames, this.type));\n           }\n        });\n    }\n\n    public detachTag(tag: Tag) {\n        this.store.dispatch(new DetachTag(tag))\n            .subscribe(() => {\n                this.toast.open(MESSAGES.TAG_DETACH_SUCCESS);\n            });\n    }\n\n    private getTagObservable() {\n        if (this.type === 'keyword') {\n            return this.store.select(CrupdateTitleState.keywords);\n        } else if (this.type === 'genre') {\n            return this.store.select(CrupdateTitleState.genres);\n        } else {\n            return this.store.select(CrupdateTitleState.countries);\n        }\n    }\n}\n","<ng-container *ngIf=\"activePanel$ | async as activePanel\">\n    <primary-facts-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'primaryFacts'\"></primary-facts-panel>\n    <seasons-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'seasons'\"></seasons-panel>\n    <images-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'images'\"></images-panel>\n    <video-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'videos'\" [title]=\"title\"></video-index>\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"cast\" *ngIf=\"activePanel === 'cast'\"></credits-panel>\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"crew\" *ngIf=\"activePanel === 'crew'\"></credits-panel>\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"keyword\" *ngIf=\"activePanel === 'keywords'\"></tags-panel>\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"genre\" *ngIf=\"activePanel === 'genres'\"></tags-panel>\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"production_country\" displayType=\"country\" *ngIf=\"activePanel === 'countries'\"></tags-panel>\n    <reviews-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'reviews'\" [title]=\"title\"></reviews-index>\n\n    <aside class=\"sidebar material-panel\">\n        <div class=\"header\" trans>Edit</div>\n        <div class=\"list\">\n            <button class=\"list-item no-style\" (click)=\"openPanel('primaryFacts')\" [class.active]=\"activePanel === 'primaryFacts'\" trans>Primary Facts</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('seasons')\" [class.active]=\"activePanel === 'seasons'\" trans>Seasons</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('images')\" [class.active]=\"activePanel === 'images'\" trans>Images</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('videos')\" [class.active]=\"activePanel === 'videos'\" trans>Videos</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('cast')\" [class.active]=\"activePanel === 'cast'\" trans>Cast</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('crew')\" [class.active]=\"activePanel === 'crew'\" trans>Crew</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('genres')\" [class.active]=\"activePanel === 'genres'\" trans>Genres</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('keywords')\" [class.active]=\"activePanel === 'keywords'\" trans>Keywords</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('countries')\" [class.active]=\"activePanel === 'countries'\" trans>Countries</button>\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('reviews')\" [class.active]=\"activePanel === 'reviews'\" trans>Reviews</button>\n        </div>\n        <p *ngIf=\"!titleCreated()\" class=\"message\" trans>Save from \"Primary Facts\" panel in order to enable other menu items.</p>\n    </aside>\n\n    <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\n</ng-container>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Select, Store} from '@ngxs/store';\nimport {HydrateTitle, ResetState} from './state/crupdate-title-actions';\nimport {CrupdateTitleState} from './state/crupdate-title-state';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Title} from '../../../../models/title';\n\n@Component({\n    selector: 'crupdate-title',\n    templateUrl: './crupdate-title.component.html',\n    styleUrls: ['./crupdate-title.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTitleComponent implements OnInit, OnDestroy {\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\n    public title: Title;\n    public activePanel$ = new BehaviorSubject<string>('primaryFacts');\n\n    constructor(\n        private store: Store,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            this.store.dispatch(new HydrateTitle(data.api?.title));\n            this.title = data.api?.title;\n        });\n\n        this.route.queryParams.subscribe(params => {\n            this.activePanel$.next(params.active || 'primaryFacts');\n        });\n\n        if (this.route.snapshot.params.seasonNumber) {\n            this.activePanel$.next('seasons');\n        }\n    }\n\n    ngOnDestroy() {\n        this.store.dispatch(new ResetState());\n    }\n\n    public openPanel(name: string) {\n        this.router.navigate([], {queryParams: {active: name}});\n    }\n\n    public titleCreated(): boolean {\n        return !!this.store.selectSnapshot(CrupdateTitleState.title).id;\n    }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {CrupdateTitleResolverService} from './crupdate-title/crupdate-title-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrupdateTitleComponent,\n        resolve: {api: CrupdateTitleResolverService},\n        data: {permissions: ['titles.update']}\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class CrupdateTitleRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {Store} from '@ngxs/store';\nimport {TitlesService} from '../../titles.service';\nimport {CurrentUser} from '../../../../../common/auth/current-user';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CrupdateTitleResolverService implements Resolve<Observable<any>> {\n    constructor(\n        private router: Router,\n        private store: Store,\n        private titles: TitlesService,\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\n        const query = {fullCredits: true, keywords: true, countries: true, seasons: true, skipUpdating: true, allVideos: true},\n            titleId = route.params.titleId;\n\n        if ( ! titleId) {\n            return of(null);\n        }\n\n        return this.titles.get(route.params.titleId, query).pipe(\n            catchError(() => {\n                this.router.navigate(this.fallbackUri(state));\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response) {\n                    return of(response);\n                } else {\n                    this.router.navigate(this.fallbackUri(state));\n                    return EMPTY;\n                }\n            })\n        );\n    }\n\n    private fallbackUri(state: RouterStateSnapshot) {\n        return state.url.includes('admin') ? ['/admin/titles'] : [state.url.replace('/edit', '')];\n    }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {PrimaryFactsPanelComponent} from './crupdate-title/panels/primary-facts-panel/primary-facts-panel.component';\nimport {ImagesPanelComponent} from './crupdate-title/panels/images-panel/images-panel.component';\nimport {CreditsPanelComponent} from './crupdate-title/panels/credits-panel/credits-panel.component';\nimport {CrupdateCreditModalComponent} from './crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component';\nimport {TagsPanelComponent} from './crupdate-title/panels/tags-panel/tags-panel.component';\nimport {SeasonsPanelComponent} from './crupdate-title/panels/seasons-panel/seasons-panel.component';\nimport {CrupdateEpisodeModalComponent} from './crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {VideoIndexComponent} from '../../../admin/video-index/video-index.component';\nimport {CrupdateTitleRoutingModule} from './crupdate-title-routing.module';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {EpisodesPanelComponent} from './crupdate-title/panels/episodes-panel/episodes-panel.component';\nimport {FormatPipesModule} from '../../../../common/core/ui/format-pipes/format-pipes.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {SearchInputModule} from '../../search/seach-input/search-input.module';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\nimport {SelectUserInputModule} from '../../../../common/core/ui/select-user-input/select-user-input.module';\nimport {SelectTitleInputModule} from '../../../admin/video-index/select-title-input/select-title-input.module';\nimport {ReviewsIndexComponent} from '../../../admin/reviews-index/reviews-index.component';\nimport {ReviewIndexFiltersComponent} from '../../../admin/reviews-index/review-index-filters/review-index-filters.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\n\n@NgModule({\n    declarations: [\n        CrupdateTitleComponent,\n        PrimaryFactsPanelComponent,\n        ImagesPanelComponent,\n        CreditsPanelComponent,\n        CrupdateCreditModalComponent,\n        TagsPanelComponent,\n        SeasonsPanelComponent,\n        EpisodesPanelComponent,\n        CrupdateEpisodeModalComponent,\n        VideoIndexComponent,\n        ReviewsIndexComponent,\n        ReviewIndexFiltersComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdateTitleRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NoResultsMessageModule,\n        MediaImageModule,\n        FormatPipesModule,\n        LoadingIndicatorModule,\n        SearchInputModule,\n        DatatableModule,\n        SelectUserInputModule,\n        SelectTitleInputModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatTabsModule,\n        TextFieldModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n    ],\n})\nexport class CrupdateTitleModule {}\n"],"sourceRoot":"webpack:///","file":"70.8737adb9f85377f24123.js"}